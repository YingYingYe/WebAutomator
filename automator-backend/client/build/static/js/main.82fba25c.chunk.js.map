{"version":3,"sources":["store/reducers/theme/index.js","store/reducers/listitem/index.js","store/reducers/index.js","store/index.js","api/cridb.js","api/function.js","components/CircleLoading/index.jsx","api/db.js","components/DialogCompare/Person/index.jsx","components/Person/index.jsx","components/DialogCompare/Place/index.jsx","components/Place/index.jsx","components/DialogCompare/Artefact/index.jsx","components/Artefact/index.jsx","pages/Home/index.jsx","components/DialogEdit/Person/index.jsx","pages/SaveList/Person/index.jsx","components/DialogEdit/Place/index.jsx","pages/SaveList/Place/index.jsx","components/DialogEdit/Artefact/index.jsx","pages/SaveList/Artefact/index.jsx","layout/MainLayout/index.jsx","api/auth.js","components/Login/index.jsx","App.js","useToken.js","index.js"],"names":["themeSlice","createSlice","name","initialState","themeMode","reducers","setThemeMode","state","action","payload","listItemSlice","actions","listItem","setListItem","listItemSelector","rootReducer","combineReducers","theme","persistConfig","key","version","storage","window","createWebStorage","getItem","Promise","resolve","setItem","value","removeItem","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","getDbPediaByKeyword","keyword","a","axios","get","error","message","inValid","getImageFileNames","getDownloadableImageURL","getPerson","getWikiCoord","saveCreateThing","data","post","saveCreateEvent","saveCreateMedium","saveOverwriteThing","saveOverwriteMedium","searchThing","getTagsThing","getDataById","deleteDataById","createPersonAction","record","personQuery","keynameFormat","ApiCRIDB","query","recordID","records","length","id","articleQuery","article","place_birth","birthplace","birthPlaceId","event_birth","birthdate","place_death","deathplace","deathPlaceId","event_death","deathdate","downloadURLs","pictures","trim","split","uploadPromises","i","ext","exec","imageName","nameArr","picture","push","all","overwritePersonAction","console","log","thingId","cridbid","thingTags","birthPlace","deathPlace","birthId","deathId","articles","subDataApi","forEach","item","recordtype","type","then","res","element","subData","subtype","nickname","content","tags","picArr","copiedPicArr","copiedPictures","j","pic","indexOf","undefined","mergeArr","filter","ele","deleteIdArr","mergeEvent","deleteIdsEvent","ex","mergePersonAction","createPlaceAction","latitude","longitude","overwritePlaceAction","apiData","mergePlaceAction","createArtefactAction","keywordFormat","date_start","startdate","date_end","enddate","overwriteArtefactAction","mergeArtefactAction","replace","replaceAll","useStyles","makeStyles","root","display","width","minHeight","justifyContent","alignItems","CircleLoading","classes","className","CircularProgress","getSaveList","saveToSavelist","updateToSavelist","deleteFromSavelist","BootstrapDialog","styled","Dialog","padding","spacing","BootstrapDialogTitle","props","children","onClose","other","DialogTitle","sx","m","p","IconButton","aria-label","onClick","position","right","top","color","palette","grey","Person","useState","showDuplicates","setShowDuplicates","duplicatedId","setDuplicatedId","cancelClose","setIsOpen","aria-labelledby","open","isOpen","DialogContent","dividers","style","container","xs","md","FormElementProps","label","saveAction","onChange","e","target","func","setSaveAction","duplicatedRec","map","DialogActions","autoFocus","saveClose","textAlign","saveForm","enqueueSnackbar","useSnackbar","setDuplicatedRec","cridbId","variant","params","person","birthDate","deathDate","downloadableImageURL","ApiDB","status","Typography","align","paddingBottom","Grid","personLoading","TextField","setPersonForm","multiline","rows","Button","size","ApiFunction","duplicates","IntegrationNotistack","maxSnack","Place","place","placeLoading","setPlaceForm","Artefact","artefact","artefactLoading","startDate","setArtefactForm","endDate","fullWidth","Home","useDispatch","dispatch","resultForm","setKeyword","recordType","setRecordType","setError","setPersonLoading","setPlaceLoading","setArtefactLoading","dateFormat","str_date","str_format","date","moment","format","setPerson","setPlace","setArtefact","getPersonForm","comment","lang","birth","death","wikiDom","bPlace","result","dPlace","imageURL","imageList","promiseArr","image","getPlaceForm","lat","lon","getArtefactForm","goSubmit","onSubmit","helperText","FormControl","InputLabel","Select","MenuItem","setBirthdate","setDeathdate","setBirthplace","setDeathplace","setArticle","setPictures","setId","rowid","setRowid","setEditd","updatedData","updateEvent","useEffect","selectedrow","setRows","editd","setSelectedrow","saveEvent","bulkSavePromise","row","saveaction","fetchSaveList","results","index","prev","columns","field","headerName","flex","sortable","renderCell","marginLeft","Chip","disableClickEventBubbling","onEdit","onDelete","arr","splice","findIndex","fontSize","height","pageSize","rowsPerPageOptions","isRowSelectable","setLatitude","setLongitude","setStartdate","setEnddate","link","textDecoration","MainLayout","setOpen","handleListItemClick","event","useSelector","Box","CssBaseline","AppBar","zIndex","drawer","boxShadow","backgroundColor","Toolbar","noWrap","component","Drawer","flexShrink","boxSizing","overflow","List","to","ListItem","button","selected","ListItemIcon","ListItemText","primary","Collapse","in","timeout","unmountOnExit","pl","flexGrow","loginUser","Copyright","Link","href","Date","getFullYear","createTheme","Login","setToken","username","setUserName","password","setPassword","validForm","setValidForm","handleSubmit","preventDefault","ApiAuth","Container","maxWidth","marginTop","flexDirection","Alert","severity","Avatar","bgcolor","noValidate","mt","margin","required","autoComplete","mb","main","blue","secondary","breakpoints","down","App","persistor","persistStore","tokenString","sessionStorage","userToken","JSON","parse","token","getToken","stringify","useToken","ThemeProvider","loading","exact","path","SavePersonList","SavePlaceList","SaveArtefactList","ReactDOM","render","document","getElementById"],"mappings":"oVASMA,EAAaC,YAAY,CAC9BC,KAAM,QACNC,aAPoB,CACpBC,UAAW,SAOXC,SAAU,CACTC,aAAc,SAACC,EAAOC,GACrB,IAAQC,EAAYD,EAAZC,QACRF,EAAMH,UAAYK,MAMNT,IAAf,QCdMU,GDoBmBV,EAAWW,QAA5BL,aCpBcL,YAAY,CACjCC,KAAM,WACNC,aAPoB,CACpBS,SAAU,GAOVP,SAAU,CACTQ,YAAa,SAACN,EAAOC,GACpB,IAAQC,EAAYD,EAAZC,QACRF,EAAMK,SAAWH,OAMLC,IAAf,QAGaI,EAAmB,SAACP,GAAD,OAAWA,EAAMK,UAGlCC,EAAgBH,EAAcC,QAA9BE,YCjBAE,EAJKC,YAAgB,CACnCJ,SAAUA,EACVK,MAAOA,IC0BFC,EAAgB,CACrBC,IAAK,OACLC,QAAS,EACTC,QANkB,qBAAXC,OACJC,IAAiB,SAdb,CACNC,QADM,WAEL,OAAOC,QAAQC,QAAQ,OAExBC,QAJM,SAIEC,GACP,OAAOH,QAAQC,QAAQE,IAExBC,WAPM,WAQL,OAAOJ,QAAQC,YAYjBI,UAAW,CAAC,UAEPC,EAAmBC,YAAed,EAAeH,GAiBxCkB,EAhBDC,YAAe,CAC5BC,QAASJ,EACTK,WAAY,SAACC,GAAD,OACXA,EAAqB,CACpBC,kBAAmB,CAClBC,eAAgB,CACfC,IACAC,IACAC,IACAC,IACAC,IACAC,W,wICrCQC,EAAmB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAEdC,IAAMC,IAAN,8BAAiCH,IAFnB,iGAIpB,CACHI,MAAO,KAAMC,QACbC,SAAS,IANc,wDAAH,sDAWnBC,EAAiB,uCAAG,WAAOP,GAAP,SAAAC,EAAA,+EAEZC,IAAMC,IAAN,2CAA8CH,IAFlC,iGAIlB,CACHI,MAAO,KAAMC,QACbC,SAAS,IANY,wDAAH,sDAWjBE,EAAuB,uCAAG,WAAOR,GAAP,SAAAC,EAAA,+EAElBC,IAAMC,IAAN,qCAAwCH,IAFtB,iGAIxB,CACHI,MAAO,KAAMC,QACbC,SAAS,IANkB,wDAAH,sDAWvBG,EAAS,uCAAG,WAAOT,GAAP,SAAAC,EAAA,+EAEJC,IAAMC,IAAN,mCAAsCH,IAFlC,iGAIV,CACHI,MAAO,KAAMC,QACbC,SAAS,IANI,wDAAH,sDAWTI,EAAY,uCAAG,WAAOV,GAAP,SAAAC,EAAA,+EAEPC,IAAMC,IAAN,kCAAqCH,IAF9B,iGAIb,CACHI,MAAO,KAAMC,QACbC,SAAS,IANO,wDAAH,sDAyBZK,EAAe,uCAAG,WAAOC,GAAP,SAAAX,EAAA,+EAEVC,IAAMW,KAAN,+BAA2CD,GAFjC,iGAIhB,CACHR,MAAO,KAAMC,QACbC,SAAS,IANU,wDAAH,sDAUfQ,EAAe,uCAAG,WAAOF,GAAP,SAAAX,EAAA,+EAEVC,IAAMW,KAAN,+BAA2CD,GAFjC,iGAIhB,CACHR,MAAO,KAAMC,QACbC,SAAS,IANU,wDAAH,sDAUfS,EAAgB,uCAAG,WAAOH,GAAP,SAAAX,EAAA,+EAEXC,IAAMW,KAAN,gCAA4CD,GAFjC,iGAIjB,CACHR,MAAO,KAAMC,QACbC,SAAS,IANW,wDAAH,sDAYhBU,GAAkB,uCAAG,WAAOJ,GAAP,SAAAX,EAAA,+EAEbC,IAAMW,KAAN,kCAA8CD,GAFjC,iGAInB,CACHR,MAAO,KAAMC,QACbC,SAAS,IANa,wDAAH,sDAoBlBW,GAAmB,uCAAG,WAAOL,GAAP,SAAAX,EAAA,+EAEdC,IAAMW,KAAN,mCAA+CD,GAFjC,iGAIpB,CACHR,MAAO,KAAMC,QACbC,SAAS,IANc,wDAAH,sDA6CnBY,GAAW,uCAAG,WAAON,GAAP,SAAAX,EAAA,+EAENC,IAAMW,KAAN,0BAAsCD,GAFhC,iGAIZ,CACHR,MAAO,KAAMC,QACbC,SAAS,IANM,wDAAH,sDAiCXa,GAAY,uCAAG,WAAOP,GAAP,SAAAX,EAAA,+EAEPC,IAAMW,KAAN,wBAAoCD,GAF7B,iGAIb,CACHR,MAAO,KAAMC,QACbC,SAAS,IANO,wDAAH,sDA+BZc,GAAW,uCAAG,WAAOR,GAAP,SAAAX,EAAA,+EAENC,IAAMW,KAAN,yBAAqCD,GAF/B,iGAIZ,CACHR,MAAO,KAAMC,QACbC,SAAS,IANM,wDAAH,sDAWXe,GAAc,uCAAG,WAAOT,GAAP,SAAAX,EAAA,+EAETC,IAAMW,KAAN,4BAAwCD,GAF/B,iGAIf,CACHR,MAAO,KAAMC,QACbC,SAAS,IANS,wDAAH,sD,SC3PdgB,GAAkB,uCAAG,WAAMC,GAAN,mDAAAtB,EAAA,6DAExBuB,EACN,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAW,SACX,KAAWC,GAAcF,EAAOvB,SAChC,OAAW,WATW,SAYxB0B,EAAyBF,GAZD,uBAcTE,GAAqB,CAACC,MAAOF,GAAcF,EAAOvB,WAdzC,uBAcvBY,EAduB,EAcvBA,KAGDgB,EAAWhB,EAAKiB,QAAQjB,EAAKiB,QAAQC,OAAS,GAAGC,GAEjDC,EACN,CACI,QAAW,OACX,YAAe,SACf,KAAQ,CACJ,QAAY,UACZ,KAASP,GAAcF,EAAOvB,SAC9B,QAAWuB,EAAOU,QAClB,OAAW,SACX,KAAY,CAAE,CAAC,GAAKL,EAAS,KAAO,YAKtCM,EACN,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAY,QACZ,KAASX,EAAOY,WAChB,OAAW,WAxCW,UA4CxBT,EAAyBQ,GA5CD,yBA8CFR,GAAqB,CAACC,MAAOJ,EAAOY,aA9ClC,eA8CxBC,EA9CwB,OA8CgDxB,KAAKiB,QAAQ,GAAGE,GACxFM,EACN,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAY,QACZ,KAAYd,EAAOe,UACnB,OAAW,SACX,KAAY,CAAC,CAAC,GAAKV,EAAS,KAAO,SAAU,CAAC,GAAKQ,EAAc,KAAO,YAvDlD,UA0DxBV,EAAyBW,GA1DD,eA6DxBE,EACN,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAY,QACZ,KAAShB,EAAOiB,WAChB,OAAW,WApEW,UAuExBd,EAAyBa,GAvED,yBAyEFb,GAAqB,CAACC,MAAOJ,EAAOiB,aAzElC,eAyExBC,EAzEwB,OAyEgD7B,KAAKiB,QAAQ,GAAGE,GACxFW,EACN,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAY,QACZ,KAAYnB,EAAOoB,UACnB,OAAW,SACX,KAAY,CAAE,CAAC,GAAKf,EAAU,KAAO,SAAU,CAAC,GAAKa,EAAc,KAAO,YAlFpD,UAsFxBf,EAAyBgB,GAtFD,yBAyFxBhB,EAA0BM,GAzFF,QA8F9B,IAHMY,EAAerB,EAAOsB,SAASC,OAAOC,MAAM,MAE9CC,EAAiB,GACZC,EAAI,EAAGA,EAAIL,EAAad,OAAQmB,IAC/BC,EAAO,SAASC,KAAKP,EAAaK,IAAK,GACvCG,EAAYR,EAAaK,GAAGF,MAAM,IAAMG,GAAK,GAC7CG,EAAUD,EAAUL,MAAM,KAC1B5F,EAAOkG,EAAQA,EAAQvB,OAAO,GAC9BwB,EACN,CACI,QAAW,OACX,YAAe,SACf,IAAOV,EAAaK,GACpB,KAAQ,CACJ,OAAU,SACV,QAAY,UACZ,KAAS9F,EACT,SAAYiG,EACZ,IAAYF,EACZ,KAAY,CAAE,CAAC,GAAKtB,EAAU,KAAO,YAG7CoB,EAAeO,KAAK7B,EAA0B4B,IAjHpB,iBAmHxB5E,QAAQ8E,IAAIR,GAnHY,4CAAH,sDAsHlBS,GAAqB,uCAAG,WAAMlC,GAAN,mCAAAtB,EAAA,6DACjCyD,QAAQC,IAAI,4BAA6BpC,GACrCqC,EAAUrC,EAAOsC,QAFY,SAGRnC,GAAsB,CAACK,GAAI6B,IAHnB,cAG3BE,EAH2B,OAG8BlD,KAAKiB,QAChEkC,EAAa,GACbC,EAAa,GACb5B,EAAe,GACfK,EAAe,GACfwB,EAAU,GACVC,EAAU,GACVrB,EAAW,GACXsB,EAAW,GAEXC,EAAa,GACjBN,EAAUO,SAAQ,SAAAC,GACdF,EAAWb,KAAK7B,GAAqB,CAAE6C,WAAYD,EAAKE,KAAMzC,GAAIuC,EAAKvC,SAf1C,UAiB3BrD,QAAQ8E,IAAIY,GAAYK,KAAxB,uCAA6B,WAAMC,GAAN,2CAAAzE,EAAA,yDAC/ByE,EAAIL,SAAQ,SAAAM,GACR,IAAMC,EAAUD,EAAQ/D,KAAKiB,QACN,UAApB+C,EAAQC,UACPZ,EAAUW,EAAQ7C,IAEC,UAApB6C,EAAQC,UACPX,EAAUU,EAAQ7C,IAEC,YAApB6C,EAAQC,SACPhC,EAASU,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQE,WAE1B,YAApBF,EAAQC,SACPV,EAASZ,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQG,aAbtB,SAkBZ,KAAZd,EAlBwB,gCAmBDvC,GAAqB,CAAE6C,WAAY,QAASxC,GAAIkC,IAnB/C,cAmBvB7B,EAnBuB,OAmB2DxB,KAAKiB,QAAQmD,KAAK,GAAGjD,GAnBhF,SAoBHL,GAAqB,CAAE6C,WAAY,QAASxC,GAAIK,IApB7C,OAoBvB2B,EApBuB,OAoB8DnD,KAAKiB,QAAQ1E,KApB3E,UAsBZ,KAAZ+G,EAtBwB,kCAuBDxC,GAAqB,CAAE6C,WAAY,QAASxC,GAAImC,IAvB/C,eAuBvBzB,EAvBuB,OAuB2D7B,KAAKiB,QAAQmD,KAAK,GAAGjD,GAvBhF,UAwBHL,GAAqB,CAAE6C,WAAY,QAASxC,GAAIU,IAxB7C,QAwBvBuB,EAxBuB,OAwB8DpD,KAAKiB,QAAQ1E,KAxB3E,qEA8B5B4G,IAAexC,EAAOY,WA9BM,wBA+BrBR,EAAQ,CACV,QAAe,OACf,YAAe,QACf,GAAeS,EACf,KAAQ,CACJ,QAAY,QACZ,OAAU,SACV,KAAQb,EAAOY,aAtCI,UAyCrBT,GAA4BC,GAzCP,WA6C5BqC,IAAezC,EAAOiB,WA7CM,wBA8CrBb,EAAQ,CACV,QAAe,OACf,YAAe,QACf,GAAec,EACf,KAAQ,CACJ,QAAY,QACZ,OAAU,SACV,KAAQlB,EAAOiB,aArDI,UAwDrBd,GAA4BC,GAxDP,WA4D5BwC,EAAS,GAAGvD,OAASW,EAAOU,QA5DA,wBA6DrBN,EAAQ,CACV,QAAe,OACf,YAAe,SACf,GAAewC,EAAS,GAAGpC,GAC3B,KAAQ,CACJ,QAAY,UACZ,KAAQN,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UArEC,UAwErBP,GAA6BC,GAxER,QA+E/B,IAHIsD,EAAS1D,EAAOsB,SAASC,OAAOC,MAAM,MACtCmC,EA7E2B,aA6ERD,GACnBE,EA9E2B,UA8ENtC,GAChBI,EAAI,EAAGA,EAAIgC,EAAOnD,OAAQmB,IAC/B,GAAiB,KAAdgC,EAAOhC,GACN,IAASmC,EAAI,EAAGA,EAAIvC,EAASf,OAAQsD,IAC3BC,EAAMxC,EAASuC,GACflC,EAAM,SAASC,KAAK8B,EAAOhC,IAAI,GAC/BG,EAAa6B,EAAOhC,GAAGF,MAAM,IAAMG,GAAM,GAC3CmC,EAAIzE,KAAK0E,QAAQlC,IAAc,IAC/B8B,EAAajC,QAAKsC,EAClBJ,EAAeC,QAAKG,QAI5BL,EAAajC,QAAKsC,EA3FK,OA+F3BC,EA/F2B,aA+FZN,EAAaO,QAAO,SAAAC,GAAG,YAAUH,IAARG,MACxCC,EAhG2B,aAgGTR,EAAeM,QAAO,SAAAC,GAAG,YAAUH,IAARG,MAE7CE,EAAa,GACbC,EAAiB,GACrBL,EAASnB,SAAQ,SAAAqB,GACb,IAAIxC,EAAM,GACN,IACIA,EAAO,SAASC,KAAKuC,GAAM,GAC9B,MAAMI,IACX,IAAM1C,EAAasC,EAAI3C,MAAM,IAAMG,GAAM,GACnCvB,EACN,CACI,QAAW,OACX,YAAe,SACf,IAAO+D,EACP,KAAQ,CACJ,QAAY,UACZ,KAASjE,GAAcF,EAAOvB,SAC9B,SAAYoD,EACZ,IAAYF,EACZ,OAAU,SACV,KAAY,CAAE,CAAC,GAAKU,EAAQ,KAAO,YAG3CgC,EAAWrC,KAAK7B,EAA0BC,OAxHf,UA0HzBjD,QAAQ8E,IAAIoC,GA1Ha,eA4H/BD,EAAYtB,SAAQ,SAAAqB,GAChBG,EAAetC,KAAK7B,GAAwB,CAAE6C,WAAY,SAAUxC,GAAI2D,EAAI3D,SA7HjD,UA+HzBrD,QAAQ8E,IAAIqC,GA/Ha,0DAA7B,uDAjB2B,4CAAH,sDAoJrBE,GAAiB,uCAAG,WAAMxE,GAAN,mCAAAtB,EAAA,6DAC7ByD,QAAQC,IAAI,wBAAyBpC,GACjCqC,EAAUrC,EAAOsC,QAFQ,SAGJnC,GAAsB,CAACK,GAAI6B,IAHvB,cAGvBE,EAHuB,OAGkClD,KAAKiB,QAEhEO,EAAe,GACfK,EAAe,GACfsB,EAAa,GACbC,EAAa,GACbC,EAAU,GACVC,EAAU,GACVrB,EAAW,GACXsB,EAAW,GAEXC,EAAa,GACjBN,EAAUO,SAAQ,SAAAC,GACdF,EAAWb,KAAK7B,GAAqB,CAAE6C,WAAYD,EAAKE,KAAMzC,GAAIuC,EAAKvC,SAhB9C,UAkBvBrD,QAAQ8E,IAAIY,GAAYK,KAAxB,uCAA6B,WAAMC,GAAN,2CAAAzE,EAAA,yDAC/ByE,EAAIL,SAAQ,SAAAM,GACR,IAAMC,EAAUD,EAAQ/D,KAAKiB,QACN,UAApB+C,EAAQC,UACPZ,EAAUW,EAAQ7C,IAEC,UAApB6C,EAAQC,UACPX,EAAUU,EAAQ7C,IAEC,YAApB6C,EAAQC,SACPhC,EAASU,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQE,WAE1B,YAApBF,EAAQC,SACPV,EAASZ,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQG,aAbtB,SAkBZ,KAAZd,EAlBwB,gCAmBDvC,GAAqB,CAAE6C,WAAY,QAASxC,GAAIkC,IAnB/C,cAmBvB7B,EAnBuB,OAmB2DxB,KAAKiB,QAAQmD,KAAK,GAAGjD,GAnBhF,SAoBHL,GAAqB,CAAE6C,WAAY,QAASxC,GAAIK,IApB7C,OAoBvB2B,EApBuB,OAoB8DnD,KAAKiB,QAAQ1E,KApB3E,UAsBZ,KAAZ+G,EAtBwB,kCAuBDxC,GAAqB,CAAE6C,WAAY,QAASxC,GAAImC,IAvB/C,eAuBvBzB,EAvBuB,OAuB2D7B,KAAKiB,QAAQmD,KAAK,GAAGjD,GAvBhF,UAwBHL,GAAqB,CAAE6C,WAAY,QAASxC,GAAIU,IAxB7C,QAwBvBuB,EAxBuB,OAwB8DpD,KAAKiB,QAAQ1E,KAxB3E,qEA8B/BuG,QAAQC,IAAI,sBAAuBI,GACnCL,QAAQC,IAAI,uBAAwBpC,EAAOY,YACxC4B,IAAexC,EAAOY,WAhCM,wBAiCrBR,EAAQ,CACV,QAAe,OACf,YAAe,QACf,GAAeS,EACf,KAAQ,CACJ,QAAY,QACZ,OAAU,SACV,KAAQb,EAAOY,aAxCI,UA2CrBT,GAA4BC,GA3CP,uCA6CrBA,EAAQ,CACV,QAAe,OACf,YAAe,QACf,KAAQ,CACJ,QAAY,QACZ,OAAU,SACV,KAAQJ,EAAOY,aAnDI,UAsDrBT,EAAyBC,GAtDJ,WA0D5BqC,IAAezC,EAAOiB,WA1DM,wBA2DrBb,EAAQ,CACV,QAAe,OACf,YAAe,QACf,GAAec,EACf,KAAQ,CACJ,QAAY,QACZ,OAAU,SACV,KAAQlB,EAAOiB,aAlEI,UAqErBd,GAA4BC,GArEP,uCAuErBA,EAAQ,CACV,QAAe,OACf,YAAe,QACf,KAAQ,CACJ,QAAY,QACZ,OAAU,SACV,KAAQJ,EAAOiB,aA7EI,UAgFrBd,EAAyBC,GAhFJ,aAoF5BwC,EAASrC,OAAS,GApFU,oBAqFxBqC,EAAS,GAAGvD,OAASW,EAAOU,QArFJ,wBAsFjBN,EAAQ,CACV,QAAe,OACf,YAAe,SACf,GAAewC,EAAS,GAAGpC,GAC3B,KAAQ,CACJ,QAAY,UACZ,KAAQN,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UA9FH,UAiGjBP,GAA6BC,GAjGZ,uCAoGrBA,EAAQ,CACV,QAAe,OACf,YAAe,SACf,KAAQ,CACJ,QAAY,UACZ,KAAQF,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UA3GC,UA8GrBP,EAA0BC,GA9GL,QAoH/B,IAFIsD,EAAS1D,EAAOsB,SAASC,OAAOC,MAAM,MACtCmC,EAnH2B,aAmHRD,GACdhC,EAAI,EAAGA,EAAIgC,EAAOnD,OAAQmB,IAC/B,GAAiB,KAAdgC,EAAOhC,GACN,IAASmC,EAAI,EAAGA,EAAIvC,EAASf,OAAQsD,IAC3BC,EAAMxC,EAASuC,GACflC,EAAM,SAASC,KAAK8B,EAAOhC,IAAI,GAC/BG,EAAa6B,EAAOhC,GAAGF,MAAM,IAAMG,GAAM,GAC3CmC,EAAIzE,KAAK0E,QAAQlC,IAAc,IAC/B8B,EAAajC,QAAKsC,QAI1BL,EAAajC,QAAKsC,EA/HK,OAmI3BC,EAnI2B,aAmIZN,EAAaO,QAAO,SAAAC,GAAG,YAAUH,IAARG,MACxCE,EAAa,GACjBJ,EAASnB,SAAQ,SAAAqB,GACb,IAAIxC,EAAM,GACN,IACIA,EAAO,SAASC,KAAKuC,GAAM,GAC9B,MAAMI,IACX,IAAM1C,EAAasC,EAAI3C,MAAM,IAAMG,GAAM,GACnCG,EAAUD,EAAUL,MAAM,KAE1BpB,EACN,CACI,QAAW,OACX,YAAe,SACf,IAAO+D,EACP,KAAQ,CACJ,QAAY,UACZ,KARKrC,EAAQA,EAAQvB,OAAO,GAS5B,SAAYsB,EACZ,IAAYF,EACZ,OAAU,SACV,KAAY,CAAE,CAAC,GAAKU,EAAQ,KAAO,YAG3CgC,EAAWrC,KAAK7B,EAA0BC,OA3Jf,UA6JzBjD,QAAQ8E,IAAIoC,GA7Ja,0DAA7B,uDAlBuB,4CAAH,sDAoLjBI,GAAiB,uCAAG,WAAMzE,GAAN,uCAAAtB,EAAA,6DAC7ByD,QAAQC,IAAIlC,GAAcF,EAAOvB,UAE3B2B,EACN,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAW,QACX,KAAWF,GAAcF,EAAOvB,SAChC,IAAQuB,EAAO0E,SACf,KAAS1E,EAAO2E,UAChB,OAAW,WAZU,SAevBxE,EAAyBC,GAfF,uBAiBRD,GAAqB,CAACC,MAAOF,GAAcF,EAAOvB,WAjB1C,uBAiBtBY,EAjBsB,EAiBtBA,KAGDgB,EAAWhB,EAAKiB,QAAQjB,EAAKiB,QAAQC,OAAS,GAAGC,GAGjDC,EACN,CACI,QAAW,OACX,YAAe,SACf,KAAQ,CACJ,QAAY,UACZ,KAASP,GAAcF,EAAOvB,SAC9B,QAAWuB,EAAOU,QAClB,OAAW,SACX,KAAY,CAAE,CAAC,GAAKL,EAAU,KAAO,YAhChB,UAmCvBF,EAA0BM,GAnCH,QAwC7B,IAFIgB,EAAiB,GACfJ,EAAerB,EAAOsB,SAASC,OAAOC,MAAM,MACzCE,EAAI,EAAGA,EAAIL,EAAad,OAAQmB,IAC/BC,EAAO,SAASC,KAAKP,EAAaK,IAAK,GACvCG,EAAYR,EAAaK,GAAGF,MAAM,IAAMG,GAAK,GAC7CG,EAAUD,EAAUL,MAAM,KAC1B5F,EAAOkG,EAAQA,EAAQvB,OAAO,GAC9BwB,EACF,CACI,QAAW,OACX,YAAe,SACf,IAAOV,EAAaK,GACpB,KAAQ,CACJ,OAAU,SACV,QAAY,UACZ,KAAS9F,EACT,SAAYiG,EACZ,IAAYF,EACZ,KAAY,CAAE,CAAC,GAAKtB,EAAU,KAAO,YAGjDoB,EAAeO,KAAK7B,EAA0B4B,IA3DrB,iBA6DvB5E,QAAQ8E,IAAIR,GA7DW,4CAAH,sDAgEjBmD,GAAoB,uCAAG,WAAM5E,GAAN,2BAAAtB,EAAA,6DAC5B2D,EAAUrC,EAAOsC,QADW,SAETnC,GAAqB,CAAE6C,WAAY,QAASxC,GAAI6B,IAFvC,cAE1BwC,EAF0B,OAEmDxF,KAAKiB,QAClFF,EAAQ,CACV,QAAW,OACX,YAAe,QACf,GAAeyE,EAAQrE,GACvB,KAAQ,CACJ,QAAW,QACX,KAAWN,GAAcF,EAAOvB,SAChC,IAAQuB,EAAO0E,SACf,KAAS1E,EAAO2E,UAChB,OAAW,WAZa,SAe1BxE,GAA4BC,GAfF,UAiBjB,KAAZiC,EAjB6B,kCAkBHlC,GAAsB,CAACK,GAAI6B,IAlBxB,eAkBtBE,EAlBsB,OAkBmClD,KAAKiB,QAEhEgB,EAAW,GACXsB,EAAW,GAEXC,EAAa,GACjBN,EAAUO,SAAQ,SAAAC,GACdF,EAAWb,KAAK7B,GAAqB,CAAE6C,WAAYD,EAAKE,KAAMzC,GAAIuC,EAAKvC,SAzB/C,UA2BtBrD,QAAQ8E,IAAIY,GAAYK,KAAxB,uCAA6B,WAAMC,GAAN,uCAAAzE,EAAA,yDAC/ByE,EAAIL,SAAQ,SAAAM,GACR,IAAMC,EAAUD,EAAQ/D,KAAKiB,QACN,YAApB+C,EAAQC,SACPhC,EAASU,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQE,WAE1B,YAApBF,EAAQC,SACPV,EAASZ,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQG,aAOlDZ,EAAS,GAAGvD,OAASW,EAAOU,QAdA,uBAerBN,EAAQ,CACV,QAAe,OACf,YAAe,SACf,GAAewC,EAAS,GAAGpC,GAC3B,KAAQ,CACJ,QAAY,UACZ,KAAQN,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UAvBC,SA0BrBP,GAA6BC,GA1BR,OAmC/B,IANIsD,EAAS1D,EAAOsB,SAASC,OAAOC,MAAM,MAItCmC,EAjC2B,aAiCRD,GACnBE,EAlC2B,UAkCNtC,GAChBI,EAAI,EAAGA,EAAIgC,EAAOnD,OAAQmB,IAC/B,GAAiB,KAAdgC,EAAOhC,GACN,IAASmC,EAAI,EAAGA,EAAIvC,EAASf,OAAQsD,IAC3BC,EAAMxC,EAASuC,GACflC,EAAM,SAASC,KAAK8B,EAAOhC,IAAI,GAC/BG,EAAa6B,EAAOhC,GAAGF,MAAM,IAAMG,GAAM,GAC3CmC,EAAIzE,KAAK0E,QAAQlC,IAAc,IAC/B8B,EAAajC,QAAKsC,EAClBJ,EAAeC,QAAKG,QAI5BL,EAAajC,QAAKsC,EA/CK,OAmD3BC,EAnD2B,aAmDZN,EAAaO,QAAO,SAAAC,GAAG,YAAUH,IAARG,MACxCC,EApD2B,aAoDTR,EAAeM,QAAO,SAAAC,GAAG,YAAUH,IAARG,MAC7CE,EAAa,GACbC,EAAiB,GACrBL,EAASnB,SAAQ,SAAAqB,GACb,IAAIxC,EAAM,GACV,IACIA,EAAO,SAASC,KAAKuC,GAAM,GAC9B,MAAMI,IACP,IAAM1C,EAAasC,EAAI3C,MAAM,IAAMG,GAAM,GACnCG,EAAUD,EAAUL,MAAM,KAE1BpB,EACN,CACI,QAAW,OACX,YAAe,SACf,IAAO+D,EACP,KAAQ,CACJ,QAAY,UACZ,KARKrC,EAAQA,EAAQvB,OAAO,GAS5B,SAAYsB,EACZ,IAAYF,EACZ,OAAU,SACV,KAAY,CAAE,CAAC,GAAKU,EAAQ,KAAO,YAG3CgC,EAAWrC,KAAK7B,EAA0BC,OA7Ef,UA+EzBjD,QAAQ8E,IAAIoC,GA/Ea,eAiF/BD,EAAYtB,SAAQ,SAAAqB,GAChBG,EAAetC,KAAK7B,GAAwB,CAAE6C,WAAY,SAAUxC,GAAI2D,EAAI3D,SAlFjD,UAoFzBrD,QAAQ8E,IAAIqC,GApFa,4CAA7B,uDA3BsB,4CAAH,sDAoHpBQ,GAAgB,uCAAG,WAAM9E,GAAN,6BAAAtB,EAAA,6DACxB2D,EAAUrC,EAAOsC,QADO,kBAIDnC,GAAqB,CAAE6C,WAAY,QAASxC,GAAI6B,IAJ/C,cAIlBwC,EAJkB,OAI2DxF,KAAKiB,QAClFF,EAAQ,CACV,QAAW,OACX,YAAe,QACf,GAAeyE,EAAQrE,GACvB,KAAQ,CACJ,QAAW,QACX,KAAWN,GAAcF,EAAOvB,SAChC,IAAQuB,EAAO0E,SACf,KAAS1E,EAAO2E,UAChB,OAAW,WAdK,SAiBlBxE,GAA4BC,GAjBV,gEAmBlBA,EAAQ,CACV,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAW,QACX,KAAWF,GAAcF,EAAOvB,SAChC,IAAQuB,EAAO0E,SACf,KAAS1E,EAAO2E,UAChB,OAAW,WA3BK,UA8BlBxE,EAAyBC,GA9BP,WAiCb,KAAZiC,EAjCyB,kCAkCClC,GAAsB,CAACK,GAAI6B,IAlC5B,eAkClBE,EAlCkB,OAkCuClD,KAAKiB,QAEhEgB,EAAW,GACXsB,EAAW,GAEXC,EAAa,GACjBN,EAAUO,SAAQ,SAAAC,GACdF,EAAWb,KAAK7B,GAAqB,CAAE6C,WAAYD,EAAKE,KAAMzC,GAAIuC,EAAKvC,SAzCnD,UA2ClBrD,QAAQ8E,IAAIY,GAAYK,KAAxB,uCAA6B,WAAMC,GAAN,qCAAAzE,EAAA,yDAE/ByE,EAAIL,SAAQ,SAAAM,GACR,IAAMC,EAAUD,EAAQ/D,KAAKiB,QACN,YAApB+C,EAAQC,SACPhC,EAASU,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQE,WAE1B,YAApBF,EAAQC,SACPV,EAASZ,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQG,eAOlDZ,EAASrC,OAAS,GAfU,mBAgBxBqC,EAAS,GAAGvD,OAASW,EAAOU,QAhBJ,uBAiBjBN,EAAQ,CACV,QAAe,OACf,YAAe,SACf,GAAewC,EAAS,GAAGpC,GAC3B,KAAQ,CACJ,QAAY,UACZ,KAAQN,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UAzBH,SA4BjBP,GAA6BC,GA5BZ,qCA+BrBA,EAAQ,CACV,QAAe,OACf,YAAe,SACf,KAAQ,CACJ,QAAY,UACZ,KAAQF,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UAtCC,UAyCrBP,EAA0BC,GAzCL,QAkD/B,IANIsD,EAAS1D,EAAOsB,SAASC,OAAOC,MAAM,MAItCmC,EAhD2B,aAgDRD,GACnBE,EAjD2B,UAiDNtC,GAChBI,EAAI,EAAGA,EAAIgC,EAAOnD,OAAQmB,IAC/B,GAAiB,KAAdgC,EAAOhC,GACN,IAASmC,EAAI,EAAGA,EAAIvC,EAASf,OAAQsD,IAC3BC,EAAMxC,EAASuC,GACflC,EAAM,SAASC,KAAK8B,EAAOhC,IAAI,GAC/BG,EAAa6B,EAAOhC,GAAGF,MAAM,IAAMG,GAAM,GAC3CmC,EAAIzE,KAAK0E,QAAQlC,IAAc,IAC/B8B,EAAajC,QAAKsC,EAClBJ,EAAeC,QAAKG,QAI5BL,EAAajC,QAAKsC,EA9DK,OAkE3BC,EAlE2B,aAkEZN,EAAaO,QAAO,SAAAC,GAAG,YAAUH,IAARG,MACxCE,EAAa,GACjBJ,EAASnB,SAAQ,SAAAqB,GACb,IAAIxC,EAAM,GACN,IACEA,EAAO,SAASC,KAAKuC,GAAM,GAC5B,MAAMI,IACX,IAAM1C,EAAasC,EAAI3C,MAAM,IAAMG,GAAM,GACnCG,EAAUD,EAAUL,MAAM,KAE1BpB,EACN,CACI,QAAW,OACX,YAAe,SACf,IAAO+D,EACP,KAAQ,CACJ,QAAY,UACZ,KARKrC,EAAQA,EAAQvB,OAAO,GAS5B,SAAYsB,EACZ,IAAYF,EACZ,OAAU,SACV,KAAY,CAAE,CAAC,GAAKU,EAAS,KAAO,YAG5CgC,EAAWrC,KAAK7B,EAA0BC,OA1Ff,UA4FzBjD,QAAQ8E,IAAIoC,GA5Fa,4CAA7B,uDA3CkB,0DAAH,sDA6IhBU,GAAoB,uCAAG,WAAM/E,GAAN,2CAAAtB,EAAA,6DAE1B0B,EACN,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAW,WACX,KAAWF,GAAcF,EAAOvB,SAChC,OAAW,WATa,SAY1B0B,EAAyBC,GAZC,uBAcXD,GAAqB,CAACC,MAAO4E,GAAchF,EAAOvB,WAdvC,uBAczBY,EAdyB,EAczBA,KAGDgB,EAAWhB,EAAKiB,QAAQjB,EAAKiB,QAAQC,OAAS,GAAGC,GAEjDC,EACN,CACI,QAAW,OACX,YAAe,SACf,KAAQ,CACJ,QAAY,UACZ,KAASP,GAAcF,EAAOvB,SAC9B,QAAWuB,EAAOU,QAClB,OAAW,SACX,KAAY,CAAE,CAAC,GAAKL,EAAU,KAAO,YAIvCgB,EAAerB,EAAOsB,SAASC,OAAOC,MAAM,MAE5CyD,EACF,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAY,QACZ,KAAYjF,EAAOkF,UACnB,OAAW,SACX,KAAY,CAAE,CAAC,GAAK7E,EAAU,KAAO,YA1CjB,UA6C1BF,EAAyB8E,GA7CC,eA+C1BE,EACF,CACI,QAAW,OACX,YAAe,QACf,KAAQ,CACJ,QAAY,MACZ,KAAYnF,EAAOoF,QACnB,OAAY,SACZ,KAAY,CAAE,CAAC,GAAK/E,EAAU,KAAO,YAvDjB,UA2D1BF,EAAyBgF,GA3DC,yBA6D1BhF,EAA0BM,GA7DA,QAiEhC,IADIgB,EAAiB,GACZC,EAAI,EAAGA,EAAIL,EAAad,OAAQmB,IAC/BC,EAAO,SAASC,KAAKP,EAAaK,IAAK,GACvCG,EAAYR,EAAaK,GAAGF,MAAM,IAAMG,GAAK,GAC7CG,EAAUD,EAAUL,MAAM,KAC1B5F,EAAOkG,EAAQA,EAAQvB,OAAO,GAC9BwB,EACF,CACI,QAAW,OACX,YAAe,SACf,IAAOV,EAAaK,GACpB,KAAQ,CACJ,OAAU,SACV,QAAY,UACZ,KAAS9F,EACT,SAAYiG,EACZ,IAAYF,EACZ,KAAY,CAAE,CAAC,GAAKtB,EAAU,KAAO,YAGjDoB,EAAeO,KAAK7B,EAA0B4B,IApFlB,iBAsF1B5E,QAAQ8E,IAAIR,GAtFc,4CAAH,sDAyFpB4D,GAAuB,uCAAG,WAAMrF,GAAN,uBAAAtB,EAAA,6DAC/B2D,EAAUrC,EAAOsC,QADc,SAEVnC,GAAsB,CAACK,GAAI6B,IAFjB,cAE7BE,EAF6B,OAE4BlD,KAAKiB,QAEhEgB,EAAW,GACXsB,EAAW,GAEXC,EAAa,GACjBN,EAAUO,SAAQ,SAAAC,GACdF,EAAWb,KAAK7B,GAAqB,CAAE6C,WAAYD,EAAKE,KAAMzC,GAAIuC,EAAKvC,SATxC,UAW7BrD,QAAQ8E,IAAIY,GAAYK,KAAxB,uCAA6B,WAAMC,GAAN,uCAAAzE,EAAA,yDAC/ByE,EAAIL,SAAQ,SAAAM,GACR,IAAMC,EAAUD,EAAQ/D,KAAKiB,QACN,YAApB+C,EAAQC,SACPhC,EAASU,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQE,WAE1B,YAApBF,EAAQC,SACPV,EAASZ,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQG,aAOlDZ,EAAS,GAAGvD,OAASW,EAAOU,QAdA,uBAerBN,EAAQ,CACV,QAAe,OACf,YAAe,SACf,GAAewC,EAAS,GAAGpC,GAC3B,KAAQ,CACJ,QAAY,UACZ,KAAQN,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UAvBC,SA0BrBP,GAA6BC,GA1BR,OAmC/B,IANIsD,EAAS1D,EAAOsB,SAASC,OAAOC,MAAM,MAItCmC,EAjC2B,aAiCRD,GACnBE,EAlC2B,UAkCNtC,GAChBI,EAAI,EAAGA,EAAIgC,EAAOnD,OAAQmB,IAC/B,GAAiB,KAAdgC,EAAOhC,GACN,IAASmC,EAAI,EAAGA,EAAIvC,EAASf,OAAQsD,IAC3BC,EAAMxC,EAASuC,GACflC,EAAM,SAASC,KAAK8B,EAAOhC,IAAI,GAC/BG,EAAa6B,EAAOhC,GAAGF,MAAM,IAAMG,GAAM,GAC3CmC,EAAIzE,KAAK0E,QAAQlC,IAAc,IAC/B8B,EAAajC,QAAKsC,EAClBJ,EAAeC,QAAKG,QAI5BL,EAAajC,QAAKsC,EA/CK,OAmD3BC,EAnD2B,aAmDZN,EAAaO,QAAO,SAAAC,GAAG,YAAUH,IAARG,MACxCC,EApD2B,aAoDTR,EAAeM,QAAO,SAAAC,GAAG,YAAUH,IAARG,MAC7CE,EAAa,GACbC,EAAiB,GACrBL,EAASnB,SAAQ,SAAAqB,GACb,IAAIxC,EAAM,GACN,IACIA,EAAO,SAASC,KAAKuC,GAAM,GAC9B,MAAMI,IACX,IAAM1C,EAAasC,EAAI3C,MAAM,IAAMG,GAAM,GACnCG,EAAUD,EAAUL,MAAM,KAE1BpB,EACN,CACI,QAAW,OACX,YAAe,SACf,IAAO+D,EACP,KAAQ,CACJ,QAAY,UACZ,KARKrC,EAAQA,EAAQvB,OAAO,GAS5B,SAAYsB,EACZ,IAAYF,EACZ,OAAU,SACV,KAAY,CAAE,CAAC,GAAKU,EAAS,KAAO,YAG5CgC,EAAWrC,KAAK7B,EAA0BC,OA7Ef,UA+EzBjD,QAAQ8E,IAAIoC,GA/Ea,eAiF/BD,EAAYtB,SAAQ,SAAAqB,GAChBG,EAAetC,KAAK7B,GAAwB,CAAE6C,WAAY,SAAUxC,GAAI2D,EAAI3D,SAlFjD,UAoFzBrD,QAAQ8E,IAAIqC,GApFa,4CAA7B,uDAX6B,4CAAH,sDAmGvBgB,GAAmB,uCAAG,WAAMtF,GAAN,uBAAAtB,EAAA,6DAE3B2D,EAAUrC,EAAOsC,QAFU,SAGNnC,GAAsB,CAACK,GAAI6B,IAHrB,cAGzBE,EAHyB,OAGgClD,KAAKiB,QAEhEgB,EAAW,GACXsB,EAAW,GAEXC,EAAa,GACjBN,EAAUO,SAAQ,SAAAC,GACdF,EAAWb,KAAK7B,GAAqB,CAAE6C,WAAYD,EAAKE,KAAMzC,GAAIuC,EAAKvC,SAV5C,UAYzBrD,QAAQ8E,IAAIY,GAAYK,KAAxB,uCAA6B,WAAMC,GAAN,qCAAAzE,EAAA,yDAE/ByE,EAAIL,SAAQ,SAAAM,GACR,IAAMC,EAAUD,EAAQ/D,KAAKiB,QACN,YAApB+C,EAAQC,SACPhC,EAASU,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQE,WAE1B,YAApBF,EAAQC,SACPV,EAASZ,KAAK,CAACxB,GAAI6C,EAAQ7C,GAAInB,KAAMgE,EAAQG,eAOlDZ,EAASrC,OAAS,GAfU,mBAgBxBqC,EAAS,GAAGvD,OAASW,EAAOU,QAhBJ,uBAiBjBN,EAAQ,CACV,QAAe,OACf,YAAe,SACf,GAAewC,EAAS,GAAGpC,GAC3B,KAAQ,CACJ,QAAY,UACZ,KAAQN,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UAzBH,SA4BjBP,GAA6BC,GA5BZ,qCA+BrBA,EAAQ,CACV,QAAe,OACf,YAAe,SACf,KAAQ,CACJ,QAAY,UACZ,KAAQF,GAAcF,EAAOvB,SAC7B,OAAU,SACV,QAAWuB,EAAOU,UAtCC,UAyCrBP,EAA0BC,GAzCL,QAkD/B,IANIsD,EAAS1D,EAAOsB,SAASC,OAAOC,MAAM,MAItCmC,EAhD2B,aAgDRD,GACnBE,EAjD2B,UAiDNtC,GAChBI,EAAI,EAAGA,EAAIgC,EAAOnD,OAAQmB,IAC/B,GAAiB,KAAdgC,EAAOhC,GACN,IAASmC,EAAI,EAAGA,EAAIvC,EAASf,OAAQsD,IAC3BC,EAAMxC,EAASuC,GACflC,EAAM,SAASC,KAAK8B,EAAOhC,IAAI,GAC/BG,EAAa6B,EAAOhC,GAAGF,MAAM,IAAMG,GAAM,GAC3CmC,EAAIzE,KAAK0E,QAAQlC,IAAc,IAC/B8B,EAAajC,QAAKsC,EAClBJ,EAAeC,QAAKG,QAI5BL,EAAajC,QAAKsC,EA9DK,OAkE3BC,EAlE2B,aAkEZN,EAAaO,QAAO,SAAAC,GAAG,YAAUH,IAARG,MACxCE,EAAa,GACjBJ,EAASnB,SAAQ,SAAAqB,GACb,IAAIxC,EAAM,GACN,IACIA,EAAO,SAASC,KAAKuC,GAAM,GAC9B,MAAMI,IACX,IAAM1C,EAAasC,EAAI3C,MAAM,IAAMG,GAAM,GACnCG,EAAUD,EAAUL,MAAM,KAE1BpB,EACN,CACI,QAAW,OACX,YAAe,SACf,IAAO+D,EACP,KAAQ,CACJ,QAAY,UACZ,KARKrC,EAAQA,EAAQvB,OAAO,GAS5B,SAAYsB,EACZ,IAAYF,EACZ,OAAU,SACV,KAAY,CAAE,CAAC,GAAKU,EAAS,KAAO,YAG5CgC,EAAWrC,KAAK7B,EAA0BC,OA1Ff,UA4FzBjD,QAAQ8E,IAAIoC,GA5Fa,4CAA7B,uDAZyB,4CAAH,sDA6GnBW,GAAgB,SAACvG,GAE1B,OADgBA,EAAQ8G,QAAQ,SAAU,KAAKhE,OAAOiE,WAAW,IAAK,MAI7DtF,GAAgB,SAACzB,GAE1B,OADgBuG,GAAcvG,GAAS+G,WAAW,IAAK,M,wCC9iCrDC,GAAYC,aAAW,SAAA/I,GAAK,MAAK,CACnCgJ,KAAM,CACFC,QAAS,OACTC,MAAO,OACPC,UAAW,IACXC,eAAgB,SAChBC,WAAY,cAWLC,GAPO,WAClB,IAAMC,EAAUT,KAChB,OAAO,yBAAKU,UAAWD,EAAQP,MAC3B,kBAACS,GAAA,EAAD,QCdKC,GAAW,uCAAG,WAAOpD,GAAP,SAAAvE,EAAA,+EAENC,IAAMC,IAAN,uBAA0BqE,EAA1B,SAFM,iGAIZ,CACHpE,MAAO,KAAMC,QACbC,SAAS,IANM,wDAAH,sDAWXuH,GAAc,uCAAG,WAAOjH,EAAM4D,GAAb,SAAAvE,EAAA,+EAETC,IAAMW,KAAN,uBAA2B2D,EAA3B,SAAwC5D,GAF/B,iGAIf,CACHR,MAAO,KAAMC,QACbC,SAAS,IANS,wDAAH,wDAWdwH,GAAgB,uCAAG,WAAOlH,EAAM4D,GAAb,SAAAvE,EAAA,+EAEXC,IAAMW,KAAN,uBAA2B2D,EAA3B,WAA0C5D,GAF/B,iGAIjB,CACHR,MAAO,KAAMC,QACbC,SAAS,IANW,wDAAH,wDAWhByH,GAAkB,uCAAG,WAAO/H,EAASwE,GAAhB,SAAAvE,EAAA,+EAEbC,IAAMC,IAAN,uBAA0BqE,EAA1B,mBAAyCxE,IAF5B,iGAInB,CACHI,MAAO,KAAMC,QACbC,SAAS,IANa,wDAAH,wD,6KCbzB0H,GAAkBC,aAAOC,KAAPD,EAAe,gBAAG/J,EAAH,EAAGA,MAAH,MAAgB,CACrD,2BAA4B,CAC1BiK,QAASjK,EAAMkK,QAAQ,IAEzB,2BAA4B,CAC1BD,QAASjK,EAAMkK,QAAQ,QAIrBC,GAAuB,SAACC,GAC5B,IAAQC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,QAAYC,EAA9B,aAAwCH,EAAxC,IAEA,OACE,kBAACI,GAAA,EAAD,eAAaC,GAAI,CAAEC,EAAG,EAAGC,EAAG,IAASJ,GAClCF,EACAC,EACC,kBAACM,GAAA,EAAD,CACEC,aAAW,QACXC,QAASR,EACTG,GAAI,CACFM,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,MAAO,SAAClL,GAAD,OAAWA,EAAMmL,QAAQC,KAAK,QAGvC,kBAAC,KAAD,OAEA,OAgHKC,GAtGA,SAACjB,GACd,MAA4CkB,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAaMC,EAAc,WAClBvB,EAAMwB,WAAU,IAiBlB,OACE,6BACE,kBAAC9B,GAAD,CACEQ,QAASqB,EACTE,kBAAgB,0BAChBC,KAAM1B,EAAM2B,QAEZ,kBAAC,GAAD,CAAsBlI,GAAG,0BAA0ByG,QAASqB,GAA5D,cAGA,kBAACK,GAAA,EAAD,CAAeC,UAAQ,EAACC,MAAO,CAAChD,MAAO,UACrC,kBAAC,KAAD,CAAMiD,WAAS,EAAC3C,UAAU,QACxB,kBAAC,KAAD,CAAMpD,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAD,iBAAiBjC,EAAMkC,iBAAvB,CAA0C9C,UAAU,cAClD,kBAAC,KAAD,CAAY3F,GAAG,eAAf,eACA,kBAAC,KAAD,CACE0I,MAAM,cACN5L,MAAOyJ,EAAM1H,KAAK8J,WAClBC,SAAU,SAAAC,GA/CC,IAACF,EACR,YADQA,EA+CuBE,EAAEC,OAAOhM,QA7CxD6K,GAAkB,GAClBE,EAAgB,MACM,cAAfc,GAEe,UAAfA,IADPhB,GAAkB,GA0C8CpB,EAAMwC,KAAKC,cAAcH,EAAEC,OAAOhM,SAEtF,kBAAC,KAAD,CAAUA,MAAM,UAAhB,UACA,kBAAC,KAAD,CAAUA,MAAM,aAAhB,aACA,kBAAC,KAAD,CAAUA,MAAM,SAAhB,aAKR,oCAEI4K,EACA,kBAAC,KAAD,CAAMY,WAAS,EAAC3C,UAAU,aACxB,kBAAC,KAAD,CAAMpD,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAgBjC,EAAMkC,iBACrB,kBAAC,KAAD,CAAYzI,GAAG,oBAAf,8BACA,kBAAC,KAAD,CACE0I,MAAM,qBACN5L,MAAO8K,EACPgB,SAAU,SAAAC,GAAMhB,EAAgBgB,EAAEC,OAAOhM,SAGvCyJ,EAAM0C,cAAcC,KAAI,SAACtG,EAAS1B,GAAV,OAAgB,kBAAC,KAAD,CAAUpE,MAAO8F,EAAQ5C,GAAI3D,IAAK6E,GAAI0B,EAAQxH,aAM9F,uCAIR,kBAAC+N,GAAA,EAAD,KACE,kBAAC,KAAD,CAAMb,WAAS,GACb,kBAAC,KAAD,CAAM/F,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,CAAQY,WAAS,EAACnC,QAnEH,WACI,WAAxBV,EAAM1H,KAAK8J,YAA0C,KAAjBf,IACvCrB,EAAMwB,WAAU,GAChBxB,EAAM8C,UAAU9C,EAAM1H,KAAK8J,WAAYf,EAAc,cAgE7C,qBAIF,kBAAC,KAAD,CAAMrF,MAAI,EAACgG,GAAI,EAAGC,GAAI,EAAGH,MAAO,CAACiB,UAAW,UAC1C,kBAAC,KAAD,CAAQrC,QAjEA,WACW,WAAxBV,EAAM1H,KAAK8J,YAA0C,KAAjBf,IACvCrB,EAAMwB,WAAU,GAChBxB,EAAMwC,KAAKQ,SAAS3B,MA8DZ,uBCrIRJ,GAAS,SAAC,GAAsC,IAApCuB,EAAmC,EAAnCA,KAAMlK,EAA6B,EAA7BA,KAAM4J,EAAuB,EAAvBA,iBAClBe,EAAoBC,eAApBD,gBACR,EAA4B/B,oBAAS,GAArC,mBAAOS,EAAP,KAAeH,EAAf,KACA,EAA0CN,mBAAS,IAAnD,mBAAOwB,EAAP,KAAsBS,EAAtB,KAkBML,EAAS,uCAAG,WAAMV,EAAYgB,EAASC,GAA3B,eAAA1L,EAAA,6DACR2L,EAAS,CACXhL,EAAKZ,QACLY,EAAKiL,OAAO9H,WACZnD,EAAKiL,OAAO7H,WACZpD,EAAKiL,OAAOC,UACZlL,EAAKiL,OAAOE,UACZnL,EAAKiL,OAAO5J,QACZrB,EAAKiL,OAAOG,qBACZtB,EACAgB,GAVU,kBAaJO,GAAqBL,EAAQ,UAAUnH,MAAK,SAAAC,GAC5B,MAAfA,EAAIwH,QACHX,EAAgB,yDAA0D,CAAEI,eAf1E,8GAAH,0DAqBf,OACI,oCACA,kBAACQ,EAAA,EAAD,CAAYR,QAAQ,KAAKS,MAAM,OAAOhC,MAAO,CAACiC,cAAe,YAA7D,UACA,kBAACC,EAAA,EAAD,CAAMjC,WAAS,EAACjC,QAAS,GAErB,oCAEQxH,EAAK2L,cAAgB,kBAAC,GAAD,MACrB,oCACA,kBAACD,EAAA,EAAD,CAAMjC,WAAS,EAACjC,QAAS,GACrB,kBAACkE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,GAClB,kBAACiC,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,aACN5L,MAAO+B,EAAKiL,OAAOC,UACnBnB,SAAU,SAAAC,GAAME,EAAK2B,cAAc,YAAa7B,EAAEC,OAAOhM,YAGjE,kBAACyN,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,GAClB,kBAACiC,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,aACN5L,MAAO+B,EAAKiL,OAAOE,UACnBpB,SAAU,SAAAC,GAAC,OAAIE,EAAK2B,cAAc,YAAa7B,EAAEC,OAAOhM,aAKpE,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,cACN5L,MAAO+B,EAAKiL,OAAO9H,WACnB4G,SAAU,SAAAC,GAAC,OAAIE,EAAK2B,cAAc,aAAc7B,EAAEC,OAAOhM,WAE7D,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,cACN5L,MAAO+B,EAAKiL,OAAO7H,WACnB2G,SAAU,SAAAC,GAAC,OAAIE,EAAK2B,cAAc,aAAc7B,EAAEC,OAAOhM,WAG7D,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,UACNiC,WAAS,EACTC,KAAM,EACN9N,MAAO+B,EAAKiL,OAAO5J,QACnB0I,SAAU,SAAAC,GAAC,OAAIE,EAAK2B,cAAc,UAAW7B,EAAEC,OAAOhM,WAG1D,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,yBACNiC,WAAS,EACTC,KAAM,EACN9N,MAAO+B,EAAKiL,OAAOG,qBACnBrB,SAAU,SAAAC,GAAC,OAAIE,EAAK2B,cAAc,uBAAwB7B,EAAEC,OAAOhM,aAM/E,kBAACyN,EAAA,EAAD,CAAMjC,WAAS,EAAC3C,UAAU,QACtB,kBAAC4E,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,IACtB,kBAAC+B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,EAAG6B,MAAM,SAC3B,kBAACQ,EAAA,EAAD,CAAQjB,QAAQ,WAAWvC,MAAM,UAAUyD,KAAK,QAAQ7D,QAtGjD,sBAAM,sBAAA/I,EAAA,+EAEfyB,GAAqB,CAACC,MAAOmL,GAA0BlM,EAAKZ,WAAWyE,MAAK,SAACC,GAC/E,IAAMqI,EAAarI,EAAI9D,KAAKiB,QAAQ4D,QAAO,SAAClE,GACxC,MAA0B,WAAnBA,EAAOsD,WAGfkI,EAAWjL,OAAS,GACnB2J,EAAiBsB,MARJ,OAWrBjD,GAAU,GAXW,wGAsGb,cAMZ,kBAAC,GAAD,CACIU,iBAAkBA,EAClBP,OAAQA,EACRe,cAAeA,EACflB,UAAWA,EACXsB,UAAWA,EACXxK,KAAMA,EACNkK,KAAMA,MAMH,SAASkC,GAAqB1E,GACzC,OACI,kBAAC,KAAD,CAAkB2E,SAAU,GACxB,kBAAC,GAAW3E,I,8BC7HlBN,GAAkBC,aAAOC,KAAPD,EAAe,gBAAG/J,EAAH,EAAGA,MAAH,MAAgB,CACrD,2BAA4B,CAC1BiK,QAASjK,EAAMkK,QAAQ,IAEzB,2BAA4B,CAC1BD,QAASjK,EAAMkK,QAAQ,QAIrBC,GAAuB,SAACC,GAC5B,IAAQC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,QAAYC,EAA9B,aAAwCH,EAAxC,IAEA,OACE,kBAACI,GAAA,EAAD,eAAaC,GAAI,CAAEC,EAAG,EAAGC,EAAG,IAASJ,GAClCF,EACAC,EACC,kBAACM,GAAA,EAAD,CACEC,aAAW,QACXC,QAASR,EACTG,GAAI,CACFM,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,MAAO,SAAClL,GAAD,OAAWA,EAAMmL,QAAQC,KAAK,QAGvC,kBAAC,KAAD,OAEA,OAgHK4D,GAtGD,SAAC5E,GACb,MAA4CkB,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAaMC,EAAc,WAClBvB,EAAMwB,WAAU,IAiBlB,OACE,6BACE,kBAAC,GAAD,CACEtB,QAASqB,EACTE,kBAAgB,0BAChBC,KAAM1B,EAAM2B,QAEZ,kBAAC,GAAD,CAAsBlI,GAAG,0BAA0ByG,QAASqB,GAA5D,cAGA,kBAACK,GAAA,EAAD,CAAeC,UAAQ,EAACC,MAAO,CAAChD,MAAO,UACrC,kBAAC,KAAD,CAAMiD,WAAS,EAAC3C,UAAU,QACxB,kBAAC,KAAD,CAAMpD,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAD,iBAAiBjC,EAAMkC,iBAAvB,CAA0C9C,UAAU,cAClD,kBAAC,KAAD,CAAY3F,GAAG,eAAf,eACA,kBAAC,KAAD,CACE0I,MAAM,cACN5L,MAAOyJ,EAAM1H,KAAK8J,WAClBC,SAAU,SAAAC,GA/CC,IAACF,EACR,YADQA,EA+CuBE,EAAEC,OAAOhM,QA7CxD6K,GAAkB,GAClBE,EAAgB,MACM,cAAfc,GAEe,UAAfA,IADPhB,GAAkB,GA0C8CpB,EAAMwC,KAAKC,cAAcH,EAAEC,OAAOhM,SAEtF,kBAAC,KAAD,CAAUA,MAAM,UAAhB,UACA,kBAAC,KAAD,CAAUA,MAAM,aAAhB,aACA,kBAAC,KAAD,CAAUA,MAAM,SAAhB,aAKR,oCAEI4K,EACA,kBAAC,KAAD,CAAMY,WAAS,EAAC3C,UAAU,aACxB,kBAAC,KAAD,CAAMpD,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAgBjC,EAAMkC,iBACrB,kBAAC,KAAD,CAAYzI,GAAG,oBAAf,8BACA,kBAAC,KAAD,CACE0I,MAAM,qBACN5L,MAAO8K,EACPgB,SAAU,SAAAC,GAAMhB,EAAgBgB,EAAEC,OAAOhM,SAGvCyJ,EAAM0C,cAAcC,KAAI,SAACtG,EAAS1B,GAAV,OAAgB,kBAAC,KAAD,CAAUpE,MAAO8F,EAAQ5C,GAAI3D,IAAK6E,GAAI0B,EAAQxH,aAM9F,uCAIR,kBAAC+N,GAAA,EAAD,KACE,kBAAC,KAAD,CAAMb,WAAS,GACb,kBAAC,KAAD,CAAM/F,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,CAAQY,WAAS,EAACnC,QAnEH,WACI,WAAxBV,EAAM1H,KAAK8J,YAA0C,KAAjBf,IACvCrB,EAAMwB,WAAU,GAChBxB,EAAM8C,UAAU9C,EAAM1H,KAAK8J,WAAYf,EAAc,cAgE7C,qBAIF,kBAAC,KAAD,CAAMrF,MAAI,EAACgG,GAAI,EAAGC,GAAI,EAAGH,MAAO,CAACiB,UAAW,UAC1C,kBAAC,KAAD,CAAQrC,QAjEA,WACW,WAAxBV,EAAM1H,KAAK8J,YAA0C,KAAjBf,IACvCrB,EAAMwB,WAAU,GAChBxB,EAAMwC,KAAKQ,SAAS3B,MA8DZ,uBCrIRuD,GAAQ,SAAC,GAAsC,IAApCpC,EAAmC,EAAnCA,KAAMlK,EAA6B,EAA7BA,KAAM4J,EAAuB,EAAvBA,iBACjBe,EAAoBC,eAApBD,gBACR,EAA4B/B,oBAAS,GAArC,mBAAOS,EAAP,KAAeH,EAAf,KACA,EAA0CN,mBAAS,IAAnD,mBAAOwB,EAAP,KAAsBS,EAAtB,KAgBML,EAAS,uCAAG,WAAMV,EAAYgB,EAASC,GAA3B,eAAA1L,EAAA,6DACR2L,EAAS,CACXhL,EAAKZ,QACLY,EAAKuM,MAAMlH,SACXrF,EAAKuM,MAAMjH,UACXtF,EAAKuM,MAAMlL,QACXrB,EAAKuM,MAAMnB,qBACXtB,EACAgB,GARU,kBAWJO,GAAqBL,EAAQ,SAASnH,MAAK,SAAAC,GAC3B,MAAfA,EAAIwH,QACHX,EAAgB,yDAA0D,CAAEI,eAb1E,8GAAH,0DAmBf,OACI,oCACA,kBAACQ,EAAA,EAAD,CAAYR,QAAQ,KAAKS,MAAM,OAAOhC,MAAO,CAACiC,cAAe,YAA7D,UACA,kBAACC,EAAA,EAAD,CAAMjC,WAAS,EAACjC,QAAS,GACrB,oCAEQxH,EAAKwM,aAAe,kBAAC,GAAD,MACpB,oCAEI,kBAACd,EAAA,EAAD,CAAMjC,WAAS,EAACjC,QAAS,GACrB,kBAACkE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,GAClB,kBAACiC,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,WACN5L,MAAO+B,EAAKuM,MAAMlH,SAClB0E,SAAU,SAAAC,GAAC,OAAIE,EAAKuC,aAAa,WAAYzC,EAAEC,OAAOhM,YAG9D,kBAACyN,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,GAClB,kBAACiC,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,YACN5L,MAAO+B,EAAKuM,MAAMjH,UAClByE,SAAU,SAAAC,GAAC,OAAIE,EAAKuC,aAAa,YAAazC,EAAEC,OAAOhM,aAKnE,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAO,UACPiC,WAAS,EACTC,KAAM,EACN9N,MAAO+B,EAAKuM,MAAMlL,QAClB0I,SAAU,SAAAC,GAAC,OAAIE,EAAKuC,aAAa,UAAWzC,EAAEC,OAAOhM,WAGzD,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,yBACNiC,WAAS,EACTC,KAAM,EACN9N,MAAO+B,EAAKuM,MAAMnB,qBAClBrB,SAAU,SAAAC,GAAC,OAAIE,EAAKuC,aAAa,uBAAwBzC,EAAEC,OAAOhM,aAMlF,kBAACyN,EAAA,EAAD,CAAMjC,WAAS,EAAC3C,UAAU,QACtB,kBAAC4E,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,IACtB,kBAAC+B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,EAAG6B,MAAM,SAC3B,kBAACQ,EAAA,EAAD,CAAQjB,QAAQ,WAAWvC,MAAM,UAAUyD,KAAK,QAAQnF,UAAU,OAAOsB,QArFlE,sBAAM,sBAAA/I,EAAA,+EAEfyB,GAAqB,CAACC,MAAOmL,GAA0BlM,EAAKZ,WAAWyE,MAAK,SAACC,GAC/E,IAAMqI,EAAarI,EAAI9D,KAAKiB,QAAQ4D,QAAO,SAAClE,GACxC,MAA0B,UAAnBA,EAAOsD,WAEfkI,EAAWjL,OAAS,GACnB2J,EAAiBsB,MAPJ,OAUrBjD,GAAU,GAVW,wGAqFb,cAMZ,kBAAC,GAAD,CACIU,iBAAkBA,EAClBP,OAAQA,EACRe,cAAeA,EACflB,UAAWA,EACXsB,UAAWA,EACXxK,KAAMA,EACNkK,KAAMA,MAOH,SAASkC,GAAqB1E,GACzC,OACI,kBAAC,KAAD,CAAkB2E,SAAU,GACxB,kBAAC,GAAU3E,I,8BC7GjBN,GAAkBC,aAAOC,KAAPD,EAAe,gBAAG/J,EAAH,EAAGA,MAAH,MAAgB,CACrD,2BAA4B,CAC1BiK,QAASjK,EAAMkK,QAAQ,IAEzB,2BAA4B,CAC1BD,QAASjK,EAAMkK,QAAQ,QAIrBC,GAAuB,SAACC,GAC5B,IAAQC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,QAAYC,EAA9B,aAAwCH,EAAxC,IAEA,OACE,kBAACI,GAAA,EAAD,eAAaC,GAAI,CAAEC,EAAG,EAAGC,EAAG,IAASJ,GAClCF,EACAC,EACC,kBAACM,GAAA,EAAD,CACEC,aAAW,QACXC,QAASR,EACTG,GAAI,CACFM,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,MAAO,SAAClL,GAAD,OAAWA,EAAMmL,QAAQC,KAAK,QAGvC,kBAAC,KAAD,OAEA,OAgHKgE,GAtGE,SAAChF,GAChB,MAA4CkB,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAaMC,EAAc,WAClBvB,EAAMwB,WAAU,IAiBlB,OACE,6BACE,kBAAC,GAAD,CACEtB,QAASqB,EACTE,kBAAgB,0BAChBC,KAAM1B,EAAM2B,QAEZ,kBAAC,GAAD,CAAsBlI,GAAG,0BAA0ByG,QAASqB,GAA5D,cAGA,kBAACK,GAAA,EAAD,CAAeC,UAAQ,EAACC,MAAO,CAAChD,MAAO,UACrC,kBAAC,KAAD,CAAMiD,WAAS,EAAC3C,UAAU,QACxB,kBAAC,KAAD,CAAMpD,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAD,iBAAiBjC,EAAMkC,iBAAvB,CAA0C9C,UAAU,cAClD,kBAAC,KAAD,CAAY3F,GAAG,eAAf,eACA,kBAAC,KAAD,CACE0I,MAAM,cACN5L,MAAOyJ,EAAM1H,KAAK8J,WAClBC,SAAU,SAAAC,GA/CC,IAACF,EACR,YADQA,EA+CuBE,EAAEC,OAAOhM,QA7CxD6K,GAAkB,GAClBE,EAAgB,MACM,cAAfc,GAEe,UAAfA,IADPhB,GAAkB,GA0C8CpB,EAAMwC,KAAKC,cAAcH,EAAEC,OAAOhM,SAEtF,kBAAC,KAAD,CAAUA,MAAM,UAAhB,UACA,kBAAC,KAAD,CAAUA,MAAM,aAAhB,aACA,kBAAC,KAAD,CAAUA,MAAM,SAAhB,aAKR,oCAEI4K,EACA,kBAAC,KAAD,CAAMY,WAAS,EAAC3C,UAAU,aACxB,kBAAC,KAAD,CAAMpD,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAgBjC,EAAMkC,iBACrB,kBAAC,KAAD,CAAYzI,GAAG,oBAAf,8BACA,kBAAC,KAAD,CACE0I,MAAM,qBACN5L,MAAO8K,EACPgB,SAAU,SAAAC,GAAMhB,EAAgBgB,EAAEC,OAAOhM,SAGvCyJ,EAAM0C,cAAcC,KAAI,SAACtG,EAAS1B,GAAV,OAAgB,kBAAC,KAAD,CAAUpE,MAAO8F,EAAQ5C,GAAI3D,IAAK6E,GAAI0B,EAAQxH,aAM9F,uCAIR,kBAAC+N,GAAA,EAAD,KACE,kBAAC,KAAD,CAAMb,WAAS,GACb,kBAAC,KAAD,CAAM/F,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,CAAQY,WAAS,EAACnC,QAnEH,WACI,WAAxBV,EAAM1H,KAAK8J,YAA0C,KAAjBf,IACvCrB,EAAMwB,WAAU,GAChBxB,EAAM8C,UAAU9C,EAAM1H,KAAK8J,WAAYf,EAAc,cAgE7C,qBAIF,kBAAC,KAAD,CAAMrF,MAAI,EAACgG,GAAI,EAAGC,GAAI,EAAGH,MAAO,CAACiB,UAAW,UAC1C,kBAAC,KAAD,CAAQrC,QAjEA,WACW,WAAxBV,EAAM1H,KAAK8J,YAA0C,KAAjBf,IACvCrB,EAAMwB,WAAU,GAChBxB,EAAMwC,KAAKQ,SAAS3B,MA8DZ,uBCrIR2D,GAAW,SAAC,GAAsC,IAApCxC,EAAmC,EAAnCA,KAAMlK,EAA6B,EAA7BA,KAAM4J,EAAuB,EAAvBA,iBACpBe,EAAoBC,eAApBD,gBACR,EAA4B/B,oBAAS,GAArC,mBAAOS,EAAP,KAAeH,EAAf,KACA,EAA0CN,mBAAS,IAAnD,mBAAOwB,EAAP,KAAsBS,EAAtB,KAiBML,EAAS,uCAAG,WAAMV,EAAYgB,EAASC,GAA3B,eAAA1L,EAAA,6DACR2L,EAAS,CACXhL,EAAKZ,QACLY,EAAK2M,SAAS9G,UACd7F,EAAK2M,SAAS5G,QACd/F,EAAK2M,SAAStL,QACdrB,EAAK2M,SAASvB,qBACdtB,EACAgB,GARU,kBAWJO,GAAqBL,EAAQ,YAAYnH,MAAK,SAAAC,GAC9B,MAAfA,EAAIwH,QACHX,EAAgB,yDAA0D,CAAEI,eAb1E,8GAAH,0DAmBf,OACI,oCACA,kBAACQ,EAAA,EAAD,CAAYR,QAAQ,KAAKS,MAAM,OAAOhC,MAAO,CAACiC,cAAe,YAA7D,UACA,kBAACC,EAAA,EAAD,CAAMjC,WAAS,EAACjC,QAAS,GACrB,oCAEIxH,EAAK4M,gBAAkB,kBAAC,GAAD,MACvB,oCAEI,kBAAClB,EAAA,EAAD,CAAMjC,WAAS,EAACjC,QAAS,GACrB,kBAACkE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,GAClB,kBAACiC,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,aACN5L,MAAO+B,EAAK2M,SAASE,UACrB9C,SAAU,SAAAC,GAAC,OAAIE,EAAK4C,gBAAgB,YAAa9C,EAAEC,OAAOhM,YAGlE,kBAACyN,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,GAClB,kBAACiC,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,WACN5L,MAAO+B,EAAK2M,SAASI,QACrBhD,SAAU,SAAAC,GAAC,OAAIE,EAAK4C,gBAAgB,UAAW9C,EAAEC,OAAOhM,aAKpE,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,UACNiC,WAAS,EACTC,KAAM,EACN9N,MAAO+B,EAAK2M,SAAStL,QACrB0I,SAAU,SAAAC,GAAC,OAAIE,EAAK4C,gBAAgB,UAAW9C,EAAEC,OAAOhM,WAG5D,kBAAC2N,EAAA,EAAD,iBACQhC,EADR,CAEIC,MAAM,yBACNiC,WAAS,EACTC,KAAM,EACN9N,MAAO+B,EAAK2M,SAASvB,qBACrBrB,SAAU,SAAAC,GAAC,OAAIE,EAAK4C,gBAAgB,uBAAwB9C,EAAEC,OAAOhM,aAMjF,kBAACyN,EAAA,EAAD,CAAMjC,WAAS,EAAC3C,UAAU,QACtB,kBAAC4E,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,IACtB,kBAAC+B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,EAAG6B,MAAM,SAC3B,kBAACQ,EAAA,EAAD,CAAQjB,QAAQ,WAAWvC,MAAM,UAAUyD,KAAK,QAAQnF,UAAU,OAAOsB,QAtFlE,sBAAM,sBAAA/I,EAAA,+EAEfyB,GAAqB,CAACC,MAAOmL,GAA0BlM,EAAKZ,WAAWyE,MAAK,SAACC,GAC/E,IAAMqI,EAAarI,EAAI9D,KAAKiB,QAAQ4D,QAAO,SAAClE,GACxC,MAA0B,aAAnBA,EAAOsD,WAEfkI,EAAWjL,OAAS,GACnB2J,EAAiBsB,MAPJ,OAUrBjD,GAAU,GAVW,wGAsFb,cAMZ,kBAAC,GAAD,CACIU,iBAAkBA,EAClBP,OAAQA,EACRe,cAAeA,EACflB,UAAWA,EACXsB,UAAWA,EACXxK,KAAMA,EACNkK,KAAMA,MAMH,SAASkC,GAAqB1E,GACzC,OACI,kBAAC,KAAD,CAAkB2E,SAAU,GACxB,kBAAC,GAAa3E,IC5G1B,IAAMkC,GAAmB,CACrBoD,WAAW,EACXjC,QAAS,WACTkB,KAAM,SACNnF,UAAW,QAwaAmG,GAraF,WACQC,aACjBC,CAASjQ,EAAY,IAErB,IA0UIkQ,EA1UJ,EAA8BxE,mBAAS,oBAAvC,mBAAOxJ,EAAP,KAAgBiO,EAAhB,KACA,EAAoCzE,mBAAS,SAA7C,mBAAO0E,EAAP,KAAmBC,EAAnB,KACA,EAAoC3E,mBAAS,UAA7C,mBAAOkB,EAAP,KAAmBK,EAAnB,KACA,EAA0BvB,oBAAS,GAAnC,mBAAOpJ,EAAP,KAAcgO,EAAd,KACA,EAA0C5E,oBAAS,GAAnD,mBAAO+C,EAAP,KAAsB8B,EAAtB,KACA,EAAwC7E,oBAAS,GAAjD,mBAAO4D,EAAP,KAAqBkB,EAArB,KACA,EAA8C9E,oBAAS,GAAvD,mBAAOgE,EAAP,KAAwBe,EAAxB,KAEMC,EAAa,WAAqC,IAApCC,EAAmC,uDAAxB,GAAIC,EAAoB,uDAAP,GACtCC,EAAOC,KAAOH,GACpB,OAAOE,EAAKE,OAAOH,IAGvB,EAA4BlF,mBAAS,CACjCsC,UAAW,GACXC,UAAW,GACXhI,WAAY,GACZC,WAAY,GACZ/B,QAAS,GACT+J,qBAAsB,KAN1B,mBAAOH,GAAP,KAAeiD,GAAf,KAQA,GAA0BtF,mBAAS,CAC/BvD,SAAU,GACVC,UAAW,GACXjE,QAAS,GACT+J,qBAAsB,KAJ1B,qBAAOmB,GAAP,MAAc4B,GAAd,MAMA,GAAgCvF,mBAAS,CACrCiE,UAAW,GACXE,QAAS,GACT1L,QAAS,GACT+J,qBAAsB,KAJ1B,qBAAOuB,GAAP,MAAiByB,GAAjB,MAQMC,GAAa,uCAAG,WAAOrE,GAAP,yCAAA3K,EAAA,sEACAyB,EAA6BoL,GAA0B9M,IADvD,YACZ0E,EADY,QAEVpE,QAFU,uBAGd8N,GAAS,GAHK,4BAUd1J,EAAI9D,KAHJkL,EAPc,EAOdA,UACAC,EARc,EAQdA,UACAmD,EATc,EASdA,QAGAjN,EAAU,GACd,IACIiN,EAAQ7K,SAAQ,SAAAM,GACS,OAAjBA,EAAQwK,MAA6B,KAAZlN,IACzBA,EAAU0C,EAAQ9F,UAG7B,MAAMiH,IAGP,IAAIsJ,EAAQZ,EAAW1C,EAAU,GAAGjN,MAAO,cAAc,MAAM+L,GAAGwE,EAAQ,GAE1E,IAAIC,EAAQb,EAAWzC,EAAU,GAAGlN,MAAO,cAAc,MAAM+L,GAAGyE,EAAQ,GAxBxD,iBA0BE3N,EAAmBoL,GAA0B9M,IA1B/C,QA0BdsP,EA1Bc,OA6BlB,IAAIC,EAASD,EAAQ1O,KAAK4O,OAAOzL,WAAW,MAAM6G,GAAG2E,EAAS,GAE9D,IAAIE,EAASH,EAAQ1O,KAAK4O,OAAOxL,WAAW,MAAM4G,GAAG6E,EAAS,GA/B5C,OAiCdC,EAAW,GAjCG,oBAmCWhO,EAA2B1B,GAnCtC,eAmCR2P,EAnCQ,OAmCgD/O,KAAK4O,OAC/DI,EAAa,GACjBD,EAAUtL,SAAQ,SAAAwL,GACdD,EAAWrM,KAAK7B,EAAiCmO,OAtCvC,UAwCQnR,QAAQ8E,IAAIoM,GAxCpB,eAyCNvL,SAAQ,SAAAqB,GACZ,IAAMtC,EAAYsC,EAAI9E,KAAK4O,OAC3BE,GAAYtM,EAAY,QA3Cd,mDA6CPsM,EAAW,GA7CJ,QA+ClBZ,GAAU,CACNhD,UAAWsD,EACXrD,UAAWsD,EACXtL,WAAYwL,EACZvL,WAAYyL,EACZxN,QAASA,EACT+J,qBAAsB0D,IArDR,2DAAH,sDAwDbI,GAAY,uCAAG,WAAOlF,GAAP,+BAAA3K,EAAA,sEACCyB,EAA6BoL,GAA0B9M,IADxD,YACX0E,EADW,QAETpE,QAFS,uBAGb8N,GAAS,GAHI,iCAQbc,EACAxK,EAAI9D,KADJsO,QAGAjN,EAAU,GACdiN,EAAQ7K,SAAQ,SAAAM,GACS,OAAjBA,EAAQwK,MAA6B,KAAZlN,IACzBA,EAAU0C,EAAQ9F,UAdT,UAkBO6C,EAAsBoL,GAA0B9M,IAlBvD,wBAkBkEY,KAAK4O,OAAnFO,EAlBY,EAkBZA,IAAKC,EAlBO,EAkBPA,IAENN,EAAW,GApBE,oBAsBYhO,EAA2B1B,GAtBvC,eAsBP2P,EAtBO,OAsBiD/O,KAAK4O,OAC/DI,EAAa,GACjBD,EAAUtL,SAAQ,SAAAwL,GACdD,EAAWrM,KAAK7B,EAAiCmO,OAzBxC,UA2BSnR,QAAQ8E,IAAIoM,GA3BrB,eA4BLvL,SAAQ,SAAAqB,GACZ,IAAMtC,EAAYsC,EAAI9E,KAAK4O,OAC3BE,GAAYtM,EAAY,QA9Bf,mDAgCNsM,EAAW,GAhCL,QAkCjBX,GAAS,CACL9I,SAAU8J,EACV7J,UAAW8J,EACX/N,QAASA,EACT+J,qBAAsB0D,IAtCT,2DAAH,sDAyCZO,GAAe,uCAAG,WAAOrF,GAAP,yBAAA3K,EAAA,sEACFyB,EAA6B1B,GAD3B,YACd0E,EADc,QAEZpE,QAFY,uBAGhB8N,GAAS,GAHO,iCAOhBc,EACAxK,EAAI9D,KADJsO,QAGAjN,EAAU,GACdiN,EAAQ7K,SAAQ,SAAAM,GACS,OAAjBA,EAAQwK,MAA6B,KAAZlN,IACzBA,EAAU0C,EAAQ9F,UAItB6Q,EAAW,GAjBK,oBAmBShO,EAA2B1B,GAnBpC,eAmBV2P,EAnBU,OAmB8C/O,KAAK4O,OAC/DI,EAAa,GACjBD,EAAUtL,SAAQ,SAAAwL,GACdD,EAAWrM,KAAK7B,EAAiCmO,OAtBrC,UAwBMnR,QAAQ8E,IAAIoM,GAxBlB,eAyBRvL,SAAQ,SAAAqB,GACZ,IAAMtC,EAAYsC,EAAI9E,KAAK4O,OAC3BE,GAAYtM,EAAY,QA3BZ,mDA6BTsM,EAAW,GA7BF,QA+BpBV,GAAY,CACRvB,UAAW,GACXE,QAAS,GACT1L,QAASA,EACT+J,qBAAsB0D,IAnCN,2DAAH,sDA2DfpE,GAAQ,uCAAG,WAAOI,GAAP,+BAAAzL,EAAA,yDACK,WAAfyK,EADU,oBAES,WAAfwD,EAFM,wBAGLG,GAAiB,GACX9M,EAAS,CACXvB,QAASA,EACTsC,UAAWuJ,GAAOC,UAClB3J,WAAY0J,GAAO1J,WACnBQ,UAAWkJ,GAAOE,UAClBvJ,WAAYqJ,GAAOrJ,WACnBP,QAAS4J,GAAO5J,QAChBY,SAAUgJ,GAAOG,sBAXhB,kBAcKc,GAA+BvL,GAdpC,OAeD8M,GAAiB,GAfhB,qFAiBe,UAAfH,EAjBA,wBAkBLI,GAAgB,GACV/M,EAAS,CACXvB,QAASA,EACTiG,SAAUkH,GAAMlH,SAChBC,UAAWiH,GAAMjH,UACjBjE,QAASkL,GAAMlL,QACfY,SAAUsK,GAAMnB,sBAxBf,oBA2BKc,GAA8BvL,GA3BnC,mEA6BL+M,GAAgB,GA7BX,2BA8Be,aAAfJ,EA9BA,wBA+BLK,GAAmB,GACbhN,EAAS,CACXvB,QAASA,EACTyG,UAAW8G,GAASE,UACpB9G,QAAS4G,GAASI,QAClB1L,QAASsL,GAAStL,QAClBY,SAAU0K,GAASvB,sBArClB,oBAwCKc,GAAiCvL,GAxCtC,mEA0CLgN,GAAmB,GA1Cd,oCA4CW,cAAf7D,EA5CI,oBA6CS,WAAfwD,EA7CM,wBA8CLG,GAAiB,GACX9M,EAAS,CACXvB,QAASA,EACT6D,QAAS6H,EACTpJ,UAAWuJ,GAAOC,UAClB3J,WAAY0J,GAAO1J,WACnBQ,UAAWkJ,GAAOE,UAClBvJ,WAAYqJ,GAAOrJ,WACnBP,QAAS4J,GAAO5J,QAChBY,SAAUgJ,GAAOG,sBAvDhB,oBA0DKc,GAAkCvL,GA1DvC,QA2DD8M,GAAiB,GA3DhB,sFA6De,UAAfH,EA7DA,wBA8DLI,GAAgB,GACV/M,EAAS,CACXvB,QAASA,EACT6D,QAAS6H,EACTzF,SAAUkH,GAAMlH,SAChBC,UAAWiH,GAAMjH,UACjBjE,QAASkL,GAAMlL,QACfY,SAAUsK,GAAMnB,sBArEf,oBAwEKc,GAAiCvL,GAxEtC,mEA0EL+M,GAAgB,GA1EX,2BA2Ee,aAAfJ,EA3EA,wBA4ELK,GAAmB,GACbhN,EAAS,CACXvB,QAASA,EACT6D,QAAS6H,EACTjF,UAAW8G,GAASE,UACpB9G,QAAS4G,GAASI,QAClB1L,QAASsL,GAAStL,QAClBY,SAAU0K,GAAS1K,UAnFlB,oBAsFKiK,GAAoCvL,GAtFzC,mEAwFLgN,GAAmB,GAxFd,oCA0FW,UAAf7D,EA1FI,qBA2FS,WAAfwD,EA3FM,wBA4FLG,GAAiB,GACX9M,EAAS,CACXvB,QAASA,EACT6D,QAAS6H,EACTpJ,UAAWuJ,GAAOC,UAClB3J,WAAY0J,GAAO1J,WACnBQ,UAAWkJ,GAAOE,UAClBvJ,WAAYqJ,GAAOrJ,WACnBP,QAAS4J,GAAO5J,QAChBY,SAAUgJ,GAAOG,sBArGhB,oBAwGKc,GAA8BvL,GAxGnC,QAyGD8M,GAAiB,GAzGhB,uFA2Ge,UAAfH,EA3GA,yBA4GLI,GAAgB,GACV/M,EAAS,CACXvB,QAASA,EACT6D,QAAS6H,EACTzF,SAAUkH,GAAMlH,SAChBC,UAAWiH,GAAMjH,UACjBjE,QAASkL,GAAMlL,QACfY,SAAUsK,GAAMnB,sBAnHf,qBAsHKc,GAA6BvL,GAtHlC,wEAwHL+M,GAAgB,GAxHX,6BAyHe,aAAfJ,EAzHA,yBA0HLK,GAAmB,GACbhN,EAAS,CACXvB,QAASA,EACT6D,QAAS6H,EACTjF,UAAW8G,GAASE,UACpB9G,QAAS4G,GAASI,QAClB1L,QAASsL,GAAStL,QAClBY,SAAU0K,GAAS1K,UAjIlB,sBAoIKiK,GAAgCvL,GApIrC,yEAsILgN,GAAmB,GAtId,8HAAH,sDA4II,WAAfL,EACCF,EAAa,kBAAC,GAAD,CACGlD,KAAM,CAACQ,YAAUP,gBAAe0B,cAjK9B,SAACrO,EAAKS,GACxBiQ,GAAU,2BACHjD,IADE,kBAEJzN,EAAMS,OA+JK+B,KAAM,CAACZ,UAAS6L,UAAQnB,aAAY6B,iBACpC/B,iBAAkBA,KAEd,UAAf0D,EACLF,EAAa,kBAAC,GAAD,CACGlD,KAAM,CAACQ,YAAUP,gBAAesC,aAjK/B,SAACjP,EAAKS,GACvBkQ,GAAS,2BACF5B,IADC,kBAEH/O,EAAMS,OA+JK+B,KAAM,CAACZ,UAASmN,SAAOzC,aAAY0C,gBACnC5C,iBAAkBA,KAEd,aAAf0D,IACLF,EAAa,kBAAC,GAAD,CACGlD,KAAM,CAACQ,YAAUP,gBAAe2C,gBAjK5B,SAACtP,EAAKS,GAC1BmQ,GAAY,2BACLzB,IADI,kBAENnP,EAAMS,OA+JK+B,KAAM,CAACZ,UAASuN,YAAU7C,aAAY8C,mBACtChD,iBAAkBA,MAItC,IAAM0F,GAAW,SAAAtF,GACb,IACsB,WAAfsD,EACCe,KACoB,UAAff,EACL4B,KACoB,aAAf5B,GACL+B,KAEP,MAAMnK,GAEH,YADAsI,GAAS,KAKjB,OACA,oCACI,kBAAC9B,EAAA,EAAD,CAAMjC,WAAS,EAAC3C,UAAU,YAAYU,QAAS,GAC3C,kBAACkE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,IACtB,kBAAC+B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,EAAG7C,UAAU,QAC/B,kBAACyE,EAAA,EAAD,CAAYR,QAAQ,KAAKjE,UAAU,YAAY0E,MAAM,QAArD,UACA,0BAAM+D,SAAUD,GAAUxI,UAAU,QAChC,kBAAC8E,EAAA,EAAD,CACIoB,WAAS,EACTlG,UAAU,OACViE,QAAQ,WACR9M,MAAOmB,EACP2K,SAAU,SAAAC,GACFxK,GAAOgO,GAAS,GACpBH,EAAWrD,EAAEC,OAAOhM,QAGxB4L,MAAM,iBACNrK,MAAOA,EACPgQ,WAAYhQ,EAAQ,qBAAuB,MAGnD,kBAACiQ,EAAA,EAAgB7F,GACb,kBAAC8F,EAAA,EAAD,CAAYvO,GAAG,cAAf,eACA,kBAACwO,EAAA,EAAD,CACI9F,MAAM,cACN5L,MAAOqP,EACPvD,SAAU,SAAAC,GAAMG,EAAc,UAAWoD,EAAcvD,EAAEC,OAAOhM,SAEhE,kBAAC2R,EAAA,EAAD,CAAU3R,MAAM,UAAhB,UACA,kBAAC2R,EAAA,EAAD,CAAU3R,MAAM,SAAhB,SACA,kBAAC2R,EAAA,EAAD,CAAU3R,MAAM,YAAhB,cAGR,kBAACyN,EAAA,EAAD,CAAMjC,WAAS,EAAC+B,MAAM,SAClB,kBAACE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACnB,kBAACqC,EAAA,EAAD,CAAQjB,QAAQ,WAAWvC,MAAM,UAAUyD,KAAK,QAAQ7D,QAASkH,IAAjE,SAMZ,kBAAC5D,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACjByD,GAEL,kBAAC1B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,O,kGC5a5BvC,GAAkBC,aAAOC,KAAPD,EAAe,gBAAG/J,EAAH,EAAGA,MAAH,MAAgB,CACrD,2BAA4B,CAC1BiK,QAASjK,EAAMkK,QAAQ,IAEzB,2BAA4B,CAC1BD,QAASjK,EAAMkK,QAAQ,QAIrBC,GAAuB,SAACC,GAC5B,IAAQC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,QAAYC,EAA9B,aAAwCH,EAAxC,IAEA,OACE,kBAACI,GAAA,EAAD,eAAaC,GAAI,CAAEC,EAAG,EAAGC,EAAG,IAASJ,GAClCF,EACAC,EACC,kBAACM,GAAA,EAAD,CACEC,aAAW,QACXC,QAASR,EACTG,GAAI,CACFM,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,MAAO,SAAClL,GAAD,OAAWA,EAAMmL,QAAQC,KAAK,QAGvC,kBAAC,KAAD,OAEA,OAwIKC,GA9HA,SAACjB,GACd,MAAkCkB,mBAAS,IAA3C,mBAAOlH,EAAP,KAAkBmO,EAAlB,KACA,EAAkCjH,mBAAS,IAA3C,mBAAO7G,EAAP,KAAkB+N,EAAlB,KACA,EAAoClH,mBAAS,IAA7C,mBAAOrH,EAAP,KAAmBwO,EAAnB,KACA,EAAoCnH,mBAAS,IAA7C,mBAAOhH,EAAP,KAAmBoO,EAAnB,KACA,EAA8BpH,mBAAS,IAAvC,mBAAOvH,EAAP,KAAgB4O,EAAhB,KACA,EAAgCrH,mBAAS,IAAzC,mBAAO3G,EAAP,KAAiBiO,EAAjB,KACA,EAAoBtH,mBAAS,MAA7B,mBAAOzH,EAAP,KAAWgP,EAAX,KACA,EAA0BvH,mBAAS,MAAnC,mBAAOwH,EAAP,KAAcC,EAAd,KAEMpH,EAAc,WAClBvB,EAAM4I,UAAS,IAGX9F,EAAS,uCAAG,4BAAAnL,EAAA,6DAChBqI,EAAM4I,UAAS,GACTC,EAAc,CAClB,MAASH,EACT,UAAa1O,EACb,UAAaK,EACb,WAAcR,EACd,WAAcK,EACd,QAAWP,EACX,SAAYY,GAEdyF,EAAM8I,YAAYrP,EAAIoP,GAXN,SAYVlF,GAAuBkF,EAAa,UAZ1B,2CAAH,qDA4Bf,OAbAE,qBAAU,WACiB,OAAtB/I,EAAMgJ,cACPb,EAAanI,EAAMgJ,YAAYhP,WAC/BoO,EAAapI,EAAMgJ,YAAY3O,WAC/BgO,EAAcrI,EAAMgJ,YAAYnP,YAChCyO,EAActI,EAAMgJ,YAAY9O,YAChCqO,EAAWvI,EAAMgJ,YAAYrP,SAC7B6O,EAAYxI,EAAMgJ,YAAYzO,UAC9BkO,EAAMzI,EAAMgJ,YAAYvP,IACxBkP,EAAS3I,EAAMgJ,YAAYN,UAE5B,CAAC1I,EAAMgJ,cAGR,6BACE,kBAAC,GAAD,CACE9I,QAASqB,EACTE,kBAAgB,0BAChBC,KAAM1B,EAAM2B,QAEZ,kBAAC,GAAD,CAAsBlI,GAAG,0BAA0ByG,QAASqB,GAA5D,eAGA,kBAACK,GAAA,EAAD,CAAeC,UAAQ,GACrB,kBAAC,KAAD,CAAME,WAAS,EAAC3C,UAAU,aACxB,kBAAC,KAAD,CAAM2C,WAAS,EAACjC,QAAS,GACvB,kBAAC,KAAD,CAAM9D,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,aACN5L,MAAOyD,EACPqI,SAAU,SAAAC,GACR6F,EAAa7F,EAAEC,OAAOhM,YAI5B,kBAAC,KAAD,CAAMyF,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,aACN5L,MAAO8D,EACPgI,SAAU,SAAAC,GACR8F,EAAa9F,EAAEC,OAAOhM,aAK9B,kBAAC,KAAD,CAAMyF,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,cACN5L,MAAOsD,EACPwI,SAAU,SAAAC,GACR+F,EAAc/F,EAAEC,OAAOhM,WAG3B,kBAAC,KAAD,iBACMyJ,EAAMkC,iBADZ,CAEEC,MAAM,cACN5L,MAAO2D,EACPmI,SAAU,SAAAC,GACRgG,EAAchG,EAAEC,OAAOhM,WAG3B,kBAAC,KAAD,iBACMyJ,EAAMkC,iBADZ,CAEEC,MAAM,UACNiC,WAAS,EACTC,KAAM,EACN9N,MAAOoD,EACP0I,SAAU,SAAAC,GACRiG,EAAWjG,EAAEC,OAAOhM,WAGxB,kBAAC,KAAD,iBACMyJ,EAAMkC,iBADZ,CAEEC,MAAM,yBACNiC,WAAS,EACTC,KAAM,EACN9N,MAAOgE,EACP8H,SAAU,SAAAC,GACRkG,EAAYlG,EAAEC,OAAOhM,cAM/B,kBAACqM,GAAA,EAAD,KACE,kBAAC,KAAD,CAAQC,WAAS,EAACnC,QAASoC,GAA3B,oBCsBK7B,GAjLA,WACIuE,aACjBC,CAASjQ,EAAY,IAErB,IAOA,EAAwB0L,mBAAS,IAAjC,mBAAOmD,EAAP,KAAa4E,EAAb,KACA,EAA0B/H,oBAAS,GAAnC,mBAAOgI,EAAP,KAAcN,EAAd,KACA,EAAsC1H,mBAAS,MAA/C,mBAAO8H,EAAP,KAAoBG,EAApB,KAEMC,EAAS,uCAAG,4BAAAzR,EAAA,sEAEdyD,QAAQC,IAAIgJ,GACNgF,EAAkB,GACxBhF,EAAKtI,SAAQ,SAAAuN,GACW,WAAnBA,EAAIC,WACLF,EAAgBpO,KAAKuJ,GAA+B8E,IAC1B,cAAnBA,EAAIC,WACXF,EAAgBpO,KAAKuJ,GAAkC8E,IAC7B,UAAnBA,EAAIC,YACXF,EAAgBpO,KAAKuJ,GAA8B8E,OAVzC,SAaRlT,QAAQ8E,IAAImO,GAbJ,OAcdjO,QAAQC,IAAI,aAdE,mIAAH,qDAiCTmO,EAAa,uCAAG,sBAAA7R,EAAA,+EAEUgM,GAAkB,UAF5B,cAEuCrL,KAAKmR,QACjD1N,SAAQ,SAACM,EAASqN,GAC7BT,GAAQ,SAACU,GAAD,6BAAcA,GAAd,CAAoB,CAC1BlQ,GAAIiQ,EAAQ,EACZhS,QAAS2E,EAAQ3E,QACjBmC,WAAYwC,EAAQxC,WACpBK,WAAYmC,EAAQnC,WACpBF,UAAWqC,EAAQrC,UACnBK,UAAWgC,EAAQhC,UACnBV,QAAS0C,EAAQ1C,QACjBY,SAAU8B,EAAQ9B,SAClBgP,WAAYlN,EAAQkN,WACpBhO,QAASc,EAAQd,QACjBmN,MAAOrM,EAAQ5C,YAfD,uGAAH,qDAqBbmQ,EAAU,CACd,CAAEC,MAAO,KAAMC,WAAY,KAAMC,KAAM,EAAGC,UAAU,EAClDC,WAAY,SAAC3G,GACX,OACE,yBAAKxB,MAAO,CAACoI,WAAY,SACtB5G,EAAOgG,IAAI7P,MAKpB,CACEoQ,MAAO,aACPC,WAAY,cACZC,KAAM,EACNE,WAAY,SAAC3G,GACX,IAAIiG,EAQJ,MAP6B,WAA1BjG,EAAOgG,IAAIC,WACZA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,SAASoC,KAAK,UACN,cAA1BjB,EAAOgG,IAAIC,WAClBA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,YAAYoC,KAAK,UACT,UAA1BjB,EAAOgG,IAAIC,aAClBA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,QAAQoC,KAAK,WAGtC,oCACCgF,KAKP,CAAEM,MAAO,UAAWC,WAAY,UAAWC,KAAM,GACjD,CAAEF,MAAO,aAAcC,WAAY,cAAeC,KAAM,GACxD,CAAEF,MAAO,aAAcC,WAAY,cAAeC,KAAM,GACxD,CAAEF,MAAO,YAAaC,WAAY,aAAcC,KAAM,EAAG7N,KAAM,QAC/D,CAAE2N,MAAO,YAAaC,WAAY,aAAcC,KAAM,EAAG7N,KAAM,QAC/D,CACE2N,MAAO,SACPC,WAAY,SACZE,UAAU,EACVD,KAAM,EACNK,2BAA2B,EAC3BH,WAAY,SAAC3G,GAEX,IAAM+G,EAAM,uCAAG,sBAAA1S,EAAA,sDACbwR,EAAe7F,EAAOgG,KACtBV,GAAS,GAFI,2CAAH,qDAKN0B,EAAQ,uCAAG,sBAAA3S,EAAA,sEACTgM,GAAyBL,EAAOgG,IAAIZ,MAAO,UADlC,OAEfO,GAAQ,SAACU,GACP,IAAMY,EAAG,aAAOZ,GAEhB,OADAY,EAAIC,OAAOb,EAAKc,WAAU,SAAAzO,GAAI,OAAIA,EAAK0M,QAAUpF,EAAOgG,IAAIZ,SAAQ,GAC7D6B,KALM,2CAAH,qDASd,OACE,oCACE,kBAACjG,EAAA,EAAD,CAAQ5D,QAAS2J,GACf,kBAAC,KAAD,CAAUvI,MAAO,CAAC4I,SAAU,SAE9B,kBAACpG,EAAA,EAAD,CAAQ5D,QAAS4J,GACf,kBAAC,KAAD,CAAYxI,MAAO,CAAC4I,SAAU,aAY1C,OAJA3B,qBAAU,WACRS,MACC,IAGD,oCACA,kBAACxF,EAAA,EAAD,CAAMjC,WAAS,EAAC3C,UAAU,YAAYU,QAAS,GAC7C,kBAACkE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,IACtB,kBAAC+B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,yBAAK7C,UAAU,OAAO0C,MAAO,CAAE6I,OAAQ,IAAK7L,MAAO,OAAQiE,UAAW,WACpE,kBAAC,KAAD,CACEsB,KAAMA,EACNuF,QAASA,EACTgB,SAAU,GACVC,mBAAoB,CAAC,IACrBC,gBAAiB,WAAO,OAAO,MAGnC,kBAAC9G,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,GAAIC,GAAI,GAAI6B,MAAM,SAC/B,kBAACQ,EAAA,EAAD,CAAQjB,QAAQ,WAAWvC,MAAM,UAAUyD,KAAK,QAAQ7D,QAAS0I,GAAjE,mBAKJ,kBAACpF,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,KAExB,kBAAC,GAAD,CACEN,OAAQuH,EACRhH,iBApKqB,CACvBoD,WAAW,EACXjC,QAAS,WACTkB,KAAM,SACNnF,UAAW,QAiKT4J,YAAaA,EACbJ,SAAUA,EACVE,YAxIgB,SAACY,EAAOpR,GAC1B2Q,GAAQ,SAACU,GACP,IAAMY,EAAG,aAAOZ,GAOhB,OANAY,EAAIb,EAAQ,GAAG1P,UAAY1B,EAAK0B,UAChCuQ,EAAIb,EAAQ,GAAGrP,UAAY/B,EAAK+B,UAChCkQ,EAAIb,EAAQ,GAAG7P,WAAavB,EAAKuB,WACjC0Q,EAAIb,EAAQ,GAAGxP,WAAa5B,EAAK4B,WACjCqQ,EAAIb,EAAQ,GAAG/P,QAAUrB,EAAKqB,QAC9B4Q,EAAIb,EAAQ,GAAGnP,SAAWjC,EAAKiC,SACxBgQ,U,0BC5CP7K,GAAkBC,aAAOC,KAAPD,EAAe,gBAAG/J,EAAH,EAAGA,MAAH,MAAgB,CACrD,2BAA4B,CAC1BiK,QAASjK,EAAMkK,QAAQ,IAEzB,2BAA4B,CAC1BD,QAASjK,EAAMkK,QAAQ,QAIrBC,GAAuB,SAACC,GAC5B,IAAQC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,QAAYC,EAA9B,aAAwCH,EAAxC,IAEA,OACE,kBAACI,GAAA,EAAD,eAAaC,GAAI,CAAEC,EAAG,EAAGC,EAAG,IAASJ,GAClCF,EACAC,EACC,kBAACM,GAAA,EAAD,CACEC,aAAW,QACXC,QAASR,EACTG,GAAI,CACFM,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,MAAO,SAAClL,GAAD,OAAWA,EAAMmL,QAAQC,KAAK,QAGvC,kBAAC,KAAD,OAEA,OAkHK4D,GAxGD,SAAC5E,GACb,MAAgCkB,mBAAS,IAAzC,mBAAOvD,EAAP,KAAiBoN,EAAjB,KACA,EAAkC7J,mBAAS,IAA3C,mBAAOtD,EAAP,KAAkBoN,EAAlB,KACA,EAA8B9J,mBAAS,IAAvC,mBAAOvH,EAAP,KAAgB4O,EAAhB,KACA,EAAgCrH,mBAAS,IAAzC,mBAAO3G,EAAP,KAAiBiO,EAAjB,KACA,EAAoBtH,mBAAS,MAA7B,mBAAOzH,EAAP,KAAWgP,EAAX,KACA,EAA0BvH,mBAAS,MAAnC,mBAAOwH,EAAP,KAAcC,EAAd,KAEMpH,EAAc,WAClBvB,EAAM4I,UAAS,IAGX9F,EAAS,uCAAG,4BAAAnL,EAAA,6DAChBqI,EAAM4I,UAAS,GACTC,EAAc,CAClB,MAASH,EACT,SAAY/K,EACZ,UAAaC,EACb,QAAWjE,EACX,SAAYY,GAEdyF,EAAM8I,YAAYrP,EAAIoP,GATN,SAUVlF,GAAuBkF,EAAa,SAV1B,2CAAH,qDAwBf,OAXAE,qBAAU,WACiB,OAAtB/I,EAAMgJ,cACP+B,EAAY/K,EAAMgJ,YAAYrL,UAC9BqN,EAAahL,EAAMgJ,YAAYpL,WAC/B2K,EAAWvI,EAAMgJ,YAAYrP,SAC7B6O,EAAYxI,EAAMgJ,YAAYzO,UAC9BkO,EAAMzI,EAAMgJ,YAAYvP,IACxBkP,EAAS3I,EAAMgJ,YAAYN,UAE5B,CAAC1I,EAAMgJ,cAGR,6BACE,kBAAC,GAAD,CACE9I,QAASqB,EACTE,kBAAgB,0BAChBC,KAAM1B,EAAM2B,QAEZ,kBAAC,GAAD,CAAsBlI,GAAG,0BAA0ByG,QAASqB,GAA5D,eAGA,kBAACK,GAAA,EAAD,CAAeC,UAAQ,GACrB,kBAAC,KAAD,CAAME,WAAS,EAAC3C,UAAU,aACxB,kBAAC,KAAD,CAAM2C,WAAS,EAACjC,QAAS,GACvB,kBAAC,KAAD,CAAM9D,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,WACN5L,MAAOoH,EACP0E,SAAU,SAAAC,GACRyI,EAAYzI,EAAEC,OAAOhM,YAI3B,kBAAC,KAAD,CAAMyF,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,YACN5L,MAAOqH,EACPyE,SAAU,SAAAC,GACR0I,EAAa1I,EAAEC,OAAOhM,aAK9B,kBAAC,KAAD,CAAMyF,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,UACNiC,WAAS,EACTC,KAAM,EACN9N,MAAOoD,EACP0I,SAAU,SAAAC,GACRiG,EAAWjG,EAAEC,OAAOhM,WAGxB,kBAAC,KAAD,iBACMyJ,EAAMkC,iBADZ,CAEEC,MAAM,yBACNiC,WAAS,EACTC,KAAM,EACN9N,MAAOgE,EACP8H,SAAU,SAAAC,GACRkG,EAAYlG,EAAEC,OAAOhM,cAM/B,kBAACqM,GAAA,EAAD,KACE,kBAAC,KAAD,CAAQC,WAAS,EAACnC,QAASoC,GAA3B,oBCsCK8B,GA5KD,WACKY,aACjBC,CAASjQ,EAAY,IAErB,IAOA,EAAwB0L,mBAAS,IAAjC,mBAAOmD,EAAP,KAAa4E,EAAb,KACA,EAA0B/H,oBAAS,GAAnC,mBAAOgI,EAAP,KAAcN,EAAd,KACA,EAAsC1H,mBAAS,MAA/C,mBAAO8H,EAAP,KAAoBG,EAApB,KAEMC,EAAS,uCAAG,4BAAAzR,EAAA,sEAEdyD,QAAQC,IAAIgJ,GACNgF,EAAkB,GACxBhF,EAAKtI,SAAQ,SAAAuN,GACW,WAAnBA,EAAIC,WACLF,EAAgBpO,KAAKuJ,GAA8B8E,IACzB,cAAnBA,EAAIC,WACXF,EAAgBpO,KAAKuJ,GAAiC8E,IAC5B,UAAnBA,EAAIC,YACXF,EAAgBpO,KAAKuJ,GAA6B8E,OAVxC,SAaRlT,QAAQ8E,IAAImO,GAbJ,OAcdjO,QAAQC,IAAI,aAdE,mIAAH,qDA+BTmO,EAAa,uCAAG,sBAAA7R,EAAA,+EAEUgM,GAAkB,SAF5B,cAEsCrL,KAAKmR,QAChD1N,SAAQ,SAACM,EAASqN,GAC7BT,GAAQ,SAACU,GAAD,6BAAcA,GAAd,CAAoB,CAC1BlQ,GAAIiQ,EAAQ,EACZhS,QAAS2E,EAAQ3E,QACjBiG,SAAUtB,EAAQsB,SAClBC,UAAWvB,EAAQuB,UACnBjE,QAAS0C,EAAQ1C,QACjBY,SAAU8B,EAAQ9B,SAClBgP,WAAYlN,EAAQkN,WACpBhO,QAASc,EAAQd,QACjBmN,MAAOrM,EAAQ5C,YAbD,uGAAH,qDAmBbmQ,EAAU,CACd,CAAEC,MAAO,KAAMC,WAAY,KAAMC,KAAM,EAAGC,UAAU,EAClDC,WAAY,SAAC3G,GACX,OACE,yBAAKxB,MAAO,CAACoI,WAAY,SACtB5G,EAAOgG,IAAI7P,MAKpB,CACEoQ,MAAO,aACPC,WAAY,cACZC,KAAM,EACNE,WAAY,SAAC3G,GACX,IAAIiG,EAQJ,MAP6B,WAA1BjG,EAAOgG,IAAIC,WACZA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,SAASoC,KAAK,UACN,cAA1BjB,EAAOgG,IAAIC,WAClBA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,YAAYoC,KAAK,UACT,UAA1BjB,EAAOgG,IAAIC,aAClBA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,QAAQoC,KAAK,WAGtC,oCACCgF,KAMP,CAAEM,MAAO,UAAWC,WAAY,UAAWC,KAAM,GACjD,CAAEF,MAAO,WAAYC,WAAY,WAAYC,KAAM,GACnD,CAAEF,MAAO,YAAaC,WAAY,YAAaC,KAAM,GACrD,CACEF,MAAO,SACPC,WAAY,SACZE,UAAU,EACVD,KAAM,EACNK,2BAA2B,EAC3BH,WAAY,SAAC3G,GAEX,IAAM+G,EAAM,uCAAG,sBAAA1S,EAAA,sDACbwR,EAAe7F,EAAOgG,KACtBV,GAAS,GAFI,2CAAH,qDAKN0B,EAAQ,uCAAG,sBAAA3S,EAAA,sEACTgM,GAAyBL,EAAOgG,IAAIZ,MAAO,SADlC,OAEfO,GAAQ,SAACU,GACP,IAAMY,EAAG,aAAOZ,GAEhB,OADAY,EAAIC,OAAOb,EAAKc,WAAU,SAAAzO,GAAI,OAAIA,EAAK0M,QAAUpF,EAAOgG,IAAIZ,SAAQ,GAC7D6B,KALM,2CAAH,qDASd,OACE,oCACE,kBAACjG,EAAA,EAAD,CAAQ5D,QAAS2J,GACf,kBAAC,KAAD,CAAUvI,MAAO,CAAC4I,SAAU,SAE9B,kBAACpG,EAAA,EAAD,CAAQ5D,QAAS4J,GACf,kBAAC,KAAD,CAAYxI,MAAO,CAAC4I,SAAU,aAY1C,OAJA3B,qBAAU,WACRS,MACC,IAGD,oCACA,kBAACxF,EAAA,EAAD,CAAMjC,WAAS,EAAC3C,UAAU,YAAYU,QAAS,GAC7C,kBAACkE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,IACtB,kBAAC+B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,yBAAK7C,UAAU,OAAO0C,MAAO,CAAE6I,OAAQ,IAAK7L,MAAO,OAAQiE,UAAW,WACpE,kBAAC,KAAD,CACEsB,KAAMA,EACNuF,QAASA,EACTgB,SAAU,GACVC,mBAAoB,CAAC,IACrBC,gBAAiB,WAAO,OAAO,MAGnC,kBAAC9G,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,GAAIC,GAAI,GAAI6B,MAAM,SAC/B,kBAACQ,EAAA,EAAD,CAAQjB,QAAQ,WAAWvC,MAAM,UAAUyD,KAAK,QAAQ7D,QAAS0I,GAAjE,mBAKJ,kBAACpF,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,KAExB,kBAAC,GAAD,CACEN,OAAQuH,EACRhH,iBA/JqB,CACvBoD,WAAW,EACXjC,QAAS,WACTkB,KAAM,SACNnF,UAAW,QA4JT4J,YAAaA,EACbJ,SAAUA,EACVE,YAnIgB,SAACY,EAAOpR,GAC1B2Q,GAAQ,SAACU,GACP,IAAMY,EAAG,aAAOZ,GAKhB,OAJAY,EAAIb,EAAQ,GAAG/L,SAAWrF,EAAKqF,SAC/B4M,EAAIb,EAAQ,GAAG9L,UAAYtF,EAAKsF,UAChC2M,EAAIb,EAAQ,GAAG/P,QAAUrB,EAAKqB,QAC9B4Q,EAAIb,EAAQ,GAAGnP,SAAWjC,EAAKiC,SACxBgQ,U,0BCzCP7K,GAAkBC,aAAOC,KAAPD,EAAe,gBAAG/J,EAAH,EAAGA,MAAH,MAAgB,CACrD,2BAA4B,CAC1BiK,QAASjK,EAAMkK,QAAQ,IAEzB,2BAA4B,CAC1BD,QAASjK,EAAMkK,QAAQ,QAIrBC,GAAuB,SAACC,GAC5B,IAAQC,EAAgCD,EAAhCC,SAAUC,EAAsBF,EAAtBE,QAAYC,EAA9B,aAAwCH,EAAxC,IAEA,OACE,kBAACI,GAAA,EAAD,eAAaC,GAAI,CAAEC,EAAG,EAAGC,EAAG,IAASJ,GAClCF,EACAC,EACC,kBAACM,GAAA,EAAD,CACEC,aAAW,QACXC,QAASR,EACTG,GAAI,CACFM,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,MAAO,SAAClL,GAAD,OAAWA,EAAMmL,QAAQC,KAAK,QAGvC,kBAAC,KAAD,OAEA,OAkHKC,GAxGA,SAACjB,GACd,MAAkCkB,mBAAS,IAA3C,mBAAO/C,EAAP,KAAkB8M,EAAlB,KACA,EAA8B/J,mBAAS,IAAvC,mBAAO7C,EAAP,KAAgB6M,EAAhB,KACA,EAA8BhK,mBAAS,IAAvC,mBAAOvH,EAAP,KAAgB4O,EAAhB,KACA,EAAgCrH,mBAAS,IAAzC,mBAAO3G,EAAP,KAAiBiO,EAAjB,KACA,EAAoBtH,mBAAS,MAA7B,mBAAOzH,EAAP,KAAWgP,EAAX,KACA,EAA0BvH,mBAAS,MAAnC,mBAAOwH,EAAP,KAAcC,EAAd,KAEMpH,EAAc,WAClBvB,EAAM4I,UAAS,IAGX9F,EAAS,uCAAG,4BAAAnL,EAAA,6DAChBqI,EAAM4I,UAAS,GACTC,EAAc,CAClB,MAASH,EACT,UAAavK,EACb,QAAWE,EACX,QAAW1E,EACX,SAAYY,GAEdyF,EAAM8I,YAAYrP,EAAIoP,GATN,SAUVlF,GAAuBkF,EAAa,YAV1B,2CAAH,qDAwBf,OAXAE,qBAAU,WACiB,OAAtB/I,EAAMgJ,cACPiC,EAAajL,EAAMgJ,YAAY7K,WAC/B+M,EAAWlL,EAAMgJ,YAAY3K,SAC7BkK,EAAWvI,EAAMgJ,YAAYrP,SAC7B6O,EAAYxI,EAAMgJ,YAAYzO,UAC9BkO,EAAMzI,EAAMgJ,YAAYvP,IACxBkP,EAAS3I,EAAMgJ,YAAYN,UAE5B,CAAC1I,EAAMgJ,cAGR,6BACE,kBAAC,GAAD,CACE9I,QAASqB,EACTE,kBAAgB,0BAChBC,KAAM1B,EAAM2B,QAEZ,kBAAC,GAAD,CAAsBlI,GAAG,0BAA0ByG,QAASqB,GAA5D,eAGA,kBAACK,GAAA,EAAD,CAAeC,UAAQ,GACrB,kBAAC,KAAD,CAAME,WAAS,EAAC3C,UAAU,aACxB,kBAAC,KAAD,CAAM2C,WAAS,EAACjC,QAAS,GACvB,kBAAC,KAAD,CAAM9D,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,aACN5L,MAAO4H,EACPkE,SAAU,SAAAC,GACR2I,EAAa3I,EAAEC,OAAOhM,YAI5B,kBAAC,KAAD,CAAMyF,MAAI,EAACgG,GAAI,EAAGC,GAAI,GACpB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,WACN5L,MAAO8H,EACPgE,SAAU,SAAAC,GACR4I,EAAW5I,EAAEC,OAAOhM,aAK5B,kBAAC,KAAD,CAAMyF,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,kBAAC,KAAD,iBACMjC,EAAMkC,iBADZ,CAEEC,MAAM,UACNiC,WAAS,EACTC,KAAM,EACN9N,MAAOoD,EACP0I,SAAU,SAAAC,GACRiG,EAAWjG,EAAEC,OAAOhM,WAGxB,kBAAC,KAAD,iBACMyJ,EAAMkC,iBADZ,CAEEC,MAAM,yBACNiC,WAAS,EACTC,KAAM,EACN9N,MAAOgE,EACP8H,SAAU,SAAAC,GACRkG,EAAYlG,EAAEC,OAAOhM,cAM/B,kBAACqM,GAAA,EAAD,KACE,kBAAC,KAAD,CAAQC,WAAS,EAACnC,QAASoC,GAA3B,oBCqCKkC,GA3KE,WACEQ,aACjBC,CAASjQ,EAAY,IAErB,IAOA,EAAwB0L,mBAAS,IAAjC,mBAAOmD,EAAP,KAAa4E,EAAb,KACA,EAA0B/H,oBAAS,GAAnC,mBAAOgI,EAAP,KAAcN,EAAd,KACA,EAAsC1H,mBAAS,MAA/C,mBAAO8H,EAAP,KAAoBG,EAApB,KAEMC,EAAS,uCAAG,4BAAAzR,EAAA,sEAEdyD,QAAQC,IAAIgJ,GACNgF,EAAkB,GACxBhF,EAAKtI,SAAQ,SAAAuN,GACW,WAAnBA,EAAIC,WACLF,EAAgBpO,KAAKuJ,GAAiC8E,IAC5B,cAAnBA,EAAIC,WACXF,EAAgBpO,KAAKuJ,GAAoC8E,IAC/B,UAAnBA,EAAIC,YACXF,EAAgBpO,KAAKuJ,GAAgC8E,OAV3C,SAaRlT,QAAQ8E,IAAImO,GAbJ,OAcdjO,QAAQC,IAAI,aAdE,mIAAH,qDA+BTmO,EAAa,uCAAG,sBAAA7R,EAAA,+EAEUgM,GAAkB,YAF5B,cAEyCrL,KAAKmR,QACnD1N,SAAQ,SAACM,EAASqN,GAC7BT,GAAQ,SAACU,GAAD,6BAAcA,GAAd,CAAoB,CAC1BlQ,GAAIiQ,EAAQ,EACZhS,QAAS2E,EAAQ3E,QACjByG,UAAW9B,EAAQ8B,UACnBE,QAAShC,EAAQgC,QACjB1E,QAAS0C,EAAQ1C,QACjBY,SAAU8B,EAAQ9B,SAClBgP,WAAYlN,EAAQkN,WACpBhO,QAASc,EAAQd,QACjBmN,MAAOrM,EAAQ5C,YAbD,uGAAH,qDAmBbmQ,EAAU,CACd,CAAEC,MAAO,KAAMC,WAAY,KAAMC,KAAM,EAAGC,UAAU,EAClDC,WAAY,SAAC3G,GACX,OACE,yBAAKxB,MAAO,CAACoI,WAAY,SACtB5G,EAAOgG,IAAI7P,MAKpB,CACEoQ,MAAO,aACPC,WAAY,cACZC,KAAM,EACNE,WAAY,SAAC3G,GACX,IAAIiG,EAQJ,MAP6B,WAA1BjG,EAAOgG,IAAIC,WACZA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,SAASoC,KAAK,UACN,cAA1BjB,EAAOgG,IAAIC,WAClBA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,YAAYoC,KAAK,UACT,UAA1BjB,EAAOgG,IAAIC,aAClBA,EAAa,kBAACY,GAAA,EAAD,CAAMhI,MAAM,QAAQoC,KAAK,WAGtC,oCACCgF,KAKP,CAAEM,MAAO,UAAWC,WAAY,UAAWC,KAAM,GACjD,CAAEF,MAAO,YAAaC,WAAY,aAAcC,KAAM,EAAG7N,KAAM,QAC/D,CAAE2N,MAAO,UAAWC,WAAY,WAAYC,KAAM,EAAG7N,KAAM,QAC3D,CACE2N,MAAO,SACPC,WAAY,SACZE,UAAU,EACVD,KAAM,EACNK,2BAA2B,EAC3BH,WAAY,SAAC3G,GAEX,IAAM+G,EAAM,uCAAG,sBAAA1S,EAAA,sDACbwR,EAAe7F,EAAOgG,KACtBV,GAAS,GAFI,2CAAH,qDAKN0B,EAAQ,uCAAG,sBAAA3S,EAAA,sEACTgM,GAAyBL,EAAOgG,IAAIZ,MAAO,YADlC,OAEfO,GAAQ,SAACU,GACP,IAAMY,EAAG,aAAOZ,GAEhB,OADAY,EAAIC,OAAOb,EAAKc,WAAU,SAAAzO,GAAI,OAAIA,EAAK0M,QAAUpF,EAAOgG,IAAIZ,SAAQ,GAC7D6B,KALM,2CAAH,qDASd,OACE,oCACE,kBAACjG,EAAA,EAAD,CAAQ5D,QAAS2J,GACf,kBAAC,KAAD,CAAUvI,MAAO,CAAC4I,SAAU,SAE9B,kBAACpG,EAAA,EAAD,CAAQ5D,QAAS4J,GACf,kBAAC,KAAD,CAAYxI,MAAO,CAAC4I,SAAU,aAY1C,OAJA3B,qBAAU,WACRS,MACC,IAGD,oCACA,kBAACxF,EAAA,EAAD,CAAMjC,WAAS,EAAC3C,UAAU,YAAYU,QAAS,GAC7C,kBAACkE,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,IACtB,kBAAC+B,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,GAAIC,GAAI,IACrB,yBAAK7C,UAAU,OAAO0C,MAAO,CAAE6I,OAAQ,IAAK7L,MAAO,OAAQiE,UAAW,WACpE,kBAAC,KAAD,CACEsB,KAAMA,EACNuF,QAASA,EACTgB,SAAU,GACVC,mBAAoB,CAAC,IACrBC,gBAAiB,WAAO,OAAO,MAGnC,kBAAC9G,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,GAAIC,GAAI,GAAI6B,MAAM,SAC/B,kBAACQ,EAAA,EAAD,CAAQjB,QAAQ,WAAWvC,MAAM,UAAUyD,KAAK,QAAQ7D,QAAS0I,GAAjE,mBAKJ,kBAACpF,EAAA,EAAD,CAAMhI,MAAI,EAACgG,GAAI,EAAGC,GAAI,KAExB,kBAAC,GAAD,CACEN,OAAQuH,EACRhH,iBA9JqB,CACvBoD,WAAW,EACXjC,QAAS,WACTkB,KAAM,SACNnF,UAAW,QA2JT4J,YAAaA,EACbJ,SAAUA,EACVE,YAlIgB,SAACY,EAAOpR,GAC1B2Q,GAAQ,SAACU,GACP,IAAMY,EAAG,aAAOZ,GAKhB,OAJAY,EAAIb,EAAQ,GAAGvL,UAAY7F,EAAK6F,UAChCoM,EAAIb,EAAQ,GAAGrL,QAAU/F,EAAK+F,QAC9BkM,EAAIb,EAAQ,GAAG/P,QAAUrB,EAAKqB,QAC9B4Q,EAAIb,EAAQ,GAAGnP,SAAWjC,EAAKiC,SACxBgQ,U,uNC9BP7L,GAAYC,aAAW,SAAA/I,GAAK,MAAK,CACrCuV,KAAM,CACJC,eAAgB,OAChBtK,MAAO,eAqHIuK,GA9GI,SAACrL,GAClB,MAAwBkB,oBAAS,GAAjC,mBAAOQ,EAAP,KAAa4J,EAAb,KACMnM,EAAUT,KAMV+G,EAAWD,cACX+F,EAAsB,SAACC,EAAO9B,GAClCjE,EAASjQ,EAAYkU,KAGfnU,EAAakW,YAAYhW,GAAzBF,SAER,OACE,kBAACmW,GAAA,EAAD,CAAKrL,GAAI,CAAExB,QAAS,SAClB,kBAAC8M,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CACEjL,SAAS,QACTN,GAAI,CAAEwL,OAAQ,SAACjW,GAAD,OAAWA,EAAMiW,OAAOC,OAAS,IAC/ChK,MAAO,CACLiK,UAAW,wGACXC,gBAAiB,mBACjBlL,MAAO,YAGT,kBAACmL,GAAA,EAAD,KACE,kBAAC,KAAD,CACEnK,MAAO,CAAEhD,MAAO,OAAQiE,UAAW,UACnCM,QAAQ,KACR6I,QAAM,EACNC,UAAU,OAJZ,yBAUJ,kBAACC,GAAA,EAAD,CACE/I,QAAQ,YACRhD,GAAE,aACAvB,MA3CU,IA4CVuN,WAAY,GAFZ,qBAGwB,CACtBvN,MA9CQ,IA+CRwN,UAAW,gBAIf,kBAACL,GAAA,EAAD,MACA,kBAACP,GAAA,EAAD,CAAKrL,GAAI,CAAEkM,SAAU,SACnB,kBAACC,GAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,IAAIrN,UAAWD,EAAQgM,MAC9B,kBAACuB,GAAA,EAAD,CAAUC,QAAM,EACdC,SAAuB,IAAbrX,EACVmL,QAAS,SAAC8K,GAAD,OAAWD,EAAoBC,EAAO,KAE/C,kBAACqB,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,WAG1B,kBAACL,GAAA,EAAD,CAAUC,QAAM,EAACjM,QAzDP,WAClB4K,GAAS5J,KAyDC,kBAACmL,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,cACrBrL,EAAO,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAE3B,kBAACsL,GAAA,EAAD,CAAUC,GAAIvL,EAAMwL,QAAQ,OAAOC,eAAa,GAC9C,kBAACX,GAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,oBAAoBrN,UAAWD,EAAQgM,MAC9C,kBAACuB,GAAA,EAAD,CAAUC,QAAM,EACdtM,GAAI,CAAE+M,GAAI,GACVR,SAAuB,IAAbrX,EACVmL,QAAS,SAAC8K,GAAD,OAAWD,EAAoBC,EAAO,KAE7C,kBAACqB,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,aAG5B,kBAAC,IAAD,CAAMN,GAAG,mBAAmBrN,UAAWD,EAAQgM,MAC7C,kBAACuB,GAAA,EAAD,CAAUC,QAAM,EACdtM,GAAI,CAAE+M,GAAI,GACVR,SAAuB,IAAbrX,EACVmL,QAAS,SAAC8K,GAAD,OAAWD,EAAoBC,EAAO,KAE/C,kBAACqB,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,YAG1B,kBAAC,IAAD,CAAMN,GAAG,sBAAsBrN,UAAWD,EAAQgM,MAChD,kBAACuB,GAAA,EAAD,CAAUC,QAAM,EACdtM,GAAI,CAAE+M,GAAI,GACVR,SAAuB,IAAbrX,EACVmL,QAAS,SAAC8K,GAAD,OAAWD,EAAoBC,EAAO,KAE/C,kBAACqB,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,oBAQpC,kBAACrB,GAAA,EAAD,CAAKtM,UAAU,OAAO+M,UAAU,OAAO9L,GAAI,CAAEgN,SAAU,EAAG9M,EAAG,GAAKuB,MAAO,CAAChD,MAAO,SAC9EkB,EAAMC,Y,iFC5IFqN,GAAS,uCAAG,WAAOhV,GAAP,SAAAX,EAAA,+EAEJC,IAAMW,KAAN,cAA0BD,GAFtB,iGAIV,CACHR,MAAO,KAAMC,QACbC,SAAS,IANI,wDAAH,sDCchBkK,GAAmB,CACvBoD,WAAW,EACXjC,QAAS,WACTkB,KAAM,SACNnF,UAAW,QAGb,SAASmO,GAAUvN,GACjB,OACE,kBAAC,KAAD,eAAYqD,QAAQ,QAAQvC,MAAM,iBAAiBgD,MAAM,UAAa9D,GACnE,kBACD,kBAACwN,GAAA,EAAD,CAAM1M,MAAM,UAAU2M,KAAK,+BAA3B,mBAEQ,KACP,IAAIC,MAAOC,cACX,KAKP,IAAM/X,GAAQgY,eAGC,SAASC,GAAT,GAA8B,IAAbC,EAAY,EAAZA,SAC9B,EAAgC5M,qBAAhC,mBAAO6M,EAAP,KAAiBC,EAAjB,KACA,EAAgC9M,qBAAhC,mBAAO+M,EAAP,KAAiBC,EAAjB,KACA,EAAkChN,oBAAS,GAA3C,mBAAOiN,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,uCAAG,WAAM/L,GAAN,iBAAA3K,EAAA,6DACnB2K,EAAEgM,iBACFF,GAAa,GAFM,SAGEG,GAAkB,CAACR,WAAUE,aAH/B,gBAIA,aADZ3V,EAHY,EAGZA,MACC4O,OACN4G,EAASxV,GAET8V,GAAa,GAPI,2CAAH,sDAWlB,OACE,kBAAC,KAAD,CAAexY,MAAOA,IACpB,kBAAC4Y,GAAA,EAAD,CAAWrC,UAAU,OAAOsC,SAAS,MACnC,kBAAC9C,GAAA,EAAD,MACA,kBAACD,GAAA,EAAD,CACErL,GAAI,CACFqO,UAAW,EACX7P,QAAS,OACT8P,cAAe,SACf1P,WAAY,WAGXkP,EAMD,qCAJA,kBAACS,GAAA,EAAD,CAAOC,SAAS,SAAhB,wDAMF,6BACA,kBAACC,GAAA,EAAD,CAAQzO,GAAI,CAAEC,EAAG,EAAGyO,QAAS,mBAC3B,kBAAC,KAAD,OAEF,kBAAC,KAAD,CAAY5C,UAAU,KAAK9I,QAAQ,MAAnC,mBAGA,kBAACqI,GAAA,EAAD,CAAKS,UAAU,OAAOtE,SAAUwG,EAAcW,YAAU,EAAC3O,GAAI,CAAE4O,GAAI,IACjE,kBAAC,KAAD,iBACM/M,GADN,CAEEgN,OAAO,SACPC,UAAQ,EACR7J,WAAS,EACT7L,GAAG,WACH0I,MAAM,WACNtN,KAAK,WACLwN,SAAU,SAAAC,GAAC,OAAI0L,EAAY1L,EAAEC,OAAOhM,QACpCsM,WAAS,KAEX,kBAAC,KAAD,iBACMX,GADN,CAEEgN,OAAO,SACPC,UAAQ,EACR7J,WAAS,EACTzQ,KAAK,WACLsN,MAAM,WACNjG,KAAK,WACLzC,GAAG,WACH2V,aAAa,mBACb/M,SAAU,SAAAC,GAAC,OAAI4L,EAAY5L,EAAEC,OAAOhM,WAEtC,kBAAC,KAAD,CACE2F,KAAK,SACLoJ,WAAS,EACTjC,QAAQ,YACRhD,GAAI,CAAE4O,GAAI,EAAGI,GAAI,IAJnB,aAUJ,kBAAC9B,GAAD,CAAWlN,GAAI,CAAE4O,GAAI,EAAGI,GAAI,OC/FpC,IAAMzZ,GAAQgY,YAAY,CACxB7M,QAAS,CACPgM,QAAS,CACPuC,KAAMC,IAAK,MAEbC,UAAW,CACTF,KAAMC,IAAK,SAKX7Q,GAAYC,aAAW,SAAA/I,GAAK,MAAK,CACrC0Z,KAAK,aACHZ,UAAW9Y,EAAMkK,QAAQ,GACzBD,QAASjK,EAAMkK,QAAQ,IACtBlK,EAAM6Z,YAAYC,KAAK,MAAQ,CAC9B7P,QAASjK,EAAMkK,QAAQ,SAqCd6P,GAhCH,WACV,IAAMxQ,EAAUT,KACXkR,EAAYC,YAAajZ,GAE9B,EC5Ca,WACb,IAMA,EAA0BsK,mBANT,WACf,IAAM4O,EAAcC,eAAe5Z,QAAQ,SACrC6Z,EAAYC,KAAKC,MAAMJ,GAC7B,cAAOE,QAAP,IAAOA,OAAP,EAAOA,EAAWG,MAGeC,IAAnC,mBAAOD,EAAP,KAAcrC,EAAd,KAOA,MAAO,CACLA,SANgB,SAAAkC,GAChBD,eAAezZ,QAAQ,QAAS2Z,KAAKI,UAAUL,IAC/ClC,EAASkC,EAAUG,QAKnBA,SD4B0BG,GAApBH,EAAR,EAAQA,MAAOrC,EAAf,EAAeA,SAEf,OAAIqC,EAKF,kBAAC,WAAD,KACI,kBAACI,EAAA,EAAD,CAAe3a,MAAOA,IACpB,kBAAC,IAAD,CAAUgB,MAAOA,GACf,kBAAC,IAAD,CAAa4Z,QAAS,KAAMZ,UAAWA,GACrC,0BAAMxQ,UAAWD,EAAQmQ,MACvB,kBAAC,GAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAIvE,UAAW5G,KACjC,kBAAC,IAAD,CAAOkL,OAAK,EAACC,KAAK,oBAAoBvE,UAAWwE,KACjD,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,mBAAmBvE,UAAWyE,KAChD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,sBAAsBvE,UAAW0E,KACnD,kBAAC,IAAD,CAAUpE,GAAG,aAftB,kBAACoB,GAAD,CAAOC,SAAUA,K,cEvC5BgD,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,GAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.82fba25c.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport store from \"../../index\";\n\nconst initialState = {\n\tthemeMode: \"light\",\n};\n\n// Slice\nconst themeSlice = createSlice({\n\tname: \"theme\",\n\tinitialState,\n\treducers: {\n\t\tsetThemeMode: (state, action) => {\n\t\t\tconst { payload } = action;\n\t\t\tstate.themeMode = payload;\n\t\t},\n\t},\n});\n\n// Reducers\nexport default themeSlice.reducer;\n\n// Selectors\nexport const themeSelector = (state) => state.theme;\n\n// Actions\nconst { setThemeMode } = themeSlice.actions;\n\n// Thunks\nexport const toggleThemeMode = () => (dispatch) => {\n\tconst { themeMode } = store.getState().theme;\n\tconst mode = themeMode === \"light\" ? \"dark\" : \"light\";\n\tdispatch(setThemeMode(mode));\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n\tlistItem: 0,\r\n};\r\n\r\n// Slice\r\nconst listItemSlice = createSlice({\r\n\tname: \"listItem\",\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetListItem: (state, action) => {\r\n\t\t\tconst { payload } = action;\r\n\t\t\tstate.listItem = payload;\r\n\t\t},\r\n\t},\r\n});\r\n\r\n// Reducers\r\nexport default listItemSlice.reducer;\r\n\r\n// Selectors\r\nexport const listItemSelector = (state) => state.listItem;\r\n\r\n// Actions\r\nexport const { setListItem } = listItemSlice.actions;\r\n\r\n// Thunks\r\n// export const toggleThemeMode = () => (dispatch) => {\r\n// \tconst { themeMode } = store.getState().theme;\r\n// \tconst mode = themeMode === \"light\" ? \"dark\" : \"light\";\r\n// \tdispatch(setThemeMode(mode));\r\n// };\r\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport theme from \"./theme\";\nimport listItem from \"./listitem\";\n\nconst rootReducer = combineReducers({\n\tlistItem: listItem,\n\ttheme: theme,\n});\nexport default rootReducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport {\n\tpersistReducer,\n\tFLUSH,\n\tREHYDRATE,\n\tPAUSE,\n\tPERSIST,\n\tPURGE,\n\tREGISTER,\n} from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\nimport createWebStorage from \"redux-persist/lib/storage/createWebStorage\";\n\nimport rootReducer from \"./reducers\";\n\nconst createNoopStorage = () => {\n\treturn {\n\t\tgetItem() {\n\t\t\treturn Promise.resolve(null);\n\t\t},\n\t\tsetItem(value) {\n\t\t\treturn Promise.resolve(value);\n\t\t},\n\t\tremoveItem() {\n\t\t\treturn Promise.resolve();\n\t\t},\n\t};\n};\nconst storage =\n\ttypeof window !== \"undefined\"\n\t\t? createWebStorage(\"local\")\n\t\t: createNoopStorage();\nconst persistConfig = {\n\tkey: \"root\",\n\tversion: 1,\n\tstorage,\n\twhitelist: [\"theme\"],\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst store = configureStore({\n\treducer: persistedReducer,\n\tmiddleware: (getDefaultMiddleware) =>\n\t\tgetDefaultMiddleware({\n\t\t\tserializableCheck: {\n\t\t\t\tignoredActions: [\n\t\t\t\t\tFLUSH,\n\t\t\t\t\tREHYDRATE,\n\t\t\t\t\tPAUSE,\n\t\t\t\t\tPERSIST,\n\t\t\t\t\tPURGE,\n\t\t\t\t\tREGISTER,\n\t\t\t\t],\n\t\t\t},\n\t\t}),\n});\nexport default store;\n","import axios from \"axios\"\r\n\r\nexport const waiter = async () => {\r\n    try {\r\n        return await axios.get(`/api/waiter`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const getDbPediaByKeyword = async (keyword) => {\r\n    try {\r\n        return await axios.get(`/api/dbpedia/search/${keyword}`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const getImageFileNames = async (keyword) => {\r\n    try {\r\n        return await axios.get(`/api/wikipedia/getimagefilenames/${keyword}`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const getDownloadableImageURL = async (keyword) => {\r\n    try {\r\n        return await axios.get(`/api/wikimedia/getimageurl/${keyword}`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const getPerson = async (keyword) => {\r\n    try {\r\n        return await axios.get(`/api/wikipedia/getperson/${keyword}`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const getWikiCoord = async (keyword) => {\r\n    try {\r\n        return await axios.get(`/api/wikipedia/getcoord/${keyword}`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCoordinate = async (keyword) => {\r\n    try {\r\n        return await axios.get(`/api/geonames/getcoordinate/${keyword}`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Save\r\n// Create\r\nexport const saveCreateThing = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/create/thing`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const saveCreateEvent = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/create/event`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const saveCreateMedium = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/create/medium`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\n// Overwrite\r\nexport const saveOverwriteThing = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/overwrite/thing`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const saveOverwriteEvent = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/overwrite/event`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const saveOverwriteMedium = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/overwrite/medium`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\n// Merge\r\nexport const saveMergeThing = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/merge/thing`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const saveMergeEvent = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/merge/event`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const saveMergeMedium = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/save/merge/medium`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//Search\r\nexport const searchThing = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/search/thing`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const searchEvent = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/search/event`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const searchMedium = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/search/medium`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//Get Tag IDs\r\nexport const getTagsThing = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/tags/thing`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const getTagsEvent = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/tags/event`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\nexport const getTagsMedium = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/tags/medium`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const getDataById = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/getdatabyid`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteDataById = async (data) => {\r\n    try {\r\n        return await axios.post(`/api/cridb/deletedatabyid`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\n","import * as ApiCRIDB from \"./cridb\";\r\n\r\n// Person Save Action\r\nexport const createPersonAction = async(record) => {\r\n    // Person : Thing\r\n    const personQuery = \r\n    {\r\n        \"command\": \"save\",\r\n        \"record_type\": \"thing\",\r\n        \"data\": {\r\n            \"subtype\": \"person\",\r\n            \"name\"   : keynameFormat(record.keyword),\r\n            \"status\" : \"online\",\r\n        }\r\n    }\r\n    await ApiCRIDB.saveCreateThing(personQuery);\r\n\r\n    const {data} = await ApiCRIDB.searchThing({query: keynameFormat(record.keyword)});\r\n\r\n    // Record ID\r\n    const recordID = data.records[data.records.length - 1].id;\r\n\r\n    const articleQuery = \r\n    { \r\n        \"command\": \"save\",\r\n        \"record_type\": \"medium\",\r\n        \"data\": { \r\n            \"subtype\" : \"article\",\r\n            \"name\" : keynameFormat(record.keyword),\r\n            \"content\": record.article,\r\n            \"status\" : \"online\",\r\n            \"tags\"    : [ {\"id\":recordID,\"type\":\"thing\"} ]\r\n        }\r\n    }\r\n\r\n    // BirthPlace and BirthDate\r\n    const place_birth = \r\n    { \r\n        \"command\": \"save\",\r\n        \"record_type\": \"thing\",\r\n        \"data\": { \r\n            \"subtype\" : \"place\",\r\n            \"name\" : record.birthplace,\r\n            \"status\" : \"online\",\r\n        }\r\n    }\r\n\r\n    await ApiCRIDB.saveCreateThing(place_birth);\r\n\r\n    const birthPlaceId = (await ApiCRIDB.searchThing({query: record.birthplace})).data.records[0].id;\r\n    const event_birth = \r\n    { \r\n        \"command\": \"save\",\r\n        \"record_type\": \"event\",\r\n        \"data\": { \r\n            \"subtype\" : \"birth\",\r\n            \"date\"    : record.birthdate,\r\n            \"status\" : \"online\",\r\n            \"tags\"    : [{\"id\":recordID,\"type\":\"thing\"}, {\"id\":birthPlaceId, \"type\":\"thing\"}]\r\n        }\r\n    }\r\n    await ApiCRIDB.saveCreateEvent(event_birth);\r\n\r\n    // DeathPlace and DeathDate\r\n    const place_death = \r\n    { \r\n        \"command\": \"save\",\r\n        \"record_type\": \"thing\",\r\n        \"data\": { \r\n            \"subtype\" : \"place\",\r\n            \"name\" : record.deathplace,\r\n            \"status\" : \"online\",\r\n        }\r\n    }\r\n    await ApiCRIDB.saveCreateThing(place_death);\r\n\r\n    const deathPlaceId = (await ApiCRIDB.searchThing({query: record.deathplace})).data.records[0].id;\r\n    const event_death = \r\n    { \r\n        \"command\": \"save\",\r\n        \"record_type\": \"event\",\r\n        \"data\": { \r\n            \"subtype\" : \"death\",    \r\n            \"date\"    : record.deathdate,\r\n            \"status\" : \"online\",\r\n            \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"}, {\"id\":deathPlaceId, \"type\":\"thing\"} ]\r\n        }\r\n    }\r\n        \r\n    await ApiCRIDB.saveCreateEvent(event_death);\r\n\r\n    // Article\r\n    await ApiCRIDB.saveCreateMedium(articleQuery);\r\n            \r\n    const downloadURLs = record.pictures.trim().split(\"\\n\");\r\n    // Pictures\r\n    let uploadPromises = [];\r\n    for( let i = 0; i < downloadURLs.length; i++ ){\r\n        const ext = (/[^.]+$/.exec(downloadURLs[i]))[0];\r\n        const imageName = downloadURLs[i].split(\".\" + ext)[0];\r\n        const nameArr = imageName.split(\"/\");\r\n        const name = nameArr[nameArr.length-1];\r\n        const picture = \r\n        { \r\n            \"command\": \"save\",\r\n            \"record_type\": \"medium\",\r\n            \"url\": downloadURLs[i],\r\n            \"data\": { \r\n                \"status\": \"online\",\r\n                \"subtype\" : \"picture\",\r\n                \"name\" : name,\r\n                \"nickname\": imageName,\r\n                \"ext\"     : ext,\r\n                \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"} ]\r\n            }\r\n        }\r\n        uploadPromises.push(ApiCRIDB.saveCreateMedium(picture));\r\n    }\r\n    await Promise.all(uploadPromises);\r\n}\r\n\r\nexport const overwritePersonAction = async(record) => {\r\n    console.log(\"overwrite action started!\", record);\r\n    let thingId = record.cridbid;\r\n    const thingTags = (await ApiCRIDB.getTagsThing({id: thingId})).data.records;\r\n    let birthPlace = \"\";\r\n    let deathPlace = \"\";\r\n    let birthPlaceId = \"\";\r\n    let deathPlaceId = \"\";\r\n    let birthId = \"\";\r\n    let deathId = \"\";\r\n    let pictures = [];\r\n    let articles = [];\r\n\r\n    let subDataApi = [];\r\n    thingTags.forEach(item => {\r\n        subDataApi.push(ApiCRIDB.getDataById({ recordtype: item.type, id: item.id }))\r\n    });\r\n    await Promise.all(subDataApi).then(async(res)=>{\r\n        res.forEach(element => {\r\n            const subData = element.data.records;\r\n            if(subData.subtype === \"birth\"){\r\n                birthId = subData.id;\r\n            }\r\n            if(subData.subtype === \"death\"){\r\n                deathId = subData.id;\r\n            }\r\n            if(subData.subtype === \"picture\"){\r\n                pictures.push({id: subData.id, data: subData.nickname});\r\n            }\r\n            if(subData.subtype === \"article\"){\r\n                articles.push({id: subData.id, data: subData.content});\r\n            }\r\n        })\r\n\r\n        try{\r\n            if(birthId !== \"\"){\r\n                birthPlaceId = (await ApiCRIDB.getDataById({ recordtype: \"event\", id: birthId })).data.records.tags[1].id;\r\n                birthPlace = (await ApiCRIDB.getDataById({ recordtype: \"thing\", id: birthPlaceId })).data.records.name;\r\n            }\r\n            if(deathId !== \"\"){\r\n                deathPlaceId = (await ApiCRIDB.getDataById({ recordtype: \"event\", id: deathId })).data.records.tags[1].id;\r\n                deathPlace = (await ApiCRIDB.getDataById({ recordtype: \"thing\", id: deathPlaceId })).data.records.name;\r\n            }\r\n        }catch(error){}\r\n\r\n        // Overwrite Action\r\n        // birthplace\r\n        if(birthPlace !== record.birthplace){\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"thing\",\r\n                \"id\"         : birthPlaceId,\r\n                \"data\": {\r\n                    \"subtype\" : \"place\",\r\n                    \"status\": \"online\",\r\n                    \"name\": record.birthplace \r\n                }\r\n            }\r\n            await ApiCRIDB.saveOverwriteThing(query);\r\n        }\r\n\r\n        // deathplace\r\n        if(deathPlace !== record.deathplace){\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"thing\",\r\n                \"id\"         : deathPlaceId,\r\n                \"data\": {\r\n                    \"subtype\" : \"place\",\r\n                    \"status\": \"online\",\r\n                    \"name\": record.deathplace \r\n                }\r\n            }\r\n            await ApiCRIDB.saveOverwriteThing(query);\r\n        }\r\n\r\n        // article\r\n        if(articles[0].data !== record.article){\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"id\"         : articles[0].id,\r\n                \"data\": {\r\n                    \"subtype\" : \"article\",\r\n                    \"name\": keynameFormat(record.keyword),\r\n                    \"status\": \"online\",\r\n                    \"content\": record.article\r\n                }\r\n            }\r\n            await ApiCRIDB.saveOverwriteMedium(query);\r\n        }\r\n        \r\n        // picture\r\n        let picArr = record.pictures.trim().split(\"\\n\");\r\n        let copiedPicArr = [...picArr];\r\n        let copiedPictures = [...pictures];\r\n        for (let i = 0; i < picArr.length; i++) {\r\n            if(picArr[i] !== \"\"){\r\n                for (let j = 0; j < pictures.length; j++) {\r\n                    const pic = pictures[j];\r\n                    const ext = /[^.]+$/.exec(picArr[i])[0];\r\n                    const imageName = (picArr[i].split(\".\" + ext))[0];\r\n                    if (pic.data.indexOf(imageName) >= 0) {\r\n                        copiedPicArr[i] = undefined;\r\n                        copiedPictures[j] = undefined;\r\n                    }\r\n                }\r\n            }else{\r\n                copiedPicArr[i] = undefined;\r\n            }\r\n        }\r\n\r\n        let mergeArr = [...copiedPicArr.filter(ele=>ele !== undefined)];\r\n        let deleteIdArr = [...copiedPictures.filter(ele=>ele !== undefined)];\r\n\r\n        var mergeEvent = [];\r\n        var deleteIdsEvent = [];\r\n        mergeArr.forEach(ele => {\r\n            let ext = \"\";\r\n                try{\r\n                    ext = (/[^.]+$/.exec(ele))[0];\r\n                }catch(ex){}\r\n            const imageName = (ele.split(\".\" + ext))[0];\r\n            const query = \r\n            { \r\n                \"command\": \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"url\": ele,\r\n                \"data\": { \r\n                    \"subtype\" : \"picture\",\r\n                    \"name\" : keynameFormat(record.keyword),\r\n                    \"nickname\": imageName,\r\n                    \"ext\"     : ext,\r\n                    \"status\": \"online\",\r\n                    \"tags\"    : [ {\"id\":thingId,\"type\":\"thing\"} ]\r\n                }\r\n            }\r\n            mergeEvent.push(ApiCRIDB.saveCreateMedium(query));\r\n        })\r\n        await Promise.all(mergeEvent);\r\n\r\n        deleteIdArr.forEach(ele => {\r\n            deleteIdsEvent.push(ApiCRIDB.deleteDataById({ recordtype: \"medium\", id: ele.id }));\r\n        })\r\n        await Promise.all(deleteIdsEvent);\r\n    });\r\n}\r\n\r\nexport const mergePersonAction = async(record) => {\r\n    console.log(\"merge action started!\", record);\r\n    let thingId = record.cridbid;\r\n    const thingTags = (await ApiCRIDB.getTagsThing({id: thingId})).data.records;\r\n    \r\n    let birthPlaceId = \"\";\r\n    let deathPlaceId = \"\";\r\n    let birthPlace = \"\";\r\n    let deathPlace = \"\";\r\n    let birthId = \"\";\r\n    let deathId = \"\";\r\n    let pictures = [];\r\n    let articles = [];\r\n\r\n    let subDataApi = [];\r\n    thingTags.forEach(item => {\r\n        subDataApi.push(ApiCRIDB.getDataById({ recordtype: item.type, id: item.id }))\r\n    });\r\n    await Promise.all(subDataApi).then(async(res)=>{\r\n        res.forEach(element => {\r\n            const subData = element.data.records;\r\n            if(subData.subtype === \"birth\"){\r\n                birthId = subData.id;\r\n            }\r\n            if(subData.subtype === \"death\"){\r\n                deathId = subData.id;\r\n            }\r\n            if(subData.subtype === \"picture\"){\r\n                pictures.push({id: subData.id, data: subData.nickname});\r\n            }\r\n            if(subData.subtype === \"article\"){\r\n                articles.push({id: subData.id, data: subData.content});\r\n            }\r\n        })\r\n\r\n        try{\r\n            if(birthId !== \"\"){\r\n                birthPlaceId = (await ApiCRIDB.getDataById({ recordtype: \"event\", id: birthId })).data.records.tags[1].id;\r\n                birthPlace = (await ApiCRIDB.getDataById({ recordtype: \"thing\", id: birthPlaceId })).data.records.name;\r\n            }\r\n            if(deathId !== \"\"){\r\n                deathPlaceId = (await ApiCRIDB.getDataById({ recordtype: \"event\", id: deathId })).data.records.tags[1].id;\r\n                deathPlace = (await ApiCRIDB.getDataById({ recordtype: \"thing\", id: deathPlaceId })).data.records.name;\r\n            }\r\n        }catch(error){}\r\n        \r\n        // Overwrite Action\r\n        // birthplace\r\n        console.log(\"cridb birthPlace =>\", birthPlace);\r\n        console.log(\"record birthplace =>\", record.birthplace);\r\n        if(birthPlace !== record.birthplace){\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"thing\",\r\n                \"id\"         : birthPlaceId,\r\n                \"data\": {\r\n                    \"subtype\" : \"place\",\r\n                    \"status\": \"online\",\r\n                    \"name\": record.birthplace \r\n                }\r\n            }\r\n            await ApiCRIDB.saveOverwriteThing(query);\r\n        }else{\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"thing\",\r\n                \"data\": {\r\n                    \"subtype\" : \"place\",\r\n                    \"status\": \"online\",\r\n                    \"name\": record.birthplace \r\n                }\r\n            }\r\n            await ApiCRIDB.saveCreateThing(query);                            \r\n        }\r\n\r\n        // deathplace\r\n        if(deathPlace !== record.deathplace){\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"thing\",\r\n                \"id\"         : deathPlaceId,\r\n                \"data\": {\r\n                    \"subtype\" : \"place\",\r\n                    \"status\": \"online\",\r\n                    \"name\": record.deathplace \r\n                }\r\n            }\r\n            await ApiCRIDB.saveOverwriteThing(query);\r\n        }else{\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"thing\",\r\n                \"data\": {\r\n                    \"subtype\" : \"place\",\r\n                    \"status\": \"online\",\r\n                    \"name\": record.deathplace \r\n                }\r\n            }\r\n            await ApiCRIDB.saveCreateThing(query);\r\n        }\r\n        \r\n        // article\r\n        if(articles.length > 0){\r\n            if(articles[0].data !== record.article){\r\n                const query = { \r\n                    \"command\"    : \"save\",\r\n                    \"record_type\": \"medium\",\r\n                    \"id\"         : articles[0].id,\r\n                    \"data\": {\r\n                        \"subtype\" : \"article\",\r\n                        \"name\": keynameFormat(record.keyword),\r\n                        \"status\": \"online\",\r\n                        \"content\": record.article\r\n                    }\r\n                }\r\n                await ApiCRIDB.saveOverwriteMedium(query);\r\n            }\r\n        }else{\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"data\": {\r\n                    \"subtype\" : \"article\",\r\n                    \"name\": keynameFormat(record.keyword),\r\n                    \"status\": \"online\",\r\n                    \"content\": record.article\r\n                }\r\n            }\r\n            await ApiCRIDB.saveCreateMedium(query);\r\n        }\r\n        \r\n        // picture\r\n        let picArr = record.pictures.trim().split(\"\\n\");\r\n        let copiedPicArr = [...picArr];\r\n        for (let i = 0; i < picArr.length; i++) {\r\n            if(picArr[i] !== \"\"){\r\n                for (let j = 0; j < pictures.length; j++) {\r\n                    const pic = pictures[j];\r\n                    const ext = /[^.]+$/.exec(picArr[i])[0];\r\n                    const imageName = (picArr[i].split(\".\" + ext))[0];\r\n                    if (pic.data.indexOf(imageName) >= 0) {\r\n                        copiedPicArr[i] = undefined;\r\n                    }\r\n                }\r\n            }else{\r\n                copiedPicArr[i] = undefined;\r\n            }\r\n        }\r\n\r\n        let mergeArr = [...copiedPicArr.filter(ele=>ele !== undefined)];\r\n        var mergeEvent = [];\r\n        mergeArr.forEach(ele => {\r\n            let ext = \"\";\r\n                try{\r\n                    ext = (/[^.]+$/.exec(ele))[0];\r\n                }catch(ex){}\r\n            const imageName = (ele.split(\".\" + ext))[0];\r\n            const nameArr = imageName.split(\"/\");\r\n            const name = nameArr[nameArr.length-1];\r\n            const query = \r\n            { \r\n                \"command\": \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"url\": ele,\r\n                \"data\": { \r\n                    \"subtype\" : \"picture\",\r\n                    \"name\" : name,\r\n                    \"nickname\": imageName,\r\n                    \"ext\"     : ext,\r\n                    \"status\": \"online\",\r\n                    \"tags\"    : [ {\"id\":thingId,\"type\":\"thing\"} ]\r\n                }\r\n            }\r\n            mergeEvent.push(ApiCRIDB.saveCreateMedium(query));\r\n        })\r\n        await Promise.all(mergeEvent);                        \r\n    });\r\n}\r\n\r\n// Place Save Action\r\nexport const createPlaceAction = async(record) => {\r\n    console.log(keynameFormat(record.keyword));\r\n    // Place : Thing\r\n    const query = \r\n    {\r\n        \"command\": \"save\",\r\n        \"record_type\": \"thing\",\r\n        \"data\": {\r\n            \"subtype\": \"place\",\r\n            \"name\"   : keynameFormat(record.keyword),\r\n            \"lat\" : record.latitude,\r\n            \"long\" : record.longitude,\r\n            \"status\" : \"online\",\r\n        }\r\n    }\r\n    await ApiCRIDB.saveCreateThing(query);\r\n\r\n    const {data} = await ApiCRIDB.searchThing({query: keynameFormat(record.keyword)});\r\n\r\n    // Record ID\r\n    const recordID = data.records[data.records.length - 1].id;\r\n    \r\n    // Article\r\n    const articleQuery = \r\n    { \r\n        \"command\": \"save\",\r\n        \"record_type\": \"medium\",\r\n        \"data\": { \r\n            \"subtype\" : \"article\",\r\n            \"name\" : keynameFormat(record.keyword),\r\n            \"content\": record.article,\r\n            \"status\" : \"online\",\r\n            \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"} ]\r\n        }\r\n    }\r\n    await ApiCRIDB.saveCreateMedium(articleQuery);\r\n    \r\n    // Pictures\r\n    let uploadPromises = [];\r\n    const downloadURLs = record.pictures.trim().split(\"\\n\");\r\n    for( let i = 0; i < downloadURLs.length; i++ ){\r\n        const ext = (/[^.]+$/.exec(downloadURLs[i]))[0];\r\n        const imageName = downloadURLs[i].split(\".\" + ext)[0];\r\n        const nameArr = imageName.split(\"/\");\r\n        const name = nameArr[nameArr.length-1];\r\n        const picture = \r\n            { \r\n                \"command\": \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"url\": downloadURLs[i],\r\n                \"data\": { \r\n                    \"status\": \"online\",\r\n                    \"subtype\" : \"picture\",\r\n                    \"name\" : name,\r\n                    \"nickname\": imageName,\r\n                    \"ext\"     : ext,\r\n                    \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"} ]\r\n                }\r\n            }\r\n        uploadPromises.push(ApiCRIDB.saveCreateMedium(picture));\r\n    }\r\n    await Promise.all(uploadPromises);\r\n}\r\n\r\nexport const overwritePlaceAction = async(record) => {\r\n    let thingId = record.cridbid;\r\n    const apiData = (await ApiCRIDB.getDataById({ recordtype: \"thing\", id: thingId })).data.records;\r\n    const query = {\r\n        \"command\": \"save\",\r\n        \"record_type\": \"thing\",\r\n        \"id\"         : apiData.id,\r\n        \"data\": {\r\n            \"subtype\": \"place\",\r\n            \"name\"   : keynameFormat(record.keyword),\r\n            \"lat\" : record.latitude,\r\n            \"long\" : record.longitude,\r\n            \"status\" : \"online\",\r\n        }\r\n    }\r\n    await ApiCRIDB.saveOverwriteThing(query);\r\n\r\n    if(thingId !== \"\"){\r\n        const thingTags = (await ApiCRIDB.getTagsThing({id: thingId})).data.records;\r\n\r\n        let pictures = [];\r\n        let articles = [];\r\n\r\n        let subDataApi = [];\r\n        thingTags.forEach(item => {\r\n            subDataApi.push(ApiCRIDB.getDataById({ recordtype: item.type, id: item.id }))\r\n        });\r\n        await Promise.all(subDataApi).then(async(res)=>{\r\n            res.forEach(element => {\r\n                const subData = element.data.records;\r\n                if(subData.subtype === \"picture\"){\r\n                    pictures.push({id: subData.id, data: subData.nickname});\r\n                }\r\n                if(subData.subtype === \"article\"){\r\n                    articles.push({id: subData.id, data: subData.content});\r\n                }\r\n            })\r\n\r\n            // Overwrite Action\r\n            \r\n            // article\r\n            if(articles[0].data !== record.article){\r\n                const query = { \r\n                    \"command\"    : \"save\",\r\n                    \"record_type\": \"medium\",\r\n                    \"id\"         : articles[0].id,\r\n                    \"data\": {\r\n                        \"subtype\" : \"article\",\r\n                        \"name\": keynameFormat(record.keyword),\r\n                        \"status\": \"online\",\r\n                        \"content\": record.article\r\n                    }\r\n                }\r\n                await ApiCRIDB.saveOverwriteMedium(query);\r\n            }\r\n            \r\n            let picArr = record.pictures.trim().split(\"\\n\");\r\n            \r\n            // picture\r\n            \r\n            let copiedPicArr = [...picArr];\r\n            let copiedPictures = [...pictures];\r\n            for (let i = 0; i < picArr.length; i++) {\r\n                if(picArr[i] !== \"\"){\r\n                    for (let j = 0; j < pictures.length; j++) {\r\n                        const pic = pictures[j];\r\n                        const ext = /[^.]+$/.exec(picArr[i])[0];\r\n                        const imageName = (picArr[i].split(\".\" + ext))[0];\r\n                        if (pic.data.indexOf(imageName) >= 0) {\r\n                            copiedPicArr[i] = undefined;\r\n                            copiedPictures[j] = undefined;\r\n                        }\r\n                    }\r\n                }else{\r\n                    copiedPicArr[i] = undefined;\r\n                }\r\n            }\r\n\r\n            let mergeArr = [...copiedPicArr.filter(ele=>ele !== undefined)];\r\n            let deleteIdArr = [...copiedPictures.filter(ele=>ele !== undefined)];\r\n            var mergeEvent = [];\r\n            var deleteIdsEvent = [];\r\n            mergeArr.forEach(ele => {\r\n                let ext = \"\";\r\n                try{\r\n                    ext = (/[^.]+$/.exec(ele))[0];\r\n                }catch(ex){}\r\n                const imageName = (ele.split(\".\" + ext))[0];\r\n                const nameArr = imageName.split(\"/\");\r\n                const name = nameArr[nameArr.length-1];\r\n                const query = \r\n                { \r\n                    \"command\": \"save\",\r\n                    \"record_type\": \"medium\",\r\n                    \"url\": ele,\r\n                    \"data\": { \r\n                        \"subtype\" : \"picture\",\r\n                        \"name\" : name,\r\n                        \"nickname\": imageName,\r\n                        \"ext\"     : ext,\r\n                        \"status\": \"online\",\r\n                        \"tags\"    : [ {\"id\":thingId,\"type\":\"thing\"} ]\r\n                    }\r\n                }\r\n                mergeEvent.push(ApiCRIDB.saveCreateMedium(query));\r\n            })\r\n            await Promise.all(mergeEvent);\r\n\r\n            deleteIdArr.forEach(ele => {\r\n                deleteIdsEvent.push(ApiCRIDB.deleteDataById({ recordtype: \"medium\", id: ele.id }));\r\n            })\r\n            await Promise.all(deleteIdsEvent);                     \r\n        });\r\n    }\r\n}\r\n\r\nexport const mergePlaceAction = async(record) => {\r\n    let thingId = record.cridbid;\r\n\r\n    try{\r\n        const apiData = (await ApiCRIDB.getDataById({ recordtype: \"thing\", id: thingId })).data.records;\r\n        const query = {\r\n            \"command\": \"save\",\r\n            \"record_type\": \"thing\",\r\n            \"id\"         : apiData.id,\r\n            \"data\": {\r\n                \"subtype\": \"place\",\r\n                \"name\"   : keynameFormat(record.keyword),\r\n                \"lat\" : record.latitude,\r\n                \"long\" : record.longitude,\r\n                \"status\" : \"online\",\r\n            }\r\n        }\r\n        await ApiCRIDB.saveOverwriteThing(query);\r\n    }catch(ex){\r\n        const query = {\r\n            \"command\": \"save\",\r\n            \"record_type\": \"thing\",\r\n            \"data\": {\r\n                \"subtype\": \"place\",\r\n                \"name\"   : keynameFormat(record.keyword),\r\n                \"lat\" : record.latitude,\r\n                \"long\" : record.longitude,\r\n                \"status\" : \"online\",\r\n            }\r\n        }\r\n        await ApiCRIDB.saveCreateThing(query);\r\n    }\r\n\r\n    if(thingId !== \"\"){\r\n        const thingTags = (await ApiCRIDB.getTagsThing({id: thingId})).data.records;\r\n\r\n        let pictures = [];\r\n        let articles = [];\r\n\r\n        let subDataApi = [];\r\n        thingTags.forEach(item => {\r\n            subDataApi.push(ApiCRIDB.getDataById({ recordtype: item.type, id: item.id }))\r\n        });\r\n        await Promise.all(subDataApi).then(async(res)=>{\r\n\r\n            res.forEach(element => {\r\n                const subData = element.data.records;\r\n                if(subData.subtype === \"picture\"){\r\n                    pictures.push({id: subData.id, data: subData.nickname});\r\n                }\r\n                if(subData.subtype === \"article\"){\r\n                    articles.push({id: subData.id, data: subData.content});\r\n                }\r\n            })\r\n\r\n            // Overwrite Action\r\n            \r\n            // article\r\n            if(articles.length > 0){\r\n                if(articles[0].data !== record.article){\r\n                    const query = { \r\n                        \"command\"    : \"save\",\r\n                        \"record_type\": \"medium\",\r\n                        \"id\"         : articles[0].id,\r\n                        \"data\": {\r\n                            \"subtype\" : \"article\",\r\n                            \"name\": keynameFormat(record.keyword),\r\n                            \"status\": \"online\",\r\n                            \"content\": record.article\r\n                        }\r\n                    }\r\n                    await ApiCRIDB.saveOverwriteMedium(query);\r\n                }\r\n            }else{\r\n                const query = { \r\n                    \"command\"    : \"save\",\r\n                    \"record_type\": \"medium\",\r\n                    \"data\": {\r\n                        \"subtype\" : \"article\",\r\n                        \"name\": keynameFormat(record.keyword),\r\n                        \"status\": \"online\",\r\n                        \"content\": record.article\r\n                    }\r\n                }\r\n                await ApiCRIDB.saveCreateMedium(query);\r\n            }\r\n            \r\n            let picArr = record.pictures.trim().split(\"\\n\");\r\n            \r\n            // picture\r\n            \r\n            let copiedPicArr = [...picArr];\r\n            let copiedPictures = [...pictures];\r\n            for (let i = 0; i < picArr.length; i++) {\r\n                if(picArr[i] !== \"\"){\r\n                    for (let j = 0; j < pictures.length; j++) {\r\n                        const pic = pictures[j];\r\n                        const ext = /[^.]+$/.exec(picArr[i])[0];\r\n                        const imageName = (picArr[i].split(\".\" + ext))[0];\r\n                        if (pic.data.indexOf(imageName) >= 0) {\r\n                            copiedPicArr[i] = undefined;\r\n                            copiedPictures[j] = undefined;\r\n                        }\r\n                    }\r\n                }else{\r\n                    copiedPicArr[i] = undefined;\r\n                }\r\n            }\r\n\r\n            let mergeArr = [...copiedPicArr.filter(ele=>ele !== undefined)];\r\n            var mergeEvent = [];\r\n            mergeArr.forEach(ele => {\r\n                let ext = \"\";\r\n                    try{\r\n                      ext = (/[^.]+$/.exec(ele))[0];\r\n                    }catch(ex){}\r\n                const imageName = (ele.split(\".\" + ext))[0];\r\n                const nameArr = imageName.split(\"/\");\r\n                const name = nameArr[nameArr.length-1];\r\n                const query = \r\n                { \r\n                    \"command\": \"save\",\r\n                    \"record_type\": \"medium\",\r\n                    \"url\": ele,\r\n                    \"data\": { \r\n                        \"subtype\" : \"picture\",\r\n                        \"name\" : name,\r\n                        \"nickname\": imageName,\r\n                        \"ext\"     : ext,\r\n                        \"status\": \"online\",\r\n                        \"tags\"    : [ {\"id\":thingId, \"type\":\"thing\"} ]\r\n                    }\r\n                }\r\n                mergeEvent.push(ApiCRIDB.saveCreateMedium(query));\r\n            })\r\n            await Promise.all(mergeEvent);\r\n        });\r\n    }\r\n}\r\n\r\n// Artefact Save Action\r\nexport const createArtefactAction = async(record) => {\r\n    // Artefact : Thing\r\n    const query = \r\n    {\r\n        \"command\": \"save\",\r\n        \"record_type\": \"thing\",\r\n        \"data\": {\r\n            \"subtype\": \"artefact\",\r\n            \"name\"   : keynameFormat(record.keyword),\r\n            \"status\" : \"online\",\r\n        }\r\n    }\r\n    await ApiCRIDB.saveCreateThing(query);\r\n\r\n    const {data} = await ApiCRIDB.searchThing({query: keywordFormat(record.keyword)});\r\n\r\n    // Record ID\r\n    const recordID = data.records[data.records.length - 1].id;\r\n\r\n    const articleQuery = \r\n    { \r\n        \"command\": \"save\",\r\n        \"record_type\": \"medium\",\r\n        \"data\": { \r\n            \"subtype\" : \"article\",\r\n            \"name\" : keynameFormat(record.keyword),\r\n            \"content\": record.article,\r\n            \"status\" : \"online\",\r\n            \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"} ]\r\n        }\r\n    }\r\n\r\n    const downloadURLs = record.pictures.trim().split(\"\\n\");\r\n    // StartDate and EndDate\r\n    const date_start = \r\n        { \r\n            \"command\": \"save\",\r\n            \"record_type\": \"event\",\r\n            \"data\": { \r\n                \"subtype\" : \"start\",\r\n                \"date\"    : record.startdate,\r\n                \"status\" : \"online\",\r\n                \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"} ]\r\n            }\r\n        }\r\n    await ApiCRIDB.saveCreateEvent(date_start);\r\n        \r\n    const date_end = \r\n        { \r\n            \"command\": \"save\",\r\n            \"record_type\": \"event\",\r\n            \"data\": { \r\n                \"subtype\" : \"end\",\r\n                \"date\"    : record.enddate,\r\n                \"status\"  : \"online\",\r\n                \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"} ]\r\n            }\r\n        }\r\n        \r\n    await ApiCRIDB.saveCreateEvent(date_end);\r\n    // Article\r\n    await ApiCRIDB.saveCreateMedium(articleQuery);\r\n\r\n    // Pictures\r\n    let uploadPromises = [];\r\n    for( let i = 0; i < downloadURLs.length; i++ ){\r\n        const ext = (/[^.]+$/.exec(downloadURLs[i]))[0];\r\n        const imageName = downloadURLs[i].split(\".\" + ext)[0];\r\n        const nameArr = imageName.split(\"/\");\r\n        const name = nameArr[nameArr.length-1];\r\n        const picture = \r\n            { \r\n                \"command\": \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"url\": downloadURLs[i],\r\n                \"data\": { \r\n                    \"status\": \"online\",\r\n                    \"subtype\" : \"picture\",\r\n                    \"name\" : name,\r\n                    \"nickname\": imageName,\r\n                    \"ext\"     : ext,\r\n                    \"tags\"    : [ {\"id\":recordID, \"type\":\"thing\"} ]\r\n                }\r\n            }\r\n        uploadPromises.push(ApiCRIDB.saveCreateMedium(picture));\r\n    }\r\n    await Promise.all(uploadPromises);\r\n}\r\n\r\nexport const overwriteArtefactAction = async(record) => {\r\n    let thingId = record.cridbid;\r\n    const thingTags = (await ApiCRIDB.getTagsThing({id: thingId})).data.records;\r\n\r\n    let pictures = [];\r\n    let articles = [];\r\n\r\n    let subDataApi = [];\r\n    thingTags.forEach(item => {\r\n        subDataApi.push(ApiCRIDB.getDataById({ recordtype: item.type, id: item.id }))\r\n    });\r\n    await Promise.all(subDataApi).then(async(res)=>{\r\n        res.forEach(element => {\r\n            const subData = element.data.records;\r\n            if(subData.subtype === \"picture\"){\r\n                pictures.push({id: subData.id, data: subData.nickname});\r\n            }\r\n            if(subData.subtype === \"article\"){\r\n                articles.push({id: subData.id, data: subData.content});\r\n            }\r\n        })\r\n\r\n        // Overwrite Action\r\n        \r\n        // article\r\n        if(articles[0].data !== record.article){\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"id\"         : articles[0].id,\r\n                \"data\": {\r\n                    \"subtype\" : \"article\",\r\n                    \"name\": keynameFormat(record.keyword),\r\n                    \"status\": \"online\",\r\n                    \"content\": record.article\r\n                }\r\n            }\r\n            await ApiCRIDB.saveOverwriteMedium(query);\r\n        }\r\n        \r\n        let picArr = record.pictures.trim().split(\"\\n\");\r\n        \r\n        // picture\r\n        \r\n        let copiedPicArr = [...picArr];\r\n        let copiedPictures = [...pictures];\r\n        for (let i = 0; i < picArr.length; i++) {\r\n            if(picArr[i] !== \"\"){\r\n                for (let j = 0; j < pictures.length; j++) {\r\n                    const pic = pictures[j];\r\n                    const ext = /[^.]+$/.exec(picArr[i])[0];\r\n                    const imageName = (picArr[i].split(\".\" + ext))[0];\r\n                    if (pic.data.indexOf(imageName) >= 0) {\r\n                        copiedPicArr[i] = undefined;\r\n                        copiedPictures[j] = undefined;\r\n                    }\r\n                }\r\n            }else{\r\n                copiedPicArr[i] = undefined;\r\n            }\r\n        }\r\n\r\n        let mergeArr = [...copiedPicArr.filter(ele=>ele !== undefined)];\r\n        let deleteIdArr = [...copiedPictures.filter(ele=>ele !== undefined)];\r\n        var mergeEvent = [];\r\n        var deleteIdsEvent = [];\r\n        mergeArr.forEach(ele => {\r\n            let ext = \"\";\r\n                try{\r\n                    ext = (/[^.]+$/.exec(ele))[0];\r\n                }catch(ex){}\r\n            const imageName = (ele.split(\".\" + ext))[0];\r\n            const nameArr = imageName.split(\"/\");\r\n            const name = nameArr[nameArr.length-1];\r\n            const query = \r\n            { \r\n                \"command\": \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"url\": ele,\r\n                \"data\": { \r\n                    \"subtype\" : \"picture\",\r\n                    \"name\" : name,\r\n                    \"nickname\": imageName,\r\n                    \"ext\"     : ext,\r\n                    \"status\": \"online\",\r\n                    \"tags\"    : [ {\"id\":thingId, \"type\":\"thing\"} ]\r\n                }\r\n            }\r\n            mergeEvent.push(ApiCRIDB.saveCreateMedium(query));\r\n        })\r\n        await Promise.all(mergeEvent);\r\n\r\n        deleteIdArr.forEach(ele => {\r\n            deleteIdsEvent.push(ApiCRIDB.deleteDataById({ recordtype: \"medium\", id: ele.id }));\r\n        })\r\n        await Promise.all(deleteIdsEvent);                     \r\n    });\r\n}\r\n\r\nexport const mergeArtefactAction = async(record) => {\r\n    \r\n    let thingId = record.cridbid;\r\n    const thingTags = (await ApiCRIDB.getTagsThing({id: thingId})).data.records;\r\n\r\n    let pictures = [];\r\n    let articles = [];\r\n\r\n    let subDataApi = [];\r\n    thingTags.forEach(item => {\r\n        subDataApi.push(ApiCRIDB.getDataById({ recordtype: item.type, id: item.id }))\r\n    });\r\n    await Promise.all(subDataApi).then(async(res)=>{\r\n\r\n        res.forEach(element => {\r\n            const subData = element.data.records;\r\n            if(subData.subtype === \"picture\"){\r\n                pictures.push({id: subData.id, data: subData.nickname});\r\n            }\r\n            if(subData.subtype === \"article\"){\r\n                articles.push({id: subData.id, data: subData.content});\r\n            }\r\n        })\r\n\r\n        // Overwrite Action\r\n        \r\n        // article\r\n        if(articles.length > 0){\r\n            if(articles[0].data !== record.article){\r\n                const query = { \r\n                    \"command\"    : \"save\",\r\n                    \"record_type\": \"medium\",\r\n                    \"id\"         : articles[0].id,\r\n                    \"data\": {\r\n                        \"subtype\" : \"article\",\r\n                        \"name\": keynameFormat(record.keyword),\r\n                        \"status\": \"online\",\r\n                        \"content\": record.article\r\n                    }\r\n                }\r\n                await ApiCRIDB.saveOverwriteMedium(query);\r\n            }\r\n        }else{\r\n            const query = { \r\n                \"command\"    : \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"data\": {\r\n                    \"subtype\" : \"article\",\r\n                    \"name\": keynameFormat(record.keyword),\r\n                    \"status\": \"online\",\r\n                    \"content\": record.article\r\n                }\r\n            }\r\n            await ApiCRIDB.saveCreateMedium(query);\r\n        }\r\n        \r\n        let picArr = record.pictures.trim().split(\"\\n\");\r\n        \r\n        // picture\r\n        \r\n        let copiedPicArr = [...picArr];\r\n        let copiedPictures = [...pictures];\r\n        for (let i = 0; i < picArr.length; i++) {\r\n            if(picArr[i] !== \"\"){\r\n                for (let j = 0; j < pictures.length; j++) {\r\n                    const pic = pictures[j];\r\n                    const ext = /[^.]+$/.exec(picArr[i])[0];\r\n                    const imageName = (picArr[i].split(\".\" + ext))[0];\r\n                    if (pic.data.indexOf(imageName) >= 0) {\r\n                        copiedPicArr[i] = undefined;\r\n                        copiedPictures[j] = undefined;\r\n                    }\r\n                }\r\n            }else{\r\n                copiedPicArr[i] = undefined;\r\n            }\r\n        }\r\n\r\n        let mergeArr = [...copiedPicArr.filter(ele=>ele !== undefined)];\r\n        var mergeEvent = [];\r\n        mergeArr.forEach(ele => {\r\n            let ext = \"\";\r\n                try{\r\n                    ext = (/[^.]+$/.exec(ele))[0];\r\n                }catch(ex){}\r\n            const imageName = (ele.split(\".\" + ext))[0];\r\n            const nameArr = imageName.split(\"/\");\r\n            const name = nameArr[nameArr.length-1];\r\n            const query = \r\n            { \r\n                \"command\": \"save\",\r\n                \"record_type\": \"medium\",\r\n                \"url\": ele,\r\n                \"data\": { \r\n                    \"subtype\" : \"picture\",\r\n                    \"name\" : name,\r\n                    \"nickname\": imageName,\r\n                    \"ext\"     : ext,\r\n                    \"status\": \"online\",\r\n                    \"tags\"    : [ {\"id\":thingId, \"type\":\"thing\"} ]\r\n                }\r\n            }\r\n            mergeEvent.push(ApiCRIDB.saveCreateMedium(query));\r\n        })\r\n        await Promise.all(mergeEvent);\r\n    });\r\n}\r\n\r\n\r\nexport const keywordFormat = (keyword) => {\r\n    const keyname = keyword.replace(/\\s\\s+/g, ' ').trim().replaceAll(' ', '_');\r\n    return keyname;\r\n}\r\n\r\nexport const keynameFormat = (keyword) => {\r\n    const keyname = keywordFormat(keyword).replaceAll('_', ' ');\r\n    return keyname;\r\n}","import React from 'react';\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"flex\",\r\n        width: '100%',\r\n        minHeight: 500,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    }\r\n}))\r\n\r\nconst CircleLoading = () => {\r\n    const classes = useStyles();\r\n    return <div className={classes.root}>\r\n        <CircularProgress />\r\n    </div>\r\n}\r\n\r\nexport default CircleLoading;","import axios from \"axios\"\r\n\r\nexport const getSaveList = async (type) => {\r\n    try {\r\n        return await axios.get(`/db/savelist/${type}/get`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveToSavelist = async (data, type) => {\r\n    try {\r\n        return await axios.post(`/db/savelist/${type}/save`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateToSavelist = async (data, type) => {\r\n    try {\r\n        return await axios.post(`/db/savelist/${type}/update`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteFromSavelist = async (keyword, type) => {\r\n    try {\r\n        return await axios.get(`/db/savelist/${type}/delete/${keyword}`);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}","import React, {\r\n  useState\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  Button, \r\n  Dialog, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  IconButton, \r\n  Grid,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Select\r\n} from '@mui/material';\r\n\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst Person = (props) => {\r\n  const [showDuplicates, setShowDuplicates] = useState(false);\r\n  const [duplicatedId, setDuplicatedId] = useState(\"\");\r\n\r\n  const onSaveActionChange = (saveAction) => {\r\n    if(saveAction === \"create\"){\r\n      setShowDuplicates(false);\r\n      setDuplicatedId(\"\");\r\n    }else if(saveAction === \"overwrite\"){\r\n      setShowDuplicates(true);\r\n    }else if(saveAction === \"merge\"){\r\n      setShowDuplicates(true);\r\n    }\r\n  }\r\n\r\n  const cancelClose = () => {\r\n    props.setIsOpen(false);\r\n  };\r\n\r\n  const saveToAddListClose = () => {\r\n    if(!(props.data.saveAction!==\"create\" && duplicatedId === \"\")){\r\n      props.setIsOpen(false);\r\n      props.saveClose(props.data.saveAction, duplicatedId, \"success\");\r\n    }\r\n  };\r\n\r\n  const saveToCRIDB = () => {\r\n    if(!(props.data.saveAction!==\"create\" && duplicatedId === \"\")){\r\n      props.setIsOpen(false); \r\n      props.func.saveForm(duplicatedId);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <BootstrapDialog\r\n        onClose={cancelClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={props.isOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={cancelClose}>\r\n          Duplicates\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers style={{width: \"350px\"}}>\r\n          <Grid container className=\"px-1\">\r\n            <Grid item xs={12} md={12}>\r\n              <FormControl {...props.FormElementProps}  className=\"mt-4 mb-4\">\r\n                <InputLabel id=\"Save Action\">Save Action</InputLabel>\r\n                <Select \r\n                  label=\"Save Action\"\r\n                  value={props.data.saveAction}\r\n                  onChange={e => {onSaveActionChange(e.target.value); props.func.setSaveAction(e.target.value);}}\r\n                >\r\n                  <MenuItem value=\"create\">Create</MenuItem>\r\n                  <MenuItem value=\"overwrite\">Overwrite</MenuItem>\r\n                  <MenuItem value=\"merge\">Merge</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <>\r\n            {\r\n              showDuplicates ?\r\n              <Grid container className=\"px-1 py-3\">\r\n                <Grid item xs={12} md={12}>\r\n                  <FormControl {...props.FormElementProps}>\r\n                    <InputLabel id=\"duplcatedRecords\">Select a duplicated record</InputLabel>\r\n                    <Select \r\n                      label=\"Duplicated Records\"\r\n                      value={duplicatedId}\r\n                      onChange={e => {setDuplicatedId(e.target.value)}}\r\n                    >\r\n                      {\r\n                        props.duplicatedRec.map((element, i) => <MenuItem value={element.id} key={i}>{element.name}</MenuItem>)\r\n                      }\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n              : <></>\r\n            }\r\n          </>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container>\r\n            <Grid item xs={6} md={6}>\r\n              <Button autoFocus onClick={saveToAddListClose}>\r\n                Add to Save List\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6} md={6} style={{textAlign: \"right\"}}>\r\n              <Button onClick={saveToCRIDB}>\r\n                Save to CRIDB\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Person;","import React, {useState} from 'react'\r\nimport { \r\n    Grid, \r\n    Button, \r\n    Typography, \r\n    TextField\r\n} from '@material-ui/core'; \r\n\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\n\r\nimport CircleLoading from \"../CircleLoading\";\r\nimport * as ApiDB from \"../../api/db\";\r\nimport * as ApiCRIDB from \"../../api/cridb\";\r\nimport * as ApiFunction from \"../../api/function\";\r\n\r\nimport DialogCompare from '../../components/DialogCompare/Person';\r\n\r\n\r\nconst Person = ({ func, data, FormElementProps }) => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [duplicatedRec, setDuplicatedRec] = useState([]);\r\n\r\n    const saveToSavelist = () => async() => {\r\n        try{\r\n            await ApiCRIDB.searchThing({query: ApiFunction.keywordFormat(data.keyword)}).then((res) => {\r\n                const duplicates = res.data.records.filter((record)=>{\r\n                    return record.subtype === \"person\";\r\n                });\r\n                \r\n                if(duplicates.length > 0){\r\n                    setDuplicatedRec(duplicates);\r\n                }\r\n            });\r\n            setIsOpen(true);\r\n        }catch(ex){}\r\n        \r\n    }\r\n\r\n    const saveClose = async(saveAction, cridbId, variant) => {\r\n        const params = [\r\n            data.keyword, \r\n            data.person.birthPlace, \r\n            data.person.deathPlace, \r\n            data.person.birthDate, \r\n            data.person.deathDate, \r\n            data.person.article, \r\n            data.person.downloadableImageURL,\r\n            saveAction,\r\n            cridbId\r\n        ];\r\n        try {\r\n            await ApiDB.saveToSavelist(params, \"person\").then(res => {\r\n                if(res.status === 200){\r\n                    enqueueSnackbar('The current record is successfully saved to Save List!', { variant });\r\n                }\r\n            });\r\n        } catch (ex) {}\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Typography variant=\"h6\" align=\"left\" style={{paddingBottom: \"1.25rem\"}}>Result</Typography> \r\n        <Grid container spacing={1}>\r\n            {/* Birth and Death Date */}\r\n            <>\r\n                {\r\n                    data.personLoading ? <CircleLoading /> : \r\n                    <>\r\n                    <Grid container spacing={5}>\r\n                        <Grid item xs={6} md={6}>\r\n                            <TextField\r\n                                {...FormElementProps}                                    \r\n                                label=\"Birth Date\"\r\n                                value={data.person.birthDate}\r\n                                onChange={e => {func.setPersonForm('birthDate', e.target.value);}}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} md={6}>\r\n                            <TextField \r\n                                {...FormElementProps}\r\n                                label=\"Death Date\"\r\n                                value={data.person.deathDate}\r\n                                onChange={e => func.setPersonForm('deathDate', e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    {/* Birth and Death Place */}\r\n                    <TextField \r\n                        {...FormElementProps}                                    \r\n                        label=\"Birth Place\"\r\n                        value={data.person.birthPlace}\r\n                        onChange={e => func.setPersonForm('birthPlace', e.target.value)}\r\n                    />\r\n                    <TextField \r\n                        {...FormElementProps}\r\n                        label=\"Death Place\"\r\n                        value={data.person.deathPlace}\r\n                        onChange={e => func.setPersonForm('deathPlace', e.target.value)}\r\n                    />\r\n                    {/* Article */}\r\n                    <TextField \r\n                        {...FormElementProps}\r\n                        label=\"Article\"\r\n                        multiline\r\n                        rows={8}\r\n                        value={data.person.article}\r\n                        onChange={e => func.setPersonForm('article', e.target.value)}\r\n                    />\r\n                    {/* Downloadable Image URL */}\r\n                    <TextField \r\n                        {...FormElementProps}\r\n                        label=\"Downloadable Image URL\"\r\n                        multiline\r\n                        rows={8}\r\n                        value={data.person.downloadableImageURL}\r\n                        onChange={e => func.setPersonForm('downloadableImageURL', e.target.value)}\r\n                    />\r\n                </>\r\n            }\r\n            </>\r\n            {/* Save Action */}\r\n            <Grid container className=\"mt-4\">\r\n                <Grid item xs={8} md={8}></Grid>\r\n                <Grid item xs={4} md={4} align=\"right\">\r\n                    <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={saveToSavelist()}>\r\n                        Compare\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <DialogCompare \r\n            FormElementProps={FormElementProps} \r\n            isOpen={isOpen} \r\n            duplicatedRec={duplicatedRec}\r\n            setIsOpen={setIsOpen} \r\n            saveClose={saveClose}\r\n            data={data}\r\n            func={func}\r\n        />\r\n        </>                                                         \r\n    );\r\n}\r\n\r\nexport default function IntegrationNotistack(props) {\r\n    return (\r\n        <SnackbarProvider maxSnack={3}>\r\n            <Person {...props}/>\r\n        </SnackbarProvider>\r\n    );\r\n}","import React, {\r\n  useState\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  Button, \r\n  Dialog, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  IconButton, \r\n  Grid,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Select\r\n} from '@mui/material';\r\n\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst Place = (props) => {\r\n  const [showDuplicates, setShowDuplicates] = useState(false);\r\n  const [duplicatedId, setDuplicatedId] = useState(\"\");\r\n\r\n  const onSaveActionChange = (saveAction) => {\r\n    if(saveAction === \"create\"){\r\n      setShowDuplicates(false);\r\n      setDuplicatedId(\"\");\r\n    }else if(saveAction === \"overwrite\"){\r\n      setShowDuplicates(true);\r\n    }else if(saveAction === \"merge\"){\r\n      setShowDuplicates(true);\r\n    }\r\n  }\r\n\r\n  const cancelClose = () => {\r\n    props.setIsOpen(false);\r\n  };\r\n\r\n  const saveToAddListClose = () => {\r\n    if(!(props.data.saveAction!==\"create\" && duplicatedId === \"\")){\r\n      props.setIsOpen(false);\r\n      props.saveClose(props.data.saveAction, duplicatedId, \"success\");\r\n    }\r\n  };\r\n\r\n  const saveToCRIDB = () => {\r\n    if(!(props.data.saveAction!==\"create\" && duplicatedId === \"\")){\r\n      props.setIsOpen(false); \r\n      props.func.saveForm(duplicatedId);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <BootstrapDialog\r\n        onClose={cancelClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={props.isOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={cancelClose}>\r\n          Duplicates\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers style={{width: \"350px\"}}>\r\n          <Grid container className=\"px-1\">\r\n            <Grid item xs={12} md={12}>\r\n              <FormControl {...props.FormElementProps}  className=\"mt-4 mb-4\">\r\n                <InputLabel id=\"Save Action\">Save Action</InputLabel>\r\n                <Select \r\n                  label=\"Save Action\"\r\n                  value={props.data.saveAction}\r\n                  onChange={e => {onSaveActionChange(e.target.value); props.func.setSaveAction(e.target.value);}}\r\n                >\r\n                  <MenuItem value=\"create\">Create</MenuItem>\r\n                  <MenuItem value=\"overwrite\">Overwrite</MenuItem>\r\n                  <MenuItem value=\"merge\">Merge</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <>\r\n            {\r\n              showDuplicates ?\r\n              <Grid container className=\"px-1 py-3\">\r\n                <Grid item xs={12} md={12}>\r\n                  <FormControl {...props.FormElementProps}>\r\n                    <InputLabel id=\"duplcatedRecords\">Select a duplicated record</InputLabel>\r\n                    <Select \r\n                      label=\"Duplicated Records\"\r\n                      value={duplicatedId}\r\n                      onChange={e => {setDuplicatedId(e.target.value)}}\r\n                    >\r\n                      {\r\n                        props.duplicatedRec.map((element, i) => <MenuItem value={element.id} key={i}>{element.name}</MenuItem>)\r\n                      }\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n              : <></>\r\n            }\r\n          </>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container>\r\n            <Grid item xs={6} md={6}>\r\n              <Button autoFocus onClick={saveToAddListClose}>\r\n                Add to Save List\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6} md={6} style={{textAlign: \"right\"}}>\r\n              <Button onClick={saveToCRIDB}>\r\n                Save to CRIDB\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Place;","import React, {useState} from 'react'\r\nimport { \r\n    TextField, \r\n    Grid, \r\n    Button, \r\n    Typography, \r\n} from '@material-ui/core';\r\n\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\n\r\nimport CircleLoading from \"../CircleLoading\";\r\nimport * as ApiDB from \"../../api/db\"\r\nimport * as ApiCRIDB from \"../../api/cridb\"\r\nimport * as ApiFunction from \"../../api/function\"\r\n\r\nimport DialogCompare from '../../components/DialogCompare/Place';\r\n\r\n\r\nconst Place = ({ func, data, FormElementProps }) => {    \r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [duplicatedRec, setDuplicatedRec] = useState([]);\r\n\r\n    const saveToSavelist = () => async() => {\r\n        try{\r\n            await ApiCRIDB.searchThing({query: ApiFunction.keywordFormat(data.keyword)}).then((res) => {\r\n                const duplicates = res.data.records.filter((record)=>{\r\n                    return record.subtype === \"place\";\r\n                });\r\n                if(duplicates.length > 0){\r\n                    setDuplicatedRec(duplicates);\r\n                }\r\n            });\r\n            setIsOpen(true);\r\n        }catch(ex){}\r\n    }\r\n\r\n    const saveClose = async(saveAction, cridbId, variant) => {\r\n        const params = [\r\n            data.keyword, \r\n            data.place.latitude, \r\n            data.place.longitude, \r\n            data.place.article, \r\n            data.place.downloadableImageURL,\r\n            saveAction,\r\n            cridbId\r\n        ];\r\n        try {\r\n            await ApiDB.saveToSavelist(params, \"place\").then(res => {\r\n                if(res.status === 200){\r\n                    enqueueSnackbar('The current record is successfully saved to Save List!', { variant });\r\n                }\r\n            });\r\n        } catch (ex) {}\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Typography variant=\"h6\" align=\"left\" style={{paddingBottom: \"1.25rem\"}}>Result</Typography> \r\n        <Grid container spacing={1}>\r\n            <>\r\n                {\r\n                    data.placeLoading ? <CircleLoading /> :\r\n                    <>\r\n                        {/* Coordinate */}\r\n                        <Grid container spacing={5}>\r\n                            <Grid item xs={6} md={6}>\r\n                                <TextField \r\n                                    {...FormElementProps}                                    \r\n                                    label=\"Latitude\"\r\n                                    value={data.place.latitude}\r\n                                    onChange={e => func.setPlaceForm('latitude', e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6} md={6}>\r\n                                <TextField \r\n                                    {...FormElementProps}\r\n                                    label=\"Longitude\"\r\n                                    value={data.place.longitude}\r\n                                    onChange={e => func.setPlaceForm('longitude', e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/* Article */}\r\n                        <TextField \r\n                            {...FormElementProps}\r\n                            label={\"Article\"}\r\n                            multiline\r\n                            rows={8}\r\n                            value={data.place.article}\r\n                            onChange={e => func.setPlaceForm('article', e.target.value)}\r\n                        />\r\n                        {/* Downloadable Image URL */}\r\n                        <TextField \r\n                            {...FormElementProps}\r\n                            label=\"Downloadable Image URL\"\r\n                            multiline\r\n                            rows={8}\r\n                            value={data.place.downloadableImageURL}\r\n                            onChange={e => func.setPlaceForm('downloadableImageURL', e.target.value)}\r\n                        />\r\n                    </>\r\n                }\r\n            </>\r\n            {/* Save Action */}\r\n            <Grid container className=\"mt-4\">\r\n                <Grid item xs={8} md={8}></Grid>\r\n                <Grid item xs={4} md={4} align=\"right\">\r\n                    <Button variant=\"outlined\" color=\"primary\" size=\"large\" className=\"mt-2\" onClick={saveToSavelist()}>\r\n                        Compare\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <DialogCompare \r\n            FormElementProps={FormElementProps} \r\n            isOpen={isOpen} \r\n            duplicatedRec={duplicatedRec}\r\n            setIsOpen={setIsOpen} \r\n            saveClose={saveClose}\r\n            data={data}\r\n            func={func}\r\n        />\r\n        </>                       \r\n\r\n    );\r\n}\r\n\r\nexport default function IntegrationNotistack(props) {\r\n    return (\r\n        <SnackbarProvider maxSnack={3}>\r\n            <Place {...props}/>\r\n        </SnackbarProvider>\r\n    );\r\n}\r\n","import React, {\r\n  useState\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  Button, \r\n  Dialog, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  IconButton, \r\n  Grid,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Select\r\n} from '@mui/material';\r\n\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst Artefact = (props) => {\r\n  const [showDuplicates, setShowDuplicates] = useState(false);\r\n  const [duplicatedId, setDuplicatedId] = useState(\"\");\r\n\r\n  const onSaveActionChange = (saveAction) => {\r\n    if(saveAction === \"create\"){\r\n      setShowDuplicates(false);\r\n      setDuplicatedId(\"\");\r\n    }else if(saveAction === \"overwrite\"){\r\n      setShowDuplicates(true);\r\n    }else if(saveAction === \"merge\"){\r\n      setShowDuplicates(true);\r\n    }\r\n  }\r\n\r\n  const cancelClose = () => {\r\n    props.setIsOpen(false);\r\n  };\r\n\r\n  const saveToAddListClose = () => {\r\n    if(!(props.data.saveAction!==\"create\" && duplicatedId === \"\")){\r\n      props.setIsOpen(false);\r\n      props.saveClose(props.data.saveAction, duplicatedId, \"success\");\r\n    }\r\n  };\r\n\r\n  const saveToCRIDB = () => {\r\n    if(!(props.data.saveAction!==\"create\" && duplicatedId === \"\")){\r\n      props.setIsOpen(false); \r\n      props.func.saveForm(duplicatedId);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <BootstrapDialog\r\n        onClose={cancelClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={props.isOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={cancelClose}>\r\n          Duplicates\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers style={{width: \"350px\"}}>\r\n          <Grid container className=\"px-1\">\r\n            <Grid item xs={12} md={12}>\r\n              <FormControl {...props.FormElementProps}  className=\"mt-4 mb-4\">\r\n                <InputLabel id=\"Save Action\">Save Action</InputLabel>\r\n                <Select \r\n                  label=\"Save Action\"\r\n                  value={props.data.saveAction}\r\n                  onChange={e => {onSaveActionChange(e.target.value); props.func.setSaveAction(e.target.value);}}\r\n                >\r\n                  <MenuItem value=\"create\">Create</MenuItem>\r\n                  <MenuItem value=\"overwrite\">Overwrite</MenuItem>\r\n                  <MenuItem value=\"merge\">Merge</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <>\r\n            {\r\n              showDuplicates ?\r\n              <Grid container className=\"px-1 py-3\">\r\n                <Grid item xs={12} md={12}>\r\n                  <FormControl {...props.FormElementProps}>\r\n                    <InputLabel id=\"duplcatedRecords\">Select a duplicated record</InputLabel>\r\n                    <Select \r\n                      label=\"Duplicated Records\"\r\n                      value={duplicatedId}\r\n                      onChange={e => {setDuplicatedId(e.target.value)}}\r\n                    >\r\n                      {\r\n                        props.duplicatedRec.map((element, i) => <MenuItem value={element.id} key={i}>{element.name}</MenuItem>)\r\n                      }\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n              : <></>\r\n            }\r\n          </>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container>\r\n            <Grid item xs={6} md={6}>\r\n              <Button autoFocus onClick={saveToAddListClose}>\r\n                Add to Save List\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6} md={6} style={{textAlign: \"right\"}}>\r\n              <Button onClick={saveToCRIDB}>\r\n                Save to CRIDB\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Artefact;","import React, {useState} from 'react'\r\nimport { \r\n    TextField, \r\n    Grid, \r\n    Button, \r\n    Typography, \r\n} from '@material-ui/core';\r\n\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\n\r\nimport CircleLoading from \"../CircleLoading\";\r\nimport * as ApiDB from \"../../api/db\"\r\nimport * as ApiCRIDB from \"../../api/cridb\";\r\nimport * as ApiFunction from \"../../api/function\";\r\n\r\nimport DialogCompare from '../../components/DialogCompare/Artefact';\r\n\r\n\r\nconst Artefact = ({ func, data, FormElementProps }) => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [duplicatedRec, setDuplicatedRec] = useState([]);\r\n\r\n    const saveToSavelist = () => async() => {\r\n        try{\r\n            await ApiCRIDB.searchThing({query: ApiFunction.keywordFormat(data.keyword)}).then((res) => {\r\n                const duplicates = res.data.records.filter((record)=>{\r\n                    return record.subtype === \"artefact\";\r\n                });\r\n                if(duplicates.length > 0){\r\n                    setDuplicatedRec(duplicates);\r\n                }\r\n            });\r\n            setIsOpen(true);\r\n        }catch(ex){}\r\n        \r\n    }\r\n\r\n    const saveClose = async(saveAction, cridbId, variant) => {\r\n        const params = [\r\n            data.keyword, \r\n            data.artefact.startdate, \r\n            data.artefact.enddate, \r\n            data.artefact.article, \r\n            data.artefact.downloadableImageURL,\r\n            saveAction,\r\n            cridbId\r\n        ];\r\n        try {\r\n            await ApiDB.saveToSavelist(params, \"artefact\").then(res => {\r\n                if(res.status === 200){\r\n                    enqueueSnackbar('The current record is successfully saved to Save List!', { variant });\r\n                }\r\n            });\r\n        } catch (ex) {}\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Typography variant=\"h6\" align=\"left\" style={{paddingBottom: \"1.25rem\"}}>Result</Typography> \r\n        <Grid container spacing={1}>\r\n            <>\r\n            {\r\n                data.artefactLoading ? <CircleLoading /> :\r\n                <>\r\n                    {/* Start and End Date */}                \r\n                    <Grid container spacing={5}>\r\n                        <Grid item xs={6} md={6}>\r\n                            <TextField \r\n                                {...FormElementProps}                                    \r\n                                label=\"Start Date\"\r\n                                value={data.artefact.startDate}\r\n                                onChange={e => func.setArtefactForm('startDate', e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} md={6}>\r\n                            <TextField \r\n                                {...FormElementProps}\r\n                                label=\"End Date\"\r\n                                value={data.artefact.endDate}\r\n                                onChange={e => func.setArtefactForm('endDate', e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    {/* Article */}\r\n                    <TextField \r\n                        {...FormElementProps}\r\n                        label=\"Article\"\r\n                        multiline\r\n                        rows={8}\r\n                        value={data.artefact.article}\r\n                        onChange={e => func.setArtefactForm('article', e.target.value)}\r\n                    />\r\n                    {/* Downloadable Image URL */}\r\n                    <TextField \r\n                        {...FormElementProps}\r\n                        label=\"Downloadable Image URL\"\r\n                        multiline\r\n                        rows={8}\r\n                        value={data.artefact.downloadableImageURL}\r\n                        onChange={e => func.setArtefactForm('downloadableImageURL', e.target.value)}\r\n                    />\r\n                </>\r\n            }\r\n            </>\r\n            {/* Save Action */}\r\n            <Grid container className=\"mt-4\">\r\n                <Grid item xs={8} md={8}></Grid>\r\n                <Grid item xs={4} md={4} align=\"right\">\r\n                    <Button variant=\"outlined\" color=\"primary\" size=\"large\" className=\"mt-2\" onClick={saveToSavelist()}>\r\n                        Compare\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <DialogCompare \r\n            FormElementProps={FormElementProps} \r\n            isOpen={isOpen} \r\n            duplicatedRec={duplicatedRec}\r\n            setIsOpen={setIsOpen} \r\n            saveClose={saveClose}\r\n            data={data}\r\n            func={func}\r\n        />\r\n        </>                                             \r\n    );\r\n}\r\n\r\nexport default function IntegrationNotistack(props) {\r\n    return (\r\n        <SnackbarProvider maxSnack={3}>\r\n            <Artefact {...props}/>\r\n        </SnackbarProvider>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { \r\n    TextField,\r\n    Typography, \r\n    Select, \r\n    MenuItem, \r\n    FormControl, \r\n    InputLabel,\r\n    Grid,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport * as ApiCRIDB from \"../../api/cridb\";\r\nimport * as ApiFunction from \"../../api/function\";\r\n\r\nimport moment from 'moment';\r\n\r\nimport Person from \"../../components/Person\"\r\nimport Place from \"../../components/Place\"\r\nimport Artefact from \"../../components/Artefact\"\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setListItem } from \"../../store/reducers/listitem\";\r\n\r\nconst FormElementProps = {\r\n    fullWidth: true,\r\n    variant: \"standard\",\r\n    size: \"medium\",\r\n    className: \"mb-4\"\r\n}\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    dispatch(setListItem(0));\r\n\r\n    const [keyword, setKeyword] = useState(\"Etna, California\");\r\n    const [recordType, setRecordType] = useState(\"place\");\r\n    const [saveAction, setSaveAction] = useState(\"create\");\r\n    const [error, setError] = useState(false);\r\n    const [personLoading, setPersonLoading] = useState(false);\r\n    const [placeLoading, setPlaceLoading] = useState(false);\r\n    const [artefactLoading, setArtefactLoading] = useState(false);\r\n\r\n    const dateFormat = (str_date = \"\", str_format = \"\") => {\r\n        const date = moment(str_date);\r\n        return date.format(str_format);\r\n    }\r\n\r\n    const [person, setPerson] = useState({\r\n        birthDate: \"\",\r\n        deathDate: \"\",\r\n        birthPlace: \"\",\r\n        deathPlace: \"\",\r\n        article: \"\",\r\n        downloadableImageURL: \"\",\r\n    });\r\n    const [place, setPlace] = useState({\r\n        latitude: \"\",\r\n        longitude: \"\",\r\n        article: \"\",\r\n        downloadableImageURL: \"\",\r\n    });\r\n    const [artefact, setArtefact] = useState({\r\n        startDate: \"\",\r\n        endDate: \"\",\r\n        article: \"\",\r\n        downloadableImageURL: \"\",\r\n    });\r\n\r\n    \r\n    const getPersonForm = async (e) => {\r\n        const res = await ApiCRIDB.getDbPediaByKeyword(ApiFunction.keywordFormat(keyword));       \r\n        if (res.inValid) {\r\n            setError(true); \r\n            return;\r\n        }\r\n        const {\r\n            birthDate,\r\n            deathDate,\r\n            comment,\r\n        } = res.data;\r\n\r\n        let article = \"\";\r\n        try{\r\n            comment.forEach(element => {\r\n                if (element.lang === \"en\" && article === \"\"){\r\n                    article = element.value;\r\n                }      \r\n            })\r\n        }catch(ex){}\r\n        \r\n        let birth;\r\n        try{birth = dateFormat(birthDate[0].value, \"MM/DD/yyyy\")}catch(e){birth = \"\"}\r\n        let death;\r\n        try{death = dateFormat(deathDate[0].value, \"MM/DD/yyyy\")}catch(e){death = \"\"}\r\n        \r\n        let wikiDom = await ApiCRIDB.getPerson(ApiFunction.keywordFormat(keyword));\r\n        \r\n        let bPlace;\r\n        try{bPlace = wikiDom.data.result.birthPlace}catch(e){bPlace = \"\"}\r\n        let dPlace;\r\n        try{dPlace = wikiDom.data.result.deathPlace}catch(e){dPlace = \"\"}\r\n\r\n        let imageURL = \"\";\r\n        try{\r\n            const imageList = (await ApiCRIDB.getImageFileNames(keyword)).data.result;\r\n            let promiseArr = [];\r\n            imageList.forEach(image => {\r\n                promiseArr.push(ApiCRIDB.getDownloadableImageURL(image));\r\n            })\r\n            const results = await Promise.all(promiseArr);\r\n            results.forEach(ele => {\r\n                const imageName = ele.data.result;\r\n                imageURL += imageName + \"\\n\";\r\n            })\r\n        }catch(ex){imageURL = \"\"}\r\n\r\n        setPerson({\r\n            birthDate: birth,\r\n            deathDate: death,\r\n            birthPlace: bPlace,\r\n            deathPlace: dPlace,\r\n            article: article,\r\n            downloadableImageURL: imageURL\r\n        });\r\n    }\r\n    const getPlaceForm = async (e) => {\r\n        const res = await ApiCRIDB.getDbPediaByKeyword(ApiFunction.keywordFormat(keyword));       \r\n        if (res.inValid) {\r\n            setError(true); \r\n            return;\r\n        }\r\n\r\n        const {\r\n            comment,\r\n        } = res.data;\r\n        \r\n        let article = \"\";\r\n        comment.forEach(element => {\r\n            if (element.lang === \"en\" && article === \"\"){\r\n                article = element.value;\r\n            }      \r\n        })\r\n\r\n        let {lat, lon} = (await ApiCRIDB.getWikiCoord(ApiFunction.keywordFormat(keyword))).data.result;\r\n\r\n        let imageURL = \"\";\r\n        try{\r\n            const imageList = (await ApiCRIDB.getImageFileNames(keyword)).data.result;\r\n            let promiseArr = [];\r\n            imageList.forEach(image => {\r\n                promiseArr.push(ApiCRIDB.getDownloadableImageURL(image));\r\n            })\r\n            const results = await Promise.all(promiseArr);\r\n            results.forEach(ele => {\r\n                const imageName = ele.data.result;\r\n                imageURL += imageName + \"\\n\";\r\n            })\r\n        }catch(ex){imageURL = \"\"}\r\n\r\n        setPlace({\r\n            latitude: lat,\r\n            longitude: lon,\r\n            article: article,\r\n            downloadableImageURL: imageURL\r\n        });\r\n    }\r\n    const getArtefactForm = async (e) => {\r\n        const res = await ApiCRIDB.getDbPediaByKeyword(keyword);       \r\n        if (res.inValid) {\r\n            setError(true); \r\n            return;\r\n        }\r\n        const {\r\n            comment,\r\n        } = res.data;\r\n        \r\n        let article = \"\";\r\n        comment.forEach(element => {\r\n            if (element.lang === \"en\" && article === \"\"){\r\n                article = element.value;\r\n            }      \r\n        })\r\n\r\n        let imageURL = \"\";\r\n        try{\r\n            const imageList = (await ApiCRIDB.getImageFileNames(keyword)).data.result;\r\n            let promiseArr = [];\r\n            imageList.forEach(image => {\r\n                promiseArr.push(ApiCRIDB.getDownloadableImageURL(image));\r\n            })\r\n            const results = await Promise.all(promiseArr);\r\n            results.forEach(ele => {\r\n                const imageName = ele.data.result;\r\n                imageURL += imageName + \"\\n\";\r\n            })\r\n        }catch(ex){imageURL = \"\"}\r\n\r\n        setArtefact({\r\n            startDate: \"\",\r\n            endDate: \"\",\r\n            article: article,\r\n            downloadableImageURL: imageURL\r\n        });\r\n    }\r\n    \r\n    \r\n    const setPersonForm = (key, value) => {\r\n        setPerson({\r\n            ...person,\r\n            [key]: value\r\n        });\r\n    }\r\n    const setPlaceForm = (key, value) => {\r\n        setPlace({\r\n            ...place,\r\n            [key]: value\r\n        });\r\n    }\r\n    const setArtefactForm = (key, value) => {\r\n        setArtefact({\r\n            ...artefact,\r\n            [key]: value\r\n        });\r\n    }\r\n\r\n    const saveForm = async (cridbId) => {\r\n        if(saveAction === \"create\"){\r\n            if(recordType === \"person\"){\r\n                setPersonLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    birthdate: person.birthDate,\r\n                    birthplace: person.birthplace,\r\n                    deathdate: person.deathDate,\r\n                    deathplace: person.deathplace,\r\n                    article: person.article,\r\n                    pictures: person.downloadableImageURL\r\n                };\r\n                try{\r\n                    await ApiFunction.createPersonAction(record);\r\n                    setPersonLoading(false);\r\n                }catch(error){}\r\n            }else if(recordType === \"place\"){\r\n                setPlaceLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    latitude: place.latitude,\r\n                    longitude: place.longitude,\r\n                    article: place.article,\r\n                    pictures: place.downloadableImageURL\r\n                }\r\n                try{\r\n                    await ApiFunction.createPlaceAction(record);\r\n                }catch(error){}\r\n                setPlaceLoading(false);\r\n            }else if(recordType === \"artefact\"){\r\n                setArtefactLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    startdate: artefact.startDate,\r\n                    enddate: artefact.endDate,\r\n                    article: artefact.article,\r\n                    pictures: artefact.downloadableImageURL\r\n                }\r\n                try{\r\n                    await ApiFunction.createArtefactAction(record);\r\n                }catch(error){}\r\n                setArtefactLoading(false);\r\n            }\r\n        }else if(saveAction === \"overwrite\"){\r\n            if(recordType === \"person\"){\r\n                setPersonLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    cridbid: cridbId,\r\n                    birthdate: person.birthDate,\r\n                    birthplace: person.birthplace,\r\n                    deathdate: person.deathDate,\r\n                    deathplace: person.deathplace,\r\n                    article: person.article,\r\n                    pictures: person.downloadableImageURL\r\n                }\r\n                try{\r\n                    await ApiFunction.overwritePersonAction(record);\r\n                    setPersonLoading(false);\r\n                }catch(error){}\r\n            }else if(recordType === \"place\"){   \r\n                setPlaceLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    cridbid: cridbId,\r\n                    latitude: place.latitude,\r\n                    longitude: place.longitude,\r\n                    article: place.article,\r\n                    pictures: place.downloadableImageURL\r\n                }\r\n                try{\r\n                    await ApiFunction.overwritePlaceAction(record);\r\n                }catch(error){}\r\n                setPlaceLoading(false);\r\n            }else if(recordType === \"artefact\"){\r\n                setArtefactLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    cridbid: cridbId,\r\n                    startdate: artefact.startDate,\r\n                    enddate: artefact.endDate,\r\n                    article: artefact.article,\r\n                    pictures: artefact.pictures\r\n                }   \r\n                try{\r\n                    await ApiFunction.overwriteArtefactAction(record);\r\n                }catch(error){}\r\n                setArtefactLoading(false);\r\n            }    \r\n        }else if(saveAction === \"merge\"){\r\n            if(recordType === \"person\"){\r\n                setPersonLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    cridbid: cridbId,\r\n                    birthdate: person.birthDate,\r\n                    birthplace: person.birthplace,\r\n                    deathdate: person.deathDate,\r\n                    deathplace: person.deathplace,\r\n                    article: person.article,\r\n                    pictures: person.downloadableImageURL\r\n                }\r\n                try{\r\n                    await ApiFunction.mergePersonAction(record);\r\n                    setPersonLoading(false);\r\n                }catch(error){}\r\n            }else if(recordType === \"place\"){   \r\n                setPlaceLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    cridbid: cridbId,\r\n                    latitude: place.latitude,\r\n                    longitude: place.longitude,\r\n                    article: place.article,\r\n                    pictures: place.downloadableImageURL\r\n                }\r\n                try{\r\n                    await ApiFunction.mergePlaceAction(record);\r\n                }catch(error){}\r\n                setPlaceLoading(false);\r\n            }else if(recordType === \"artefact\"){\r\n                setArtefactLoading(true);\r\n                const record = {\r\n                    keyword: keyword,\r\n                    cridbid: cridbId,\r\n                    startdate: artefact.startDate,\r\n                    enddate: artefact.endDate,\r\n                    article: artefact.article,\r\n                    pictures: artefact.pictures\r\n                }   \r\n                try{\r\n                    await ApiFunction.mergeArtefactAction(record);\r\n                }catch(error){}\r\n                setArtefactLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    let resultForm;\r\n    if(recordType === \"person\"){\r\n        resultForm = <Person\r\n                        func={{saveForm, setSaveAction, setPersonForm}}\r\n                        data={{keyword, person, saveAction, personLoading}}\r\n                        FormElementProps={FormElementProps}\r\n                    />;\r\n    }else if(recordType === \"place\"){\r\n        resultForm = <Place\r\n                        func={{saveForm, setSaveAction, setPlaceForm}}\r\n                        data={{keyword, place, saveAction, placeLoading}}\r\n                        FormElementProps={FormElementProps}\r\n                    />;\r\n    }else if(recordType === \"artefact\"){\r\n        resultForm = <Artefact\r\n                        func={{saveForm, setSaveAction, setArtefactForm}}\r\n                        data={{keyword, artefact, saveAction, artefactLoading}}\r\n                        FormElementProps={FormElementProps}\r\n                    />;\r\n    }\r\n\r\n    const goSubmit = e => {\r\n        try{\r\n            if(recordType === \"person\"){\r\n                getPersonForm();\r\n            }else if(recordType === \"place\"){\r\n                getPlaceForm();\r\n            }else if(recordType === \"artefact\"){\r\n                getArtefactForm();\r\n            }\r\n        }catch(ex){\r\n            setError(true); \r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <Grid container className=\"px-1 py-3\" spacing={5}>\r\n            <Grid item xs={1} md={1}></Grid>\r\n            <Grid item xs={5} md={3} className=\"pr-3\">\r\n                <Typography variant=\"h6\" className=\"mb-8 pb-3\" align=\"left\">Search</Typography>\r\n                <form onSubmit={goSubmit} className=\"mb-4\">\r\n                    <TextField \r\n                        fullWidth\r\n                        className=\"mb-2\"\r\n                        variant=\"standard\"\r\n                        value={keyword}\r\n                        onChange={e => {\r\n                            if (error) setError(false);\r\n                            setKeyword(e.target.value);\r\n                        }}\r\n                        \r\n                        label=\"Wikipedia name\"\r\n                        error={error}\r\n                        helperText={error ? \"Can not find data.\" : \"\"}\r\n                    />\r\n                </form>\r\n                <FormControl {...FormElementProps}>\r\n                    <InputLabel id=\"recordType\">Record type</InputLabel>\r\n                    <Select \r\n                        label=\"Record type\"\r\n                        value={recordType}\r\n                        onChange={e => {setSaveAction(\"create\"); setRecordType(e.target.value);}}\r\n                    >\r\n                        <MenuItem value=\"person\">Person</MenuItem>\r\n                        <MenuItem value=\"place\">Place</MenuItem>\r\n                        <MenuItem value=\"artefact\">Artefact</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <Grid container align=\"right\">\r\n                    <Grid item xs={12} md={12}>\r\n                        <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={goSubmit}>\r\n                            Go\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid> \r\n            </Grid>\r\n            <Grid item xs={5} md={7}>\r\n                {resultForm}\r\n            </Grid>\r\n            <Grid item xs={1} md={1}></Grid>\r\n        </Grid>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  Button, \r\n  Dialog, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  IconButton, \r\n  TextField,\r\n  Grid\r\n} from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport * as ApiDB from \"../../../api/db\"\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst Person = (props) => {\r\n  const [birthdate, setBirthdate] = useState(\"\");\r\n  const [deathdate, setDeathdate] = useState(\"\");\r\n  const [birthplace, setBirthplace] = useState(\"\");\r\n  const [deathplace, setDeathplace] = useState(\"\");\r\n  const [article, setArticle] = useState(\"\");\r\n  const [pictures, setPictures] = useState(\"\");\r\n  const [id, setId] = useState(null);\r\n  const [rowid, setRowid] = useState(null);\r\n\r\n  const cancelClose = () => {\r\n    props.setEditd(false);\r\n  };\r\n\r\n  const saveClose = async() => {\r\n    props.setEditd(false);\r\n    const updatedData = {\r\n      \"rowid\": rowid, \r\n      \"birthdate\": birthdate, \r\n      \"deathdate\": deathdate, \r\n      \"birthplace\": birthplace, \r\n      \"deathplace\": deathplace, \r\n      \"article\": article, \r\n      \"pictures\": pictures\r\n    }\r\n    props.updateEvent(id, updatedData);\r\n    await ApiDB.updateToSavelist(updatedData, \"person\");\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if(props.selectedrow !== null){\r\n      setBirthdate(props.selectedrow.birthdate);\r\n      setDeathdate(props.selectedrow.deathdate);\r\n      setBirthplace(props.selectedrow.birthplace);\r\n      setDeathplace(props.selectedrow.deathplace);\r\n      setArticle(props.selectedrow.article);\r\n      setPictures(props.selectedrow.pictures);\r\n      setId(props.selectedrow.id);\r\n      setRowid(props.selectedrow.rowid);\r\n    }\r\n  }, [props.selectedrow]);\r\n\r\n  return (\r\n    <div>\r\n      <BootstrapDialog\r\n        onClose={cancelClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={props.isOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={cancelClose}>\r\n          Edit Person\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container className=\"px-1 py-3\">\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6} md={6}>\r\n                <TextField\r\n                  {...props.FormElementProps}                                    \r\n                  label=\"Birth Date\"\r\n                  value={birthdate}\r\n                  onChange={e => {\r\n                    setBirthdate(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6} md={6}>\r\n                <TextField\r\n                  {...props.FormElementProps}                                    \r\n                  label=\"Death Date\"\r\n                  value={deathdate}\r\n                  onChange={e => {\r\n                    setDeathdate(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={12}>\r\n              <TextField\r\n                {...props.FormElementProps}                                    \r\n                label=\"Birth Place\"\r\n                value={birthplace}\r\n                onChange={e => {\r\n                  setBirthplace(e.target.value);\r\n                }}\r\n              />\r\n              <TextField\r\n                {...props.FormElementProps}                                    \r\n                label=\"Death Place\"\r\n                value={deathplace}\r\n                onChange={e => {\r\n                  setDeathplace(e.target.value);\r\n                }}\r\n              />\r\n              <TextField \r\n                {...props.FormElementProps}\r\n                label=\"Article\"\r\n                multiline\r\n                rows={8}\r\n                value={article}\r\n                onChange={e => {\r\n                  setArticle(e.target.value);\r\n                }}\r\n              />\r\n              <TextField \r\n                {...props.FormElementProps}\r\n                label=\"Downloadable Image URL\"\r\n                multiline\r\n                rows={8}\r\n                value={pictures}\r\n                onChange={e => {\r\n                  setPictures(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={saveClose}>\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Person;","import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Chip from '@mui/material/Chip';\r\n\r\nimport { Grid, Button } from '@material-ui/core';\r\n\r\nimport EditIcon from \"@mui/icons-material/EditOutlined\";\r\nimport DeleteIcon from \"@mui/icons-material/DeleteOutlined\";\r\nimport DialogEdit from '../../../components/DialogEdit/Person';\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setListItem } from \"../../../store/reducers/listitem\";\r\n\r\nimport * as ApiDB from \"../../../api/db\";\r\nimport * as ApiFunction from \"../../../api/function\";\r\n\r\n\r\nconst Person = () => {\r\n  const dispatch = useDispatch();\r\n  dispatch(setListItem(1));\r\n\r\n  const FormElementProps = {\r\n    fullWidth: true,\r\n    variant: \"standard\",\r\n    size: \"medium\",\r\n    className: \"mb-4\"\r\n  }\r\n  \r\n  const [rows, setRows] = useState([]);\r\n  const [editd, setEditd] = useState(false);\r\n  const [selectedrow, setSelectedrow] = useState(null);\r\n\r\n  const saveEvent = async() => {\r\n    try{\r\n      console.log(rows);\r\n      const bulkSavePromise = [];\r\n      rows.forEach(row => {\r\n        if(row.saveaction === \"create\"){\r\n          bulkSavePromise.push(ApiFunction.createPersonAction(row));\r\n        }else if(row.saveaction === \"overwrite\"){\r\n          bulkSavePromise.push(ApiFunction.overwritePersonAction(row));\r\n        }else if(row.saveaction === \"merge\"){\r\n          bulkSavePromise.push(ApiFunction.mergePersonAction(row));\r\n        }\r\n      });\r\n      await Promise.all(bulkSavePromise);\r\n      console.log(\"all saved\");\r\n    }catch(ex){\r\n      return;\r\n    }\r\n  }\r\n\r\n  const updateEvent = (index, data) => {\r\n    setRows((prev) => {\r\n      const arr = [...prev];\r\n      arr[index - 1].birthdate = data.birthdate\r\n      arr[index - 1].deathdate = data.deathdate\r\n      arr[index - 1].birthplace = data.birthplace\r\n      arr[index - 1].deathplace = data.deathplace\r\n      arr[index - 1].article = data.article\r\n      arr[index - 1].pictures = data.pictures\r\n      return arr;\r\n    });\r\n  }\r\n  \r\n  const fetchSaveList = async() => {\r\n    try{\r\n      const saveListRows = (await ApiDB.getSaveList(\"person\")).data.results;\r\n      saveListRows.forEach((element, index) => {\r\n        setRows((prev) => [...prev, {\r\n          id: index + 1, \r\n          keyword: element.keyword, \r\n          birthplace: element.birthplace, \r\n          deathplace: element.deathplace, \r\n          birthdate: element.birthdate, \r\n          deathdate: element.deathdate, \r\n          article: element.article,\r\n          pictures: element.pictures,\r\n          saveaction: element.saveaction,\r\n          cridbid: element.cridbid,\r\n          rowid: element.id\r\n        }])\r\n      });\r\n    }catch(ex){}\r\n  }\r\n\r\n  const columns = [\r\n    { field: 'id', headerName: 'No', flex: 1, sortable: false,\r\n      renderCell: (params) => {\r\n        return(\r\n          <div style={{marginLeft: \"10px\"}}>\r\n            {params.row.id}\r\n          </div>\r\n        )\r\n      }\r\n    },\r\n    { \r\n      field: 'saveaction', \r\n      headerName: 'Save Action', \r\n      flex: 2,\r\n      renderCell: (params) => {\r\n        let saveaction;\r\n        if(params.row.saveaction === \"create\"){\r\n          saveaction = <Chip label=\"create\" size=\"small\" />\r\n        }else if(params.row.saveaction === \"overwrite\"){\r\n          saveaction = <Chip label=\"overwrite\" size=\"small\" />\r\n        }else if(params.row.saveaction === \"merge\"){\r\n          saveaction = <Chip label=\"merge\" size=\"small\" />\r\n        }\r\n        return(\r\n          <>\r\n          {saveaction}\r\n          </>\r\n        )\r\n      }\r\n    },\r\n    { field: 'keyword', headerName: 'Keyword', flex: 2 },\r\n    { field: 'birthplace', headerName: 'Birth Place', flex: 2 },\r\n    { field: 'deathplace', headerName: 'Death Place', flex: 2 },\r\n    { field: 'birthdate', headerName: 'Birth Date', flex: 2, type: 'date' },\r\n    { field: 'deathdate', headerName: 'Death Date', flex: 2, type: 'date' },\r\n    { \r\n      field: 'action', \r\n      headerName: 'Action', \r\n      sortable: false,\r\n      flex: 2,\r\n      disableClickEventBubbling: true,\r\n      renderCell: (params) => {\r\n        \r\n        const onEdit = async() => {\r\n          setSelectedrow(params.row);\r\n          setEditd(true);\r\n        };\r\n\r\n        const onDelete = async() => {\r\n          await ApiDB.deleteFromSavelist(params.row.rowid, \"person\");\r\n          setRows((prev) => {\r\n            const arr = [...prev];\r\n            arr.splice(prev.findIndex(item => item.rowid === params.row.rowid), 1);\r\n            return arr;\r\n          });\r\n        };\r\n  \r\n        return (\r\n          <>\r\n            <Button onClick={onEdit}> \r\n              <EditIcon style={{fontSize: \"22\"}}/>\r\n            </Button>\r\n            <Button onClick={onDelete}> \r\n              <DeleteIcon style={{fontSize: \"22\"}}/>\r\n            </Button>\r\n          </>\r\n        ) \r\n      } \r\n    },\r\n  ];\r\n  \r\n  useEffect(() => {\r\n    fetchSaveList();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <Grid container className=\"px-1 py-3\" spacing={5}>\r\n      <Grid item xs={1} md={1}></Grid>\r\n      <Grid item xs={10} md={10}>\r\n        <div className='mb-4' style={{ height: 650, width: '100%', textAlign: 'center' }}>\r\n          <DataGrid\r\n            rows={rows}\r\n            columns={columns}\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10]}\r\n            isRowSelectable={() => {return false}}\r\n          />\r\n        </div>\r\n        <Grid item xs={12} md={12} align=\"right\">\r\n          <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={saveEvent}>\r\n            Save to CRIDB\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={1} md={1}></Grid>\r\n    </Grid>\r\n    <DialogEdit \r\n      isOpen={editd} \r\n      FormElementProps={FormElementProps} \r\n      selectedrow={selectedrow}\r\n      setEditd={setEditd} \r\n      updateEvent={updateEvent}\r\n    />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Person;","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  Button, \r\n  Dialog, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  IconButton, \r\n  TextField,\r\n  Grid\r\n} from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport * as ApiDB from \"../../../api/db\"\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst Place = (props) => {\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longitude, setLongitude] = useState(\"\");\r\n  const [article, setArticle] = useState(\"\");\r\n  const [pictures, setPictures] = useState(\"\");\r\n  const [id, setId] = useState(null);\r\n  const [rowid, setRowid] = useState(null);\r\n\r\n  const cancelClose = () => {\r\n    props.setEditd(false);\r\n  };\r\n\r\n  const saveClose = async() => {\r\n    props.setEditd(false);\r\n    const updatedData = {\r\n      \"rowid\": rowid, \r\n      \"latitude\": latitude, \r\n      \"longitude\": longitude, \r\n      \"article\": article, \r\n      \"pictures\": pictures\r\n    }\r\n    props.updateEvent(id, updatedData);\r\n    await ApiDB.updateToSavelist(updatedData, \"place\");\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if(props.selectedrow !== null){\r\n      setLatitude(props.selectedrow.latitude);\r\n      setLongitude(props.selectedrow.longitude);\r\n      setArticle(props.selectedrow.article);\r\n      setPictures(props.selectedrow.pictures);\r\n      setId(props.selectedrow.id);\r\n      setRowid(props.selectedrow.rowid);\r\n    }\r\n  }, [props.selectedrow]);\r\n\r\n  return (\r\n    <div>\r\n      <BootstrapDialog\r\n        onClose={cancelClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={props.isOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={cancelClose}>\r\n          Edit Person\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container className=\"px-1 py-3\">\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6} md={6}>\r\n                <TextField\r\n                  {...props.FormElementProps}                                    \r\n                  label=\"Latitude\"\r\n                  value={latitude}\r\n                  onChange={e => {\r\n                    setLatitude(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6} md={6}>\r\n                <TextField\r\n                  {...props.FormElementProps}                                    \r\n                  label=\"Longitude\"\r\n                  value={longitude}\r\n                  onChange={e => {\r\n                    setLongitude(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={12}>\r\n              <TextField \r\n                {...props.FormElementProps}\r\n                label=\"Article\"\r\n                multiline\r\n                rows={8}\r\n                value={article}\r\n                onChange={e => {\r\n                  setArticle(e.target.value);\r\n                }}\r\n              />\r\n              <TextField \r\n                {...props.FormElementProps}\r\n                label=\"Downloadable Image URL\"\r\n                multiline\r\n                rows={8}\r\n                value={pictures}\r\n                onChange={e => {\r\n                  setPictures(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={saveClose}>\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Place;","import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Chip from '@mui/material/Chip';\r\n\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport EditIcon from \"@mui/icons-material/EditOutlined\";\r\nimport DeleteIcon from \"@mui/icons-material/DeleteOutlined\";\r\nimport DialogEdit from '../../../components/DialogEdit/Place';\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setListItem } from \"../../../store/reducers/listitem\";\r\n\r\nimport * as ApiDB from \"../../../api/db\";\r\nimport * as ApiFunction from \"../../../api/function\";\r\n\r\n\r\nconst Place = () => {\r\n  const dispatch = useDispatch();\r\n  dispatch(setListItem(2));\r\n\r\n  const FormElementProps = {\r\n    fullWidth: true,\r\n    variant: \"standard\",\r\n    size: \"medium\",\r\n    className: \"mb-4\"\r\n  }\r\n  \r\n  const [rows, setRows] = useState([]);\r\n  const [editd, setEditd] = useState(false);\r\n  const [selectedrow, setSelectedrow] = useState(null);\r\n\r\n  const saveEvent = async() => {\r\n    try{\r\n      console.log(rows);\r\n      const bulkSavePromise = [];\r\n      rows.forEach(row => {\r\n        if(row.saveaction === \"create\"){\r\n          bulkSavePromise.push(ApiFunction.createPlaceAction(row));\r\n        }else if(row.saveaction === \"overwrite\"){\r\n          bulkSavePromise.push(ApiFunction.overwritePlaceAction(row));\r\n        }else if(row.saveaction === \"merge\"){\r\n          bulkSavePromise.push(ApiFunction.mergePlaceAction(row));\r\n        }\r\n      });\r\n      await Promise.all(bulkSavePromise);\r\n      console.log(\"all saved\");\r\n    }catch(ex){\r\n      return;\r\n    }\r\n  }\r\n\r\n  const updateEvent = (index, data) => {\r\n    setRows((prev) => {\r\n      const arr = [...prev];\r\n      arr[index - 1].latitude = data.latitude\r\n      arr[index - 1].longitude = data.longitude\r\n      arr[index - 1].article = data.article\r\n      arr[index - 1].pictures = data.pictures\r\n      return arr;\r\n    });\r\n  }\r\n  \r\n  const fetchSaveList = async() => {\r\n    try{\r\n      const saveListRows = (await ApiDB.getSaveList(\"place\")).data.results;\r\n      saveListRows.forEach((element, index) => {\r\n        setRows((prev) => [...prev, {\r\n          id: index + 1, \r\n          keyword: element.keyword, \r\n          latitude: element.latitude, \r\n          longitude: element.longitude, \r\n          article: element.article,\r\n          pictures: element.pictures,\r\n          saveaction: element.saveaction,\r\n          cridbid: element.cridbid,\r\n          rowid: element.id\r\n        }])\r\n      });\r\n    }catch(ex){}\r\n  }\r\n\r\n  const columns = [\r\n    { field: 'id', headerName: 'No', flex: 1, sortable: false,\r\n      renderCell: (params) => {\r\n        return(\r\n          <div style={{marginLeft: \"10px\"}}>\r\n            {params.row.id}\r\n          </div>\r\n        )\r\n      }\r\n    },\r\n    { \r\n      field: 'saveaction', \r\n      headerName: 'Save Action', \r\n      flex: 2,\r\n      renderCell: (params) => {\r\n        let saveaction;\r\n        if(params.row.saveaction === \"create\"){\r\n          saveaction = <Chip label=\"create\" size=\"small\" />\r\n        }else if(params.row.saveaction === \"overwrite\"){\r\n          saveaction = <Chip label=\"overwrite\" size=\"small\" />\r\n        }else if(params.row.saveaction === \"merge\"){\r\n          saveaction = <Chip label=\"merge\" size=\"small\" />\r\n        }\r\n        return(\r\n          <>\r\n          {saveaction}\r\n          </>\r\n        )\r\n      }\r\n\r\n    },\r\n    { field: 'keyword', headerName: 'Keyword', flex: 2 },\r\n    { field: 'latitude', headerName: 'Latitude', flex: 2 },\r\n    { field: 'longitude', headerName: 'Longitude', flex: 2 },\r\n    { \r\n      field: 'action', \r\n      headerName: 'Action', \r\n      sortable: false,\r\n      flex: 2,\r\n      disableClickEventBubbling: true,\r\n      renderCell: (params) => {\r\n        \r\n        const onEdit = async() => {\r\n          setSelectedrow(params.row);\r\n          setEditd(true);\r\n        };\r\n\r\n        const onDelete = async() => {\r\n          await ApiDB.deleteFromSavelist(params.row.rowid, \"place\");\r\n          setRows((prev) => {\r\n            const arr = [...prev];\r\n            arr.splice(prev.findIndex(item => item.rowid === params.row.rowid), 1);\r\n            return arr;\r\n          });\r\n        };\r\n  \r\n        return (\r\n          <>\r\n            <Button onClick={onEdit}> \r\n              <EditIcon style={{fontSize: \"22\"}}/>\r\n            </Button>\r\n            <Button onClick={onDelete}> \r\n              <DeleteIcon style={{fontSize: \"22\"}}/>\r\n            </Button>\r\n          </>\r\n        ) \r\n      } \r\n    },\r\n  ];\r\n  \r\n  useEffect(() => {\r\n    fetchSaveList();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <Grid container className=\"px-1 py-3\" spacing={5}>\r\n      <Grid item xs={1} md={1}></Grid>\r\n      <Grid item xs={10} md={10}>\r\n        <div className='mb-4' style={{ height: 650, width: '100%', textAlign: 'center' }}>\r\n          <DataGrid\r\n            rows={rows}\r\n            columns={columns}\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10]}\r\n            isRowSelectable={() => {return false}}\r\n          />\r\n        </div>\r\n        <Grid item xs={12} md={12} align=\"right\">\r\n          <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={saveEvent}>\r\n            Save to CRIDB\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={1} md={1}></Grid>\r\n    </Grid>\r\n    <DialogEdit \r\n      isOpen={editd} \r\n      FormElementProps={FormElementProps} \r\n      selectedrow={selectedrow}\r\n      setEditd={setEditd} \r\n      updateEvent={updateEvent}\r\n    />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Place;","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  Button, \r\n  Dialog, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  IconButton, \r\n  TextField,\r\n  Grid\r\n} from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport * as ApiDB from \"../../../api/db\"\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst Person = (props) => {\r\n  const [startdate, setStartdate] = useState(\"\");\r\n  const [enddate, setEnddate] = useState(\"\");\r\n  const [article, setArticle] = useState(\"\");\r\n  const [pictures, setPictures] = useState(\"\");\r\n  const [id, setId] = useState(null);\r\n  const [rowid, setRowid] = useState(null);\r\n\r\n  const cancelClose = () => {\r\n    props.setEditd(false);\r\n  };\r\n\r\n  const saveClose = async() => {\r\n    props.setEditd(false);\r\n    const updatedData = {\r\n      \"rowid\": rowid, \r\n      \"startdate\": startdate, \r\n      \"enddate\": enddate, \r\n      \"article\": article, \r\n      \"pictures\": pictures\r\n    }\r\n    props.updateEvent(id, updatedData);\r\n    await ApiDB.updateToSavelist(updatedData, \"artefact\");\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if(props.selectedrow !== null){\r\n      setStartdate(props.selectedrow.startdate);\r\n      setEnddate(props.selectedrow.enddate);\r\n      setArticle(props.selectedrow.article);\r\n      setPictures(props.selectedrow.pictures);\r\n      setId(props.selectedrow.id);\r\n      setRowid(props.selectedrow.rowid);\r\n    }\r\n  }, [props.selectedrow]);\r\n\r\n  return (\r\n    <div>\r\n      <BootstrapDialog\r\n        onClose={cancelClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={props.isOpen}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={cancelClose}>\r\n          Edit Person\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container className=\"px-1 py-3\">\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6} md={6}>\r\n                <TextField\r\n                  {...props.FormElementProps}                                    \r\n                  label=\"Start Date\"\r\n                  value={startdate}\r\n                  onChange={e => {\r\n                    setStartdate(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6} md={6}>\r\n                <TextField\r\n                  {...props.FormElementProps}                                    \r\n                  label=\"End Date\"\r\n                  value={enddate}\r\n                  onChange={e => {\r\n                    setEnddate(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={12}>\r\n              <TextField \r\n                {...props.FormElementProps}\r\n                label=\"Article\"\r\n                multiline\r\n                rows={8}\r\n                value={article}\r\n                onChange={e => {\r\n                  setArticle(e.target.value);\r\n                }}\r\n              />\r\n              <TextField \r\n                {...props.FormElementProps}\r\n                label=\"Downloadable Image URL\"\r\n                multiline\r\n                rows={8}\r\n                value={pictures}\r\n                onChange={e => {\r\n                  setPictures(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={saveClose}>\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Person;","import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Chip from '@mui/material/Chip';\r\n\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport EditIcon from \"@mui/icons-material/EditOutlined\";\r\nimport DeleteIcon from \"@mui/icons-material/DeleteOutlined\";\r\nimport DialogEdit from '../../../components/DialogEdit/Artefact';\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setListItem } from \"../../../store/reducers/listitem\";\r\n\r\nimport * as ApiDB from \"../../../api/db\";\r\nimport * as ApiFunction from \"../../../api/function\";\r\n\r\n\r\nconst Artefact = () => {\r\n  const dispatch = useDispatch();\r\n  dispatch(setListItem(3));\r\n  \r\n  const FormElementProps = {\r\n    fullWidth: true,\r\n    variant: \"standard\",\r\n    size: \"medium\",\r\n    className: \"mb-4\"\r\n  }\r\n  \r\n  const [rows, setRows] = useState([]);\r\n  const [editd, setEditd] = useState(false);\r\n  const [selectedrow, setSelectedrow] = useState(null);\r\n\r\n  const saveEvent = async() => {\r\n    try{\r\n      console.log(rows);\r\n      const bulkSavePromise = [];\r\n      rows.forEach(row => {\r\n        if(row.saveaction === \"create\"){\r\n          bulkSavePromise.push(ApiFunction.createArtefactAction(row));\r\n        }else if(row.saveaction === \"overwrite\"){\r\n          bulkSavePromise.push(ApiFunction.overwriteArtefactAction(row));\r\n        }else if(row.saveaction === \"merge\"){\r\n          bulkSavePromise.push(ApiFunction.mergeArtefactAction(row));\r\n        }\r\n      });\r\n      await Promise.all(bulkSavePromise);\r\n      console.log(\"all saved\");\r\n    }catch(ex){\r\n      return;\r\n    }\r\n  }\r\n\r\n  const updateEvent = (index, data) => {\r\n    setRows((prev) => {\r\n      const arr = [...prev];\r\n      arr[index - 1].startdate = data.startdate\r\n      arr[index - 1].enddate = data.enddate\r\n      arr[index - 1].article = data.article\r\n      arr[index - 1].pictures = data.pictures\r\n      return arr;\r\n    });\r\n  }\r\n  \r\n  const fetchSaveList = async() => {\r\n    try{\r\n      const saveListRows = (await ApiDB.getSaveList(\"artefact\")).data.results;\r\n      saveListRows.forEach((element, index) => {\r\n        setRows((prev) => [...prev, {\r\n          id: index + 1, \r\n          keyword: element.keyword, \r\n          startdate: element.startdate, \r\n          enddate: element.enddate, \r\n          article: element.article,\r\n          pictures: element.pictures,\r\n          saveaction: element.saveaction,\r\n          cridbid: element.cridbid,\r\n          rowid: element.id\r\n        }])\r\n      });\r\n    }catch(ex){}\r\n  }\r\n\r\n  const columns = [\r\n    { field: 'id', headerName: 'No', flex: 1, sortable: false,\r\n      renderCell: (params) => {\r\n        return(\r\n          <div style={{marginLeft: \"10px\"}}>\r\n            {params.row.id}\r\n          </div>\r\n        )\r\n      }\r\n    },\r\n    { \r\n      field: 'saveaction', \r\n      headerName: 'Save Action', \r\n      flex: 2,\r\n      renderCell: (params) => {\r\n        let saveaction;\r\n        if(params.row.saveaction === \"create\"){\r\n          saveaction = <Chip label=\"create\" size=\"small\" />\r\n        }else if(params.row.saveaction === \"overwrite\"){\r\n          saveaction = <Chip label=\"overwrite\" size=\"small\" />\r\n        }else if(params.row.saveaction === \"merge\"){\r\n          saveaction = <Chip label=\"merge\" size=\"small\" />\r\n        }\r\n        return(\r\n          <>\r\n          {saveaction}\r\n          </>\r\n        )\r\n      }\r\n    },\r\n    { field: 'keyword', headerName: 'Keyword', flex: 2 },\r\n    { field: 'startdate', headerName: 'Start Date', flex: 2, type: 'date' },\r\n    { field: 'enddate', headerName: 'End Date', flex: 2, type: 'date' },\r\n    { \r\n      field: 'action', \r\n      headerName: 'Action', \r\n      sortable: false,\r\n      flex: 2,\r\n      disableClickEventBubbling: true,\r\n      renderCell: (params) => {\r\n        \r\n        const onEdit = async() => {\r\n          setSelectedrow(params.row);\r\n          setEditd(true);\r\n        };\r\n\r\n        const onDelete = async() => {\r\n          await ApiDB.deleteFromSavelist(params.row.rowid, \"artefact\");\r\n          setRows((prev) => {\r\n            const arr = [...prev];\r\n            arr.splice(prev.findIndex(item => item.rowid === params.row.rowid), 1);\r\n            return arr;\r\n          });\r\n        };\r\n  \r\n        return (\r\n          <>\r\n            <Button onClick={onEdit}> \r\n              <EditIcon style={{fontSize: \"22\"}}/>\r\n            </Button>\r\n            <Button onClick={onDelete}> \r\n              <DeleteIcon style={{fontSize: \"22\"}}/>\r\n            </Button>\r\n          </>\r\n        ) \r\n      } \r\n    },\r\n  ];\r\n  \r\n  useEffect(() => {\r\n    fetchSaveList();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <Grid container className=\"px-1 py-3\" spacing={5}>\r\n      <Grid item xs={1} md={1}></Grid>\r\n      <Grid item xs={10} md={10}>\r\n        <div className='mb-4' style={{ height: 650, width: '100%', textAlign: 'center' }}>\r\n          <DataGrid\r\n            rows={rows}\r\n            columns={columns}\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10]}\r\n            isRowSelectable={() => {return false}}\r\n          />\r\n        </div>\r\n        <Grid item xs={12} md={12} align=\"right\">\r\n          <Button variant=\"outlined\" color=\"primary\" size=\"large\" onClick={saveEvent}>\r\n            Save to CRIDB\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={1} md={1}></Grid>\r\n    </Grid>\r\n    <DialogEdit \r\n      isOpen={editd} \r\n      FormElementProps={FormElementProps} \r\n      selectedrow={selectedrow}\r\n      setEditd={setEditd} \r\n      updateEvent={updateEvent}\r\n    />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Artefact;","import React, {useState} from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  Drawer,\r\n  AppBar,\r\n  CssBaseline,\r\n  Toolbar,\r\n  List,\r\n  Typography,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Collapse\r\n} from \"@mui/material\";\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport ListIcon from \"@mui/icons-material/ListOutlined\";\r\nimport HomeIcon from \"@mui/icons-material/HomeOutlined\";\r\nimport ItemIcon from '@mui/icons-material/StarBorderOutlined';\r\nimport ExpandLess from '@mui/icons-material/ExpandLess';\r\nimport ExpandMore from '@mui/icons-material/ExpandMore';\r\n\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { listItemSelector, setListItem } from \"../../store/reducers/listitem\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  link: {\r\n    textDecoration: 'none',\r\n    color: '#343434',\r\n  },\r\n}));\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst MainLayout = (props) => {\r\n  const [open, setOpen] = useState(true);\r\n  const classes = useStyles();\r\n  \r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const handleListItemClick = (event, index) => {\r\n    dispatch(setListItem(index));\r\n  };\r\n\r\n  const { listItem } = useSelector(listItemSelector);\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        style={{\r\n          boxShadow: \"0px 2px 4px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 1px 0px rgb(0 0 0 / 12%)\",\r\n          backgroundColor: \"rgb(102 136 229)\",\r\n          color: \"#ffffff\",\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <Typography\r\n            style={{ width: \"100%\", textAlign: \"center\" }}\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n          >\r\n            CRIDB Web Automator\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          [`& .MuiDrawer-paper`]: {\r\n            width: drawerWidth,\r\n            boxSizing: \"border-box\",\r\n          },\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        <Box sx={{ overflow: \"auto\" }}>\r\n          <List>\r\n            <Link to=\"/\" className={classes.link}>\r\n              <ListItem button \r\n                selected={listItem === 0}\r\n                onClick={(event) => handleListItemClick(event, 0)}\r\n              >\r\n                <ListItemIcon><HomeIcon /></ListItemIcon>\r\n                <ListItemText primary=\"Home\" />\r\n              </ListItem>\r\n            </Link>\r\n            <ListItem button onClick={handleClick}>\r\n              <ListItemIcon><ListIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Save List\" />\r\n              {open ? <ExpandLess /> : <ExpandMore />}\r\n            </ListItem>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <List>\r\n                <Link to=\"/save-list/person\" className={classes.link}>\r\n                  <ListItem button \r\n                    sx={{ pl: 4 }}\r\n                    selected={listItem === 1}\r\n                    onClick={(event) => handleListItemClick(event, 1)}\r\n                  >\r\n                      <ListItemIcon><ItemIcon /></ListItemIcon>\r\n                      <ListItemText primary=\"Person\" />\r\n                  </ListItem>\r\n                </Link>\r\n                <Link to=\"/save-list/place\" className={classes.link}>\r\n                  <ListItem button \r\n                    sx={{ pl: 4 }}\r\n                    selected={listItem === 2}\r\n                    onClick={(event) => handleListItemClick(event, 2)}\r\n                  >\r\n                    <ListItemIcon><ItemIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Place\" />\r\n                  </ListItem>\r\n                </Link>\r\n                <Link to=\"/save-list/artefact\" className={classes.link}>\r\n                  <ListItem button \r\n                    sx={{ pl: 4 }}\r\n                    selected={listItem === 3}\r\n                    onClick={(event) => handleListItemClick(event, 3)}\r\n                  >\r\n                    <ListItemIcon><ItemIcon /></ListItemIcon>\r\n                    <ListItemText primary=\"Artefact\" />\r\n                  </ListItem>\r\n                </Link>\r\n              </List>\r\n            </Collapse>\r\n          </List>\r\n        </Box>\r\n      </Drawer>\r\n      <Box className=\"mt-3\" component=\"main\" sx={{ flexGrow: 1, p: 3 }} style={{width: \"100%\"}}>\r\n        {props.children}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import axios from \"axios\"\r\n\r\nexport const loginUser = async (data) => {\r\n    try {\r\n        return await axios.post(`/auth/login`, data);\r\n    } catch (error) {\r\n        return {\r\n            error: error.message,\r\n            inValid: true\r\n        }\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Link from '@mui/material/Link';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Alert from '@mui/material/Alert';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport * as ApiAuth from \"../../api/auth\";\r\n\r\nconst FormElementProps = {\r\n  fullWidth: true,\r\n  variant: \"standard\",\r\n  size: \"medium\",\r\n  className: \"mb-4\"\r\n}\r\n\r\nfunction Copyright(props) {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"http://172.104.60.204:5000/\">\r\n        CRIDB Automator\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\n\r\nexport default function Login({ setToken }) {\r\n  const [username, setUserName] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [validForm, setValidForm] = useState(true);\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    setValidForm(true);\r\n    const {data} = await ApiAuth.loginUser({username, password});\r\n    if(data.result === \"success\"){\r\n      setToken(data);\r\n    }else{\r\n      setValidForm(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          { !validForm \r\n            ? \r\n            <Alert severity=\"error\">\r\n              Username or Password is incorrect. Please try again!\r\n            </Alert>\r\n            :\r\n            <></>\r\n          }\r\n          <br></br>\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n          CRIDB Automator\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n            <TextField\r\n              {...FormElementProps}\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              onChange={e => setUserName(e.target.value)}\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              {...FormElementProps}\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange={e => setPassword(e.target.value)}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n        <Copyright sx={{ mt: 8, mb: 4 }} />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nLogin.propTypes = {\r\n  setToken: PropTypes.func.isRequired\r\n};","import React, { Fragment } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport {\r\n  ThemeProvider,\r\n  createTheme,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport store from \"./store\";\r\nimport { blue } from '@material-ui/core/colors';\r\nimport Home from './pages/Home';\r\nimport SavePersonList from './pages/SaveList/Person';\r\nimport SavePlaceList from './pages/SaveList/Place';\r\nimport SaveArtefactList from './pages/SaveList/Artefact';\r\nimport MainLayout from './layout/MainLayout';\r\n\r\nimport Login from './components/Login'\r\nimport useToken from './useToken';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: blue[600]\r\n    },\r\n    secondary: {\r\n      main: blue[300]\r\n    }\r\n  }\r\n});\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  main: {\r\n    marginTop: theme.spacing(3),\r\n    padding: theme.spacing(3),\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: theme.spacing(2),\r\n    },\r\n  }\r\n}))\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\tconst persistor = persistStore(store);\r\n\r\n  const { token, setToken } = useToken();\r\n\r\n  if(!token) {\r\n    return <Login setToken={setToken} />\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n        <ThemeProvider theme={theme}>\r\n          <Provider store={store}>\r\n            <PersistGate loading={null} persistor={persistor}>\r\n              <main className={classes.main}>\r\n                <MainLayout>\r\n                  <Switch>\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    <Route exact path=\"/save-list/person\" component={SavePersonList} />\r\n                    <Route exact path=\"/save-list/place\" component={SavePlaceList} />\r\n                    <Route exact path=\"/save-list/artefact\" component={SaveArtefactList} />\r\n                    <Redirect to=\"/\" />\r\n                  </Switch>\r\n                </MainLayout>\r\n              </main>\r\n            </PersistGate>\r\n          </Provider>\r\n        </ThemeProvider>\r\n    </Fragment>\r\n)};\r\n\r\nexport default App;\r\n\r\n","import { useState } from 'react';\r\n\r\nexport default function useToken() {\r\n  const getToken = () => {\r\n    const tokenString = sessionStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    return userToken?.token\r\n  };\r\n\r\n  const [token, setToken] = useState(getToken());\r\n\r\n  const saveToken = userToken => {\r\n    sessionStorage.setItem('token', JSON.stringify(userToken));\r\n    setToken(userToken.token);\r\n  };\r\n\r\n  return {\r\n    setToken: saveToken,\r\n    token\r\n  }\r\n}","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n"],"sourceRoot":""}